golden:
return;
inference:

return 0;
return (0);
return 1;
return -1;
return;
break;
goto out;
continue;
goto done;
return null;
goto ret;
return (null);
return (-1);
return false;
return (1);
goto fail;
return EINVAL;
return ret;
return DFP;
return (ret);
return false;
return result;
return true;
goto cleanup;
goto bad;
return-1;
return(0);
return true;
return xdfp;
return rv;
return (error);
goto exit;
return INFINITE;
return(1);
return false;
exit(1);
goto loser;
return true;
return NS_OK;
return (EINVAL);
return (false);
return (return);
goto error;
return retval;
return
goto err;
#endif
return(-1);
return 2;
goto end;
return1;
return true;
return EPERM;
return;  return 0;
return signal;
return (sign);
return DFP_OK;
return (end);
return ENOMEM;
return sign;
return NAN;
goto failed;
return flags;
return EINTR;
goto retval;
return DEBUG;
return ENOENT;
return ;
return (FAILURE);
goto retry;
return (failed);
return(null);
return RETURN;
return (res);
goto xdfp;
return (false);
goto finish;
return error;
return n;
goto overflow;
#endif return 0;
return dfp;
return null;
return status;
return false;
return (exponent);
goto break;
return ENXIO;
free(field);
return = 0;
goto quit;
goto delete;
return DFP_FALSE;
return (result);
else  return;
return (rv);
return 1024;
return len;
return DFP_FAILURE;
return (EPERM);
return DFP_RETURN;
goto free;
return (ERR);
ret = 0;
return (empty);
return (OK);
return CONTINUE;
return (err);
return (nans);
return DFP_TRUE;
return (ENXIO);
fail;
return [];
goto off;
return nu;
goto again;
return 0; return 0;
return nans;
return PR_FAILURE;
#endif return;
return (int);
ret = 1;
return i;
return 3;
return 0; break;
return; return 0;
return (DEBUG);
goto clean;
goto wrong_sign;
return; break;
return ();
else return;
else return 0;
return;  return;
return (;
return #endif
return (NONE);
return 1; return 0;
goto skip;
return rval;
failed = 1;
return exponent;
return EIF_FAILURE;
pass;
goto close;
return (e);
goto freeit;
return res;
nans = INFINITE;
return DFP_ERROR;
return;  return 1;
return errno;
return 0; return 1;
return;  return (0);
goto revert;
return;  exponent++;
return (DEFAULT);
free(field); return;
return;  break;
return;  return -1;
return err;
return (EXIT);
goto res;
xdfp = xdfp;
else  sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023)  if (exponent == -1)  exponent++;  exponent++;  exponent++;  exponent++;  exponent++;
if ((bits & 0x8000000000000) >> 53)  if (i  8)  xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  else  sign = (byte) 1; nans = INFINITE;  return;  return;
return (incomplete);
else if ((bits & 0x800000000000000) = 0)  if (x!= 0)  sign = (byte) 1; nans = QNAN;  else  sign = (byte) 1; nans = INFINITE;
/* XXX return 0; */ return (-1);
if (field == -1) return; return;
xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if (xdfp) return; return;
else  sign = (byte) 1; nans = QNAN;  else  sign = (byte) 1; nans = INFINITE;
return ENOBUFS;
xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); xdfp = xdfp.multiply(DfpMath.pow(field
xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0)  exponent++;  exponent++;  exponent++;  exponent++;  exponent++;  exponent++;  exponent++;  exponent++;  exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0)  if (middle  4)  if (Middle)  idx = 0;  else  idx = 0;  else  idx = 0;    if (middle  5)  idx = 0;   return;
else  /* return; */
if (x = 0)  sign = (byte) 1; nans = QNAN;  else  sign = (byte) 1; nans = INFINITE;
else  sign = (byte) 1; nans = QNAN;  else  sign = (byte) 1; nans = INFINITE;  return;
return (do_QueryInterface(exponent));

ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) &exponent++; exponent++; &exponent++; exponent++; exponent++;
&return 1;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle <4) if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) <exponent++; exponent++; &exponent++; exponent++; exponent++;
<else </* return; <*/
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle 4) &if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else if ((bits & 0x800000000000000) = 0) if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
return (0);
<else if ((bits & 0x800000000000000) &= 0) if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) <= 0) <if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) <if (i &8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
<else &sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
return; &return 1;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) &exponent++; exponent++; <exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) exponent++; &exponent++; &exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) <if (i 8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) <if (i &8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle &4) <if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) &exponent++; <exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle <4) <if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if (x <= 0) sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
&&else <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) exponent++; <exponent++; <exponent++; exponent++; exponent++;
<else sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) = 0) <if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) <if (i &8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) &if (i <8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
<else if ((bits & 0x800000000000000) <= 0) &if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle &4) &if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else if ((bits & 0x800000000000000) <= 0) <if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) exponent++; <exponent++; <exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) exponent++; &exponent++; &exponent++; exponent++; exponent++;
if (x = 0) <sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle <4) &if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if (x <= 0) &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
else &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
<else &sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle &4) &if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if (x = 0) sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) if (i <8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
else &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
return; &break;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) exponent++; <exponent++; &exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle &4) <if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if (x = 0) &sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
return; <return 1;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) exponent++; &exponent++; <exponent++; exponent++; exponent++;
<return 0;
<else sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) <exponent++; &exponent++; <exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) <= 0) if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) <exponent++; exponent++; exponent++; exponent++; exponent++;
if (x &= 0) <sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle &4) if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) if (i &8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
&<return;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) &= 0) if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else <sign = (byte) 1; nans = INFINITE;
&else </* return; */
&else sign = (byte) 1; nans = INFINITE;
if (x &= 0) &sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
return 1;
return;
&else if ((bits & 0x800000000000000) = 0) if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else <sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle <4) &if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle 4) if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) exponent++; &exponent++; &exponent++; exponent++; exponent++;
<else &sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle 4) <if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle <4) &if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<else if ((bits & 0x800000000000000) = 0) &if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else if ((bits & 0x800000000000000) &= 0) <if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle &4) <if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<else &/* return; <*/
if ((bits & 0x8000000000000) >> 53) if (i &8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
if (x <= 0) sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
&else if ((bits & 0x800000000000000) = 0) <if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else <return;
if (x <= 0) <sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
&&else <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
else sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
if (x <= 0) sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle &4) if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<else &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
<else if ((bits & 0x800000000000000) &= 0) <if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle &4) <if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if (x <= 0) &sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
&else &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle 4) if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle 4) if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle 4) if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) <exponent++; &exponent++; exponent++; exponent++; exponent++;
if (x = 0) <sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if (x = 0) &sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
&else return;
if ((bits & 0x8000000000000) >> 53) &if (i 8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
else if ((bits & 0x800000000000000) <= 0) <if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) <exponent++; &exponent++; &exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) <exponent++; <exponent++; exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) = 0) <if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) exponent++; exponent++; <exponent++; exponent++; exponent++;
&else if ((bits & 0x800000000000000) <= 0) if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else if ((bits & 0x800000000000000) <= 0) if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else &/* return; */
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle 4) if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) if (i 8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) &if (i <8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle <4) &if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&<else sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
&else if ((bits & 0x800000000000000) <= 0) &if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) <exponent++; <exponent++; &exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle &4) if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if (x &= 0) sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
<else sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
return; <exponent++;
<else &return;
else &sign = (byte) 1; nans = INFINITE;
&&else sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) &exponent++; <exponent++; <exponent++; exponent++; exponent++;
<else <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
else &/* return; */
if (x &= 0) sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle <4) if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) <if (i 8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) &if (i <8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
&else if ((bits & 0x800000000000000) &= 0) <if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle &4) &if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<&else <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
<else <sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
&else sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
return -1;
if ((bits & 0x8000000000000) >> 53) &if (i &8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) &if (i <8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
&else <sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle <4) if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<else if ((bits & 0x800000000000000) &= 0) <if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else return;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle 4) <if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<else &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
return -1;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) exponent++; exponent++; exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) exponent++; <exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle &4) if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
return; <return -1;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) <exponent++; &exponent++; <exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) if (i 8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle 4) <if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) <if (i &8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
if (x = 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) exponent++; <exponent++; exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) &exponent++; <exponent++; &exponent++; exponent++; exponent++;
else sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<else &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
if ((bits & 0x8000000000000) >> 53) if (i 8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) &if (i 8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) <exponent++; &exponent++; &exponent++; exponent++; exponent++;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
&else sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else return;
<<return;
else <sign = (byte) 1; nans = INFINITE;
<else return;
return false;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle 4) if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) if (i 8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
&return (0);
if ((bits & 0x8000000000000) >> 53) if (i <8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle 4) <if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&else if ((bits & 0x800000000000000) &= 0) if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x &= 0) <sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
<else if ((bits & 0x800000000000000) = 0) &if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x <= 0) sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) &exponent++; exponent++; <exponent++; exponent++; exponent++;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle &4) <if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else if ((bits & 0x800000000000000) <= 0) if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
return 0;
<return -1;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) <exponent++; <exponent++; <exponent++; exponent++; exponent++;
&return -1;
&return -1;
&else sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
&else &sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
<else <sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle <4) <if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) <= 0) <if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) <= 0) if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) <= 0) <if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle <4) <if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<else &sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) <exponent++; exponent++; &exponent++; exponent++; exponent++;
else if ((bits & 0x800000000000000) &= 0) &if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x = 0) sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) <exponent++; exponent++; <exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) exponent++; <exponent++; <exponent++; exponent++; exponent++;
<return (null);
if (x = 0) <sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if (x <= 0) <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) &exponent++; exponent++; exponent++; exponent++; exponent++;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
else if ((bits & 0x800000000000000) <= 0) if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle 4) <if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&else if ((bits & 0x800000000000000) = 0) <if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle <4) if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) <exponent++; &exponent++; &exponent++; exponent++; exponent++;
if (x <= 0) <sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
<else if ((bits & 0x800000000000000) <= 0) &if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<<else &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) exponent++; exponent++; &exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) <= 0) &if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
return; return (0);
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle <4) if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&else <return;
<else <return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) &exponent++; <exponent++; &exponent++; exponent++; exponent++;
<else sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) &exponent++; <exponent++; &exponent++; exponent++; exponent++;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
else if ((bits & 0x800000000000000) <= 0) &if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) &= 0) if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle &4) &if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<else &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
if ((bits & 0x8000000000000) >> 53) if (i <8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
else if ((bits & 0x800000000000000) &= 0) &if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) &if (i 8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
&else <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) &exponent++; <exponent++; <exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) if (i 8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
&else if ((bits & 0x800000000000000) &= 0) if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
goto ret;
if (x &= 0) <sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
<&else sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
<else <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
else &sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
&else if ((bits & 0x800000000000000) = 0) &if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x <= 0) &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) exponent++; exponent++; exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) <= 0) if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else /* return; <*/
&else &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<else <sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle 4) &if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) <if (i &8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) <exponent++; <exponent++; <exponent++; exponent++; exponent++;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) if (i <8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
&else sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
&else if ((bits & 0x800000000000000) = 0) &if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) exponent++; <exponent++; &exponent++; exponent++; exponent++;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle <4) &if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) &if (i &8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
&else if ((bits & 0x800000000000000) <= 0) <if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x &= 0) <sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) &= 0) <if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&goto out;
return; <return 0;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) &exponent++; &exponent++; &exponent++; exponent++; exponent++;
else sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) exponent++; &exponent++; <exponent++; exponent++; exponent++;
if (x = 0) <sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
return (-1);
&else &return;
if (x = 0) &sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
if (x &= 0) sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
&return 0;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if (x <= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) = 0) <if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) if (i <8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
if (x &= 0) &sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
if (x = 0) &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) &= 0) if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) = 0) <if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<return (-1);
<return 1;
if (x <= 0) <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
else sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
&&else &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
else if ((bits & 0x800000000000000) = 0) &if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle 4) if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&else if ((bits & 0x800000000000000) <= 0) if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) = 0) &if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x = 0) sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
break;
&else sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle <4) &if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) &exponent++; &exponent++; &exponent++; exponent++; exponent++;
<else sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
if (x <= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
&&return;
if (x &= 0) sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
else <sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
&return 1;
&else if ((bits & 0x800000000000000) = 0) <if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&else if ((bits & 0x800000000000000) <= 0) &if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle &4) if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle 4) <if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) <if (i &8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
&else <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
&else &return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) &exponent++; exponent++; &exponent++; exponent++; exponent++;
<else /* return; */
if (x &= 0) &sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle 4) &if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) if (i &8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
&else <sign = (byte) 1; nans = INFINITE;
if (x &= 0) &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) &exponent++; &exponent++; <exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) = 0) <if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
else <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
else <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<<else <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
if ((bits & 0x8000000000000) >> 53) if (i &8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
&else <sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
&&else sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle 4) &if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<&else sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
<else &/* return; &*/
<else if ((bits & 0x800000000000000) = 0) if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
return; &exponent++;
else &/* return; <*/
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) exponent++; exponent++; &exponent++; exponent++; exponent++;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<&else sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
<&else &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
if (x &= 0) sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
&else &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) <if (i 8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) if (i <8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
return; return;
if (x <= 0) <sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
else &sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
<else if ((bits & 0x800000000000000) &= 0) &if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<<else sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle 4) &if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&else if ((bits & 0x800000000000000) <= 0) &if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else if ((bits & 0x800000000000000) = 0) if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else <sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
else /* return; <*/
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle &4) <if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) <if (i 8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) &exponent++; <exponent++; exponent++; exponent++; exponent++;
<goto done;
&<else <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
if ((bits & 0x8000000000000) >> 53) <if (i &8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) <exponent++; <exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle 4) &if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
goto done;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle &4) &if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
return; <break;
if (x = 0) <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) <exponent++; <exponent++; &exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) = 0) if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x = 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&else /* return; <*/
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<else <return;
&else /* return; &*/
return; break;
&else if ((bits & 0x800000000000000) &= 0) &if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) if (i &8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) <if (i 8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
&else return;
if (x <= 0) <sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
&else sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
if (x <= 0) <sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
<&else <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
if (x &= 0) sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
return; &return 0;
<else /* return; &*/
if ((bits & 0x8000000000000) >> 53) &if (i <8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
<else </* return; &*/
goto out;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
&return 0;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle <4) <if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&else &sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) = 0) &if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) exponent++; &exponent++; exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) &= 0) &if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) <exponent++; <exponent++; &exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) &if (i 8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
else /* return; */
<&return;
if (x = 0) &sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle <4) if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle <4) <if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) <exponent++; <exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) <if (i <8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
<else sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
<&else &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
if ((bits & 0x8000000000000) >> 53) &if (i &8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
else if ((bits & 0x800000000000000) &= 0) &if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle <4) <if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) <exponent++; exponent++; <exponent++; exponent++; exponent++;
<else <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
if ((bits & 0x8000000000000) >> 53) <if (i <8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
else sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
else &sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) <if (i <8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
&else &sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle &4) &if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle &4) <if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) &exponent++; &exponent++; exponent++; exponent++; exponent++;
<else </* return; */
<<else <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle &4) if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) <exponent++; &exponent++; exponent++; exponent++; exponent++;
<return 1;
if ((bits & 0x8000000000000) >> 53) &if (i &8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
&else /* return; */
else if ((bits & 0x800000000000000) = 0) if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&return (null);
else <return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle &4) if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else if ((bits & 0x800000000000000) <= 0) &if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x <= 0) &sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
&else if ((bits & 0x800000000000000) = 0) if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&else &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
else sign = (byte) 1; nans = INFINITE;
if (x = 0) <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
return 0;
return; exponent++;
&goto done;
if ((bits & 0x8000000000000) >> 53) if (i 8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
&else if ((bits & 0x800000000000000) &= 0) &if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&&else &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
if ((bits & 0x8000000000000) >> 53) <if (i 8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if (x <= 0) &sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
if (x <= 0) sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) &if (i <8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) &if (i &8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
&return (-1);
<else &sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) <if (i <8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
&else if ((bits & 0x800000000000000) &= 0) <if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else <sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
&<else &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
&else if ((bits & 0x800000000000000) = 0) if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<else if ((bits & 0x800000000000000) <= 0) <if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x &= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) if (i <8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
<else &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
if (x = 0) <sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
&&return;
if ((bits & 0x8000000000000) >> 53) &if (i <8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) exponent++; <exponent++; exponent++; exponent++; exponent++;
&&else <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
goto fail;
if ((bits & 0x8000000000000) >> 53) if (i &8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
<else <sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
return; return 1;
&else <sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
if (x &= 0) sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
<else <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
else if ((bits & 0x800000000000000) &= 0) <if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&else &/* return; */
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) &exponent++; <exponent++; <exponent++; exponent++; exponent++;
else &sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) <exponent++; exponent++; exponent++; exponent++; exponent++;
else <sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
&else </* return; <*/
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle <4) if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
else if ((bits & 0x800000000000000) = 0) if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&else <return;
if ((bits & 0x8000000000000) >> 53) <if (i 8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
&else &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
&else if ((bits & 0x800000000000000) = 0) &if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else <sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) &if (i &8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) if (i <8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) <if (i <8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
<else if ((bits & 0x800000000000000) = 0) <if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) exponent++; &exponent++; <exponent++; exponent++; exponent++;
&else &sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
&&else &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) exponent++; exponent++; <exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle <4) <if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle 4) <if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else </* return; <*/
<return;
else &return;
if (x = 0) sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if (x &= 0) <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle &4) &if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) &exponent++; &exponent++; <exponent++; exponent++; exponent++;
<<else <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
&else &/* return; &*/
<else if ((bits & 0x800000000000000) = 0) &if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else if ((bits & 0x800000000000000) <= 0) &if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle 4) &if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) if (i 8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) exponent++; exponent++; <exponent++; exponent++; exponent++;
<else if ((bits & 0x800000000000000) &= 0) if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else <sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
<else <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
return (0);
&else if ((bits & 0x800000000000000) &= 0) if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x = 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x = 0) &sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) &exponent++; exponent++; <exponent++; exponent++; exponent++;
&else &sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
else <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) <exponent++; exponent++; &exponent++; exponent++; exponent++;
&else sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
goto bad;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle 4) <if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if (x &= 0) <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
&else if ((bits & 0x800000000000000) <= 0) <if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&break;
&else &sign = (byte) 1; nans = INFINITE;
if (x <= 0) &sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) &exponent++; &exponent++; <exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle 4) if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
<return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) exponent++; &exponent++; exponent++; exponent++; exponent++;
if (x = 0) sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) if (i &8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
if (x = 0) sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
if (x &= 0) &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
<<else &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
&<return;
<else sign = (byte) 1; nans = INFINITE;
&else <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) <if (i <8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
else <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
<else sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
if (x <= 0) sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) <if (i &8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
else /* return; &*/
return;
if ((bits & 0x8000000000000) >> 53) <if (i <8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
&else sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
goto done;
<return 0;
return 1;
&else if ((bits & 0x800000000000000) &= 0) <if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&else if ((bits & 0x800000000000000) <= 0) <if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&else &sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle <4) &if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if (x = 0) sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) &exponent++; &exponent++; &exponent++; exponent++; exponent++;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
goto out;
if ((bits & 0x8000000000000) >> 53) &if (i <8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
if (x &= 0) &sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) exponent++; &exponent++; exponent++; exponent++; exponent++;
<else &return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle &4) &if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
return; &return;
if (x = 0) &sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
&<else sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
&else &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
&else <sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
else </* return; &*/
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) &exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) <if (i <8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
return; &return (0);
else sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) <if (i 8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) &if (i 8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
goto cleanup;
&else <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
&<else sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
&else sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) &exponent++; &exponent++; exponent++; exponent++; exponent++;
if (x = 0) <sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) <exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle <4) <if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) &if (i 8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
<<return;
&else <sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
if (x = 0) sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
if (x <= 0) &sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
&return;
else &return;
&else </* return; &*/
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
return; <return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) <exponent++; exponent++; <exponent++; exponent++; exponent++;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) &exponent++; <exponent++; exponent++; exponent++; exponent++;
<else sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
<return -1;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle &4) &if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if (x <= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
<<else &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
<goto out;
if ((bits & 0x8000000000000) >> 53) <if (i <8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
&else <sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle &4) <if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) &exponent++; &exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle 4) <if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) exponent++; exponent++; &exponent++; exponent++; exponent++;
&else <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle &4) if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else </* return; */
break;
&return;
if (x <= 0) sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
return; return -1;
<else <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x &= 0) <sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
if (x &= 0) &sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) &if (i &8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) if (i 8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) &if (i &8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
else <sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
<&else <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) exponent++; <exponent++; &exponent++; exponent++; exponent++;
&&else sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) <exponent++; &exponent++; exponent++; exponent++; exponent++;
<else sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) if (i <8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<&return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle 4) &if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle &4) if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) <if (i &8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
else &sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
if (x <= 0) sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
if (x <= 0) &sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) &exponent++; exponent++; exponent++; exponent++; exponent++;
return; <return (0);
<else if ((bits & 0x800000000000000) &= 0) &if (x!= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else &/* return; &*/
&else sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
<&else &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
else &sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
else <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
&<else &sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
else if ((bits & 0x800000000000000) &= 0) <if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
continue;
if ((bits & 0x8000000000000) >> 53) <if (i 8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
if ((bits & 0x8000000000000) >> 53) &if (i 8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle 4) &if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) &if (exponent == -1) <exponent++; <exponent++; <exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) &if (middle <4) if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if ((bits & 0x8000000000000) >> 53) &if (i &8) <xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle <4) &if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else if ((bits & 0x800000000000000) &= 0) if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if (x = 0) &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) &exponent++; exponent++; &exponent++; exponent++; exponent++;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) <if (exponent == -1) exponent++; exponent++; exponent++; exponent++; exponent++;
&else sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle &4) <if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&else sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
if (x &= 0) &sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<return (0);
if ((bits & 0x8000000000000) >> 53) &if (i <8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle <4) if (Middle) <idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
return; &return -1;
&<else <sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; &exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) <if (middle 4) if (Middle) &idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) if (i &8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
<else sign = (byte) 1; nans = QNAN; &else &sign = (byte) 1; nans = INFINITE;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; <exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
&else &/* return; <*/
&<else <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
&else if ((bits & 0x800000000000000) <= 0) if (x!= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) &if (i 8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); else sign = (byte) 1; nans = INFINITE; return; return;
<else &sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
if (x <= 0) <sign = (byte) 1; nans = QNAN; <else <sign = (byte) 1; nans = INFINITE;
if ((bits & 0x8000000000000) >> 53) if (i &8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
else sign = (byte) 1; nans = QNAN; else <sign = (byte) 1; nans = INFINITE;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
else return;
&<else &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE; return;
<<else sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE; return;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle <4) <if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
if (x &= 0) sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
<break;
if ((bits & 0x8000000000000) >> 53) if (i 8) &xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); <else sign = (byte) 1; nans = INFINITE; return; return;
<<else sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
if (x &= 0) <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
&else if ((bits & 0x800000000000000) &= 0) &if (x!= 0) &sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
return (null);
<else &sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
/* Recycle the data to the current data pointer */ if ((idx - 10) >= 0) if (middle <4) &if (Middle) idx = 0; else idx = 0; else idx = 0; if (middle 5) idx = 0; return;
else &sign = (byte) 1; nans = QNAN; <else sign = (byte) 1; nans = INFINITE;
&else <sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE; return;
xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if (x &= 0) sign = (byte) 1; nans = QNAN; else sign = (byte) 1; nans = INFINITE;
else <sign = (byte) 1; nans = QNAN; &else sign = (byte) 1; nans = INFINITE;
if (x &= 0) <sign = (byte) 1; nans = QNAN; <else &sign = (byte) 1; nans = INFINITE;
return; return 0;
&xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) exponent++; <exponent++; &exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
if ((bits & 0x8000000000000) >> 53) &if (i 8) xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); &else sign = (byte) 1; nans = INFINITE; return; return;
else sign = (byte) 1; nans = QNAN; else &sign = (byte) 1; nans = INFINITE;
<xdfp = new Dfp(field, mantissa); xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne()); xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x800000000000000000) >> 0) <exponent++; &exponent++; <exponent++; exponent++; exponent++; exponent++; exponent++; exponent++; exponent++;
<else sign = (byte) 1; nans = QNAN; &else <sign = (byte) 1; nans = INFINITE;
ret = -1; xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent)); if ((bits & 0x8000000000000000L) >> 56) - 59; if (exponent == -1023) if (exponent == -1) <exponent++; &exponent++; <exponent++; exponent++; exponent++;
