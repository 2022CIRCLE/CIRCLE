return this.domainAxes[0].indexOf(axis);
return (this.domainAxes.indexOf(axis));
return this.domainAxes.indexOf((int)axis);
return this.domainAxes.indexOf((int)axis);
return this.domainAxes[0].indexOf(axis);
return this.domainAxes[axis];
return mDomainAxes.indexOf(axis);
return this.domainAxes.indexOf(axis);
return this.domainAxes[0].indexOf(axis);
return this.domainAxes == 0;
return this.domainAxes.indexOf(aAxis);
return this.domainAxes.IndexOf(axis);
return this.domainAxes.indexOf(axis);
return this.domainAxes.indexOf((caddr_t)axis);
return this;
return this.domainAxes.indexOf((int) axis);
return this.domainAxes;
return this.domainAxes.indexOf(aAxis);
return this.domainAxes.indexOf((PRUint32)axis);
return this.domainAxes.indexOf(axis);
return 0;
return mDomainAxes.indexOf(axis);
return this.domainAxes.count();
return this.domainAxes.indexOf((u_long)axis);
return this.domainAxes!= 0;
return domainAxes.indexOf(axis);
return this.domainAxes[0];
return this.domainAxes.indexOf((long)axis);
return super.getDomainAxisIndex(axis);
return this.domainAxes.indexOf((void **) axis);
return this.domainAxes!= null;
return this.domainAxes.indexOf((void*)axis);
return this.domainAxes.indexOf(&axis);
return this.domainAxes[axis];
return this.domainAxes.indexOf((void **)axis);
return this.domainAxes.Count();
return this.domainAxes == 0;
return this.domainAxes.indexOf((void *)axis);
return this.domainAxes.indexOf((caddr_t)axis);
return this::domainAxes.indexOf(axis);
return NS_OK;
return this.domainAxes.indexOf((void**) axis);
return this.domainAxes.indexOf(&axis);
return this_domainAxes.indexOf(axis);
return (this.domainAxes.indexOf(axis));
return this.domainAxes.indexOf(aAxes);
return this.domainAxes  0;
return this.domainAxes.indexOf((int)axis);
return this.domainAxes.indexOf((PRUint32)axis);
return this.domainAxes.indexOf(type);
return this.domainAxes.indexOf(origin);
return this.domainAxes.indexOf((unsigned char*)axis);
return this.domainAxes.indexOf((void**)axis);
return this.domainAxes.indexOf((int)(axis));
return this.domainAtoms.indexOf(axis);
return this.domainAxes.indexOf(alpha);
return this.domainAxes.indexOf(__func__);
return this.domainAxes.indexOf(axis);
return this.domainAxes.IndexOf(axis);
return this.domainAxes.indexOf(x);
return(this.domainAxes.indexOf(axis));
return this.domainAxes.indexOf((unsigned long)axis);
return this.domainAxes[0].indexOf(axis);
return this.domainAxes.indexOf((void*)axis);
return this.domainAxes.indexOf(x);
return this.domainAxes.ElementAt(axis);
return this.domainAxes.get().indexOf(axis);
return this.domainAxes.get();
return this.domainAxes.indexOf(origin);
return this.domainAxes.indexOf((int) axis);
return this.domainAxes.indexOf((u_long)axis);
return this.domainAxes!= null;
return *this.domainAxes.indexOf(axis);
return this.domainAxes;
return this.domainAxes.indexOf(c);
return this.domainAxes.indexOf(aAxes);
return this.domainAxes.indexOf(x, y);
return this.domainAxes.indexOf((long)axis);
return this.domainAxes.indexOf(__func__);
return this.domain.indexOf(axis);
return this.domainAxes.indexOf(aAxis);
return this.domainAxes.indexOf((void *)axis);
return this.domainAxes.indexOf((void **)axis);
return this.domainAxes == null;
return this.domainAxes.indexOf(this);
return this.domainAxes.indexOf((Integer)axis);
return this.domainAxes[axis].indexOf('0');
return this.domainAxes.indexOf((unsigned char *)axis);
return this.domainAxes!= 0;
return &this.domainAxes.indexOf(axis);
return this.domainAxes.indexOf(*this.domainAxes);
return this.domainAxes.indexOf(categoryAxis);
return this.domainAxes.indexOf(aAtom);
val = this.domainAxes.indexOf(axis); return val;
return this.domainAxes.indexOf(aArena);
return this.domainAxes.indexOf((void**)&axis);
return this.domainAxes.indexOf((Int)axis);
return this.domainAxes.indexOf(((int)axis);
return this.domainAxes.indexOf((*this)axis);
return axis.domainAxes.indexOf(axis);
return this.domainAxes!= null;
return this.domainAxes.indexOf(type);
r = this.domainAxes.indexOf(axis); return r;
return this.domainAxes.indexOf((char *)axis);
return this.domainAxes.indexOf((void *) axis);
return this.domainAxes.indexOf((void **) axis);
return this.domainAxes.indexOf(aChild);
return this.domainAxes.indexOf((u_int)axis);
return this.domainAxes[axis].get();
return this.domainAxes.indexOf((void**)axis);
return this.domainAxes.indexOf(index);
return this.domainAxes.indexOf((void**) axis);
return this.domainAxes.indexOf((const char*)axis);
return this.domainAxes > 0;
return this.domainAxes.index();
return (this.domainAxes.indexOf(axis) == 0);
return this.domainAxes.indexOf(alpha);
return this.domain.indexOf(axis);
return this.domainAxes.indexOf(x, y);
return this.domainAxes.indexOf(*this.domainAxes);
return this.domainList.indexOf(axis);
return this.domainAxes.indexOf(v);

return this.domainAxes.indexOf((int)axis);
return this.domainAxes.indexOf((unsigned int)axis);
return this.domainAxes.indexOf((void **)&axis);
return this.domainAxes.indexOf((unsigned char*)axis);
return this.domainAxes.indexOf((PRInt32)axis);
return this.domainAxes.indexOf(0, axis);
return this.domainAxes.indexOf((void*) axis);
return this.domainAxes.indexOf(obj);
return this.domainAxes == null;
return this.domainAxes.indexOf(indx);
return this.domainAxes.count();
return (this.domainAxes.indexOf(axis)  0);
return this.domainAxes.indexOf(axis) - 1;
return this.domainAxes.indexOf((unsigned char) axis);
return nsDomainAxes::indexOf(axis);
return getDomainAxisIndex(axis);
return this.domainAxes.indexOf(0, axis);
return this.domainAxes.indexOf((*)axis);
return this.domainAxes.indexOf((unsigned long)axis);
return this.domainAxes.indexOf((char *) axis);
return this.domainAxes.indexOf((const int)axis);
return this.domainAxes.indexOf((void**)&axis);
return this.domainAxes.indexOf((int)(axis));
result = this.domainAxes.indexOf(axis); return result;
return this.domainAxes.indexOf(aAxis);
return this.domainAxes.indexOf((Integer)axis);
return this.domainAxes.indexOf((ulong)axis);
return this.domainAxes.indexOf(*this);
return this.domainAxes.indexOf(idx);
x = this.domainAxes.indexOf(axis); return x;
return this.domainAxes.indexOf(aCX);
return this.domainAxes[axis].indexOf('0');
return (this.domainAxes.indexOf(axis) > 0);
return this.domainAxes.indexOf((int)&axis);
return this.domainAxes.indexOf(aAtom);
return this.domainAxes.indexOf(0,0);
return this.domainAxes.indexOf((unsigned char *)axis);
return this.domainAxes.indexOf((Int)axis);
return this.domainAxes[i];
return this.domainAxes.indexOf(0,0);
return this.domainAxes.indexOf((char*)axis);
return this.domainAxes = 0;
return this.domainAxes.indexOf(axis, 0);
return this.domainAxes.indexOf((vaddr_t)axis);
return this.domainAxes.indexOf((caddr_t)axis);
n = this.domainAxes.indexOf(axis); return n;
return this.domainAxes.indexOf((int)0);
return this.domainAxes.indexOf((const char *)axis);
return rv;
return this.domainAxes.indexOf(axis, 0);
return this.domainAxes.indexOf((u_int)axis);
return (this.domainAxes.indexOf(axis)!= 0);
v = this.domainAxes.indexOf(axis); return v;
return this.domainAxes.indexOf((const char*)axis);
return this.domainAxes.indexOf((Number)axis);
return this.domainAxes.indexOf(((int)axis);
i = this.domainAxes.indexOf(axis); return i;
return this.domainAxes[0];
return this.domainAxes.indexOf((unsigned int)axis);
return this.domainAxes.indexOf((intptr)axis);
return this.domainAxes.indexOf((unsigned char)axis);
int index = this.domainAxes.indexOf(axis); return index;
return this.domainAxes.indexOf((u_char *)axis);
return this.domainAxes.indexOf(*(int)axis);
return this.domainAxes.Count();
int result = this.domainAxes.indexOf(axis); return result;
return null;
return this.domainAxes.indexOf(aCaseInsensitive);
return this(axis);
return this.domainAxes.indexOf((caddr)axis);
return this.domainAxes.indexOf((caddr *)axis);
s = this.domainAxes.indexOf(axis); return s;
return this.domainAxes.indexOf((Unsigned char*)axis);
rv = this.domainAxes.indexOf(axis);
return this.domainAxes.indexOf(((struct cdb *)&axis);
if (splx)  LOG(L_ERR, "getDomainAxisIndex: getDomainAxisIndex: no splx"); return this.domainAxes.indexOf(axis);  return 0;
return this.domainAxes.indexOf(__userAxes);
return this.domainAxes.indexOf(nsCRT::strdup(axis));
return this.domainAxes.indexOf((struct domain *)axis);
if (aIsAxis)  aIsAxis = false; return NS_OK;  return NS_OK;
nsresult rv = mDomainAxes.indexOf(axis); if (NS_FAILED(rv)) return rv; return rv;
return this.domainAxes.indexOf((char *) axis);
return this.domainAxes.indexOf((CategoryAxis*)axis);
return this.domainAxes.indexOf((uintptr_t)axis);
if (!(axis.cbAxes.size() == 0) && axis.cbAxes.width == 0)  return false;  return this.domainAxes.indexOf(axis);
ret = this.domainAxes.indexOf(axis); if (ret  0)  return ret;  return ret;
return this.domainAxes.indexOf((nsIAtom*)axis);
nsresult rv = 0; if (mDomainAxis!= null)  return rv;  if (mDomainAxis!= null)  rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv;  return rv;
if (!isFrame()) return NS_ERROR_NULL_POINTER; return this.domainAxes.indexOf(axis);
return this.domainAxes.indexOf(((void**) axis));
if (!(op.domainAxes.indexOf(axis)))  return false;  return op.domainAxes.indexOf(axis);
return this.domainAxes.indexOf(nsArena::dx);
return this.domainAxes.indexOf(((void*)axis);
return this.domainAxes.indexOf((unsigned char *) axis);
return this.domainAxes.indexOf((char*)axis);
return this.domainAxes.indexOf((DistanceAxes*)axis);
return this.domainAxes.indexOf((uintptr_t)axis);
return this.domainAxes.indexOf((PRUint32)(axis.dmAxes.indexOf('0')));
return this.domainAxes.indexOf((unsigned char*) axis);
return this.domainAxes.indexOf(((uintptr_t)axis);
if (!this.domainAxes.isEmpty()) return 0; return this.domainAxes.indexOf(axis);
if (isHidden())  LOG(L_ERR, "getDomainAxisIndex: got %d in DomainAxes", axis);  return 0;
if (aAxis == -1) return null; return this.domainAxes.indexOf(aAxis);
return this.domainAxes.indexOf(nsIAtoms::index, nsIAtoms::index);
return this.domainAxes.indexOf(((X_BodyAxes*)(((X_BodyAxes*)(((X_BodyAxes*)(((X_BodyAxes*)(((X_BodyAxes*)(((X_BodyAxes*))))).domainAxes).domainAxes).domainAxes); return this.domainAxes.indexOf(((X_BodyAxes*)((X_BodyAxes*)((X_BodyAxes*)((X_BodyAxes*)((X_BodyAxes*)((X_BodyAxes*)((X_BodyAxes*)((X_BodyAxes*)((X_BodyAxes*)((X_BodyAxes*)((X_BodyA
if (!this.domainAxes.IsEmpty())  return this.domainAxes.indexOf(axis);  return 0;
if (!isCategory) return NS_OK; /* not found */ return this.domainAxes.indexOf(axis); /* nsDomainAxes*/ return NS_OK; /* don't know how to get it */
return this.domainAxes.indexOf(((nsIDOMNode*)axis).domainAxes.indexOf(axis));
if (!this.domainAxes.indexOf(axis)) return 0; if (this.domainAxes.indexOf(axis) > 0) return 0; return 0;
if (!hasAxes ||!hasAxes ||!hasAxes)  return 0;  return this.domainAxes.indexOf(axis);
return this.domainAxes.indexOf((int)((int)(axis)));
if (i  0)  return this.domainAxes.indexOf((IDOMImplementation *)i);  return this.domainAxes.indexOf((IDOMImplementation *)i);
return this.domainAxes.indexOf(aClass);
return this.domainAxes.indexOf(&ioPtr);
if ((type == CategoryAxis) || (type == CategoryAxis))  return 0;  else return this.domainAxes.indexOf(axis);
return this.domainAxes.indexOf(((const char*) axis));
return this.domainAxes.indexOf((Integer) axis);
return this.domainAxes.indexOf(((VarTerm)axis);
return this.domainAxes.indexOf((const struct xpath *)axis);
return this.domainAxes.indexOf(&aDomainAxes);
nsAtom* nsAtom = this; nsAtom* nsAtom = this; return (nsAtom*) nsAtom;
return this.domainAxes.indexOf((*) axis);
if (!mDomainAxes)  return 0;  if (!mDomainAxes) return 0; mDomainAxes = 0; return 0;
return this.domainAxes.indexOf((void**)((caddr_t)axis);
return this.domainAxes.indexOf(nsGenericHTMLElementAt(nsHTMLAtoms::indx, nsHTMLAtoms::indx, nsHTMLAtoms::indx, nsHTMLAtoms::indx, nsHTMLAtoms::indx));
mDomainAxes = this.domainAxes; return mDomainAxes.indexOf(axis);
if (! (this.domainAxes &&!(this.domainAxes.indexOf(axis)))) return 0; return 0;
return this.domainAxes.indexOf(((Int)(axis));
return this.domainAxes.indexOf((*(struct categoryAxes *) aAxes));
if (!this.domainAxes.get()) return 0; return this.domainAxes.indexOf(axis);
nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain)  domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain)  domDomain.GetDomainAxisIndex(aDomain);   return domDomain.GetDomainAxisIndex(aDomain);
return this.domainAxes.indexOf(aElement);
return this.domainAxes.indexOf(*((int)(((int)&axis)));
return this.domainAxes.indexOf((dummy & ((char *)0)).mDomainAxisIndex);
if (axis)  return this.domainAxes.indexOf(axis);  else  return 0;
return this.domainAxes.indexOf(nsAtoms::xod);
return this.domainAxes.indexOf((caddr_t)(axis));
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1)  /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff;  if ((truncated_char)!= 0x4fffff)  /* The pointer is not an initialized. */ if (truncated_char)  truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (!(octetType == DOM_DOM_X_ALIGNMENT)) return 0; return this.domainAxes.indexOf(octetType);
return this.domainAxes.indexOf(((void**)&axis));
r = this.domainAxes.indexOf(axis); if (r) return r; return r;
return this.domainAxes.indexOf(((void **)(axis *) axis));
return this.domainAxes.indexOf(((XPathAtom*) axis);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag)  nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag)  return NS_ERROR_FAILURE;  else  return NS_OK;   nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent)  nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child)  parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent))  parent.GetNameSpaceID(parent);     return parent.GetNameSpaceID(parent);
return this.domainAxes.indexOf((AxisList)axis);
if ((val = this.domainAxes.indexOf(axis))!= 0)  return val;  return (val & (val));
return this.domainAxes.indexOf((ContentAxis*) axis);
return this.domainAxes.indexOf(*((void**)&axis);
return this.domainAxes.indexOf(&x);
return this.domainAxes.indexOf(((DocumentAxes *) axis));
aAxis = this.domainAxes.indexOf(axis); return aAxis;
return this.domainAxes.indexOf((PRUint32)(0x8000));
return this.domainAxes.indexOf((DimensionSize *)axis);
return this.domainAxes.indexOf(aType);
return this.domainAxes.indexOf((unsigned char*)((uintptr_t)axis);
return this.domainAxes.indexOf((opcode? 0 : 0));
return this.domainAxes.indexOf((DimensionAxis*)axis);
return this.domainAxes.indexOf(*((int)&axis);
return this.domainAxes.indexOf((CDataType*) axis);
return this.domainAxes.indexOf(*((const char*) xstrlen(aAxis)));
return this.domainAxes.indexOf((nsArena*)((caddr_t)(0x0a)));
return this.domainAxes.indexOf((obj_t) axis);
return this.domainAxes.indexOf((long)axis);
return this.domainAxes.indexOf(&aDomainAxis);
if (!(axis && this.domainAxes.indexOf(axis))) return 0; return 0;
return this.domainAxes.indexOf((uintptr_t) axis);
return this.domainAxes.indexOf(((struct categoryAxes **) axis));
return this.domainAxes.indexOf(xulAxes);
if (axis)  return this.domainAxes.indexOf(axis);  else  /* Now it's the only way to return the domain at this point. */ if (isAuto())  if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
return this.domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainAxes[axis].domainA
return this.domainAxes.indexOf((struct field)axis);
return this.domainAxes.indexOf((u_int32_t)axis);
return this.domainAxes.indexOf(obj);
if (this.domainAxes.indexOf(axis)  0)  return this.domainAxes.indexOf(axis);  return 0;  return 0;
return this.domainAxes.indexOf(&(arg));
if (strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis)) == -1)  LOG(LOG_ERR, "getDomainAxisIndex: domainAxis index 0x%08xn", strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis))); return this.domainAxes.indexOf(axis);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s)  nsAutoString dummy; dummy.GetEndSide(dummy);  nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0)  str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else  str = str.strdup('0');  else  str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0');    else  str = str.
return this.domainAxes.indexOf(((void **)axis));
return this.domainAxes.indexOf((dummy - x).domainAxes.indexOf(axis));
return this.domainAxes.indexOf((u_int32_t)((int32_t)axis));
if (aCnt)  aCnt = 0; aCnt = 0;  else  aCnt = 0;   return aCnt;
return this.domainAxes.indexOf(cx);
return this.domainAxes.indexOf((Atom*)(aCopy.left[0]));
if ((obj = this.domainAxes.indexOf(axis))!= -1) return null; return this.domainAxes.indexOf(obj);
nsresult rv; return this.domainAxes.indexOf(axis);
return this.domainAxes.indexOf(x).domainAxes;
return this.domainAxes.indexOf((const int)axis);
return this.domainAxes.indexOf((nsIArena*)axis);
if (!nsDomainAxes) return NS_ERROR_NULL_POINTER; return this.domainAxes.indexOf(axis);
if ((dummy &&!(dummy &&!(dummy && dummy))))  nsIDOMNode* dummy; dummy.mDomainAxisIndex = dummy; return dummy;  return dummy;
if (!mLength) return NS_ERROR_NULL_POINTER; if (!mInner) return NS_ERROR_NULL_POINTER; return NS_OK;
return this.domainAxes.indexOf(idx);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (i 0) <return this.domainAxes.indexOf((IDOMImplementation *)i); &return this.domainAxes.indexOf((IDOMImplementation *)i);
if ((val = this.domainAxes.indexOf(axis))!= 0) return val; <return (val & (val));
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (aCnt) &aCnt = 0; aCnt = 0; &else aCnt = 0; &return aCnt;
if (this.domainAxes.indexOf(axis) &0) return this.domainAxes.indexOf(axis); return 0; &return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (i &0) &return this.domainAxes.indexOf((IDOMImplementation *)i); &return this.domainAxes.indexOf((IDOMImplementation *)i);
<nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aCnt) aCnt = 0; aCnt = 0; <else <aCnt = 0; <return aCnt;
if (axis) &return this.domainAxes.indexOf(axis); &else &return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (aCnt) <aCnt = 0; aCnt = 0; &else <aCnt = 0; <return aCnt;
if (this.domainAxes.indexOf(axis) 0) &return this.domainAxes.indexOf(axis); <return 0; <return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; <else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsresult rv = 0; if (mDomainAxis!= null) return rv; if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
<nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsresult rv = 0; if (mDomainAxis!= null) <return rv; <if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
return this.domainAxes.indexOf(axis);
nsresult rv = 0; if (mDomainAxis!= null) <return rv; if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
if (this.domainAxes.indexOf(axis) 0) return this.domainAxes.indexOf(axis); &return 0; <return 0;
ret = this.domainAxes.indexOf(axis); if (ret 0) &return ret; &return ret;
if (aCnt) aCnt = 0; aCnt = 0; &else &aCnt = 0; <return aCnt;
&nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (axis) <return this.domainAxes.indexOf(axis); <else </* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
<nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
return this.domainAxes 0;
if (!(op.domainAxes.indexOf(axis))) <return false; return op.domainAxes.indexOf(axis);
if (!hasAxes ||!hasAxes ||!hasAxes) return 0; &return this.domainAxes.indexOf(axis);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (i <0) <return this.domainAxes.indexOf((IDOMImplementation *)i); return this.domainAxes.indexOf((IDOMImplementation *)i);
if (aIsAxis) &aIsAxis = false; return NS_OK; <return NS_OK;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if ((dummy &&!(dummy &&!(dummy && dummy)))) nsIDOMNode* dummy; dummy.mDomainAxisIndex = dummy; return dummy; &return dummy;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsresult rv = 0; if (mDomainAxis!= null) &return rv; <if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
ret = this.domainAxes.indexOf(axis); if (ret <0) return ret; return ret;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsresult rv = 0; if (mDomainAxis!= null) return rv; &if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
if (this.domainAxes.indexOf(axis) 0) &return this.domainAxes.indexOf(axis); return 0; <return 0;
if (this.domainAxes.indexOf(axis) <0) &return this.domainAxes.indexOf(axis); return 0; &return 0;
if (axis) <return this.domainAxes.indexOf(axis); &else /* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (isHidden()) &LOG(L_ERR, "getDomainAxisIndex: got %d in DomainAxes", axis); <return 0;
if (aCnt) &aCnt = 0; aCnt = 0; else aCnt = 0; &return aCnt;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (aCnt) aCnt = 0; aCnt = 0; <else aCnt = 0; <return aCnt;
if (aCnt) &aCnt = 0; aCnt = 0; else <aCnt = 0; &return aCnt;
nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aCnt) &aCnt = 0; aCnt = 0; <else <aCnt = 0; return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if ((val = this.domainAxes.indexOf(axis))!= 0) &return val; <return (val & <(val));
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
return this.domainAxes.indexOf((dummy & ((char *)0)).mDomainAxisIndex);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (aCnt) &aCnt = 0; aCnt = 0; else &aCnt = 0; return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) return rv; if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
<nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsresult rv = 0; if (mDomainAxis!= null) <return rv; if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
return this.domainAxes.indexOf((PRUint32)(axis.dmAxes.indexOf('0')));
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (splx) &LOG(L_ERR, "getDomainAxisIndex: getDomainAxisIndex: no splx"); return this.domainAxes.indexOf(axis); <return 0;
if (isHidden()) <LOG(L_ERR, "getDomainAxisIndex: got %d in DomainAxes", axis); return 0;
ret = this.domainAxes.indexOf(axis); if (ret <0) return ret; &return ret;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; &if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
if (axis) return this.domainAxes.indexOf(axis); <else </* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
<nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ret = this.domainAxes.indexOf(axis); if (ret <0) &return ret; <return ret;
if (!hasAxes ||!hasAxes ||!hasAxes) return 0; <return this.domainAxes.indexOf(axis);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (this.domainAxes.indexOf(axis) 0) &return this.domainAxes.indexOf(axis); &return 0; return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (aCnt) &aCnt = 0; aCnt = 0; <else &aCnt = 0; <return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; <if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
<nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (axis) return this.domainAxes.indexOf(axis); <else return 0;
if (this.domainAxes.indexOf(axis) &0) return this.domainAxes.indexOf(axis); return 0; return 0;
if (aCnt) aCnt = 0; aCnt = 0; else <aCnt = 0; <return aCnt;
if (aCnt) &aCnt = 0; aCnt = 0; else aCnt = 0; <return aCnt;
if (this.domainAxes.indexOf(axis) <0) <return this.domainAxes.indexOf(axis); <return 0; &return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (aCnt) <aCnt = 0; aCnt = 0; else <aCnt = 0; <return aCnt;
&nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsresult rv = 0; if (mDomainAxis!= null) <return rv; &if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (this.domainAxes.indexOf(axis) 0) return this.domainAxes.indexOf(axis); return 0; <return 0;
if (axis) &return this.domainAxes.indexOf(axis); &else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
<nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (!mDomainAxes) return 0; <if (!mDomainAxes) return 0; mDomainAxes = 0; return 0;
if (aCnt) <aCnt = 0; aCnt = 0; &else &aCnt = 0; return aCnt;
<nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; &else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (i 0) &return this.domainAxes.indexOf((IDOMImplementation *)i); return this.domainAxes.indexOf((IDOMImplementation *)i);
ret = this.domainAxes.indexOf(axis); if (ret &0) &return ret; &return ret;
nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aCnt) <aCnt = 0; aCnt = 0; <else <aCnt = 0; &return aCnt;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; <else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) <return this.domainAxes.indexOf(axis); else </* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (aCnt) aCnt = 0; aCnt = 0; <else &aCnt = 0; <return aCnt;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if ((type == CategoryAxis) || (type == CategoryAxis)) return 0; <else return this.domainAxes.indexOf(axis);
if (axis) <return this.domainAxes.indexOf(axis); &else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (this.domainAxes.indexOf(axis) &0) return this.domainAxes.indexOf(axis); <return 0; &return 0;
if (aCnt) <aCnt = 0; aCnt = 0; &else &aCnt = 0; <return aCnt;
if (axis) &return this.domainAxes.indexOf(axis); &else </* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) &return this.domainAxes.indexOf(axis); <else &return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
<nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) return this.domainAxes.indexOf(axis); else <return 0;
nsresult rv = 0; if (mDomainAxis!= null) return rv; if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if ((val = this.domainAxes.indexOf(axis))!= 0) return val; return (val & <(val));
if (this.domainAxes.indexOf(axis) 0) <return this.domainAxes.indexOf(axis); return 0; &return 0;
if (this.domainAxes.indexOf(axis) <0) &return this.domainAxes.indexOf(axis); &return 0; &return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; &else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (!(axis.cbAxes.size() == 0) && axis.cbAxes.width == 0) <return false; <return this.domainAxes.indexOf(axis);
if (aCnt) aCnt = 0; aCnt = 0; <else &aCnt = 0; &return aCnt;
if (!hasAxes ||!hasAxes ||!hasAxes) &return 0; return this.domainAxes.indexOf(axis);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
&nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (axis) return this.domainAxes.indexOf(axis); else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) &return this.domainAxes.indexOf(axis); else </* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
<nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) return this.domainAxes.indexOf(axis); &else </* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (!(axis.cbAxes.size() == 0) && axis.cbAxes.width == 0) &return false; <return this.domainAxes.indexOf(axis);
if ((type == CategoryAxis) || (type == CategoryAxis)) <return 0; else return this.domainAxes.indexOf(axis);
if (aCnt) aCnt = 0; aCnt = 0; else &aCnt = 0; return aCnt;
ret = this.domainAxes.indexOf(axis); if (ret <0) return ret; <return ret;
if (this.domainAxes.indexOf(axis) 0) &return this.domainAxes.indexOf(axis); return 0; &return 0;
&nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsresult rv = 0; if (mDomainAxis!= null) return rv; &if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (aCnt) &aCnt = 0; aCnt = 0; else <aCnt = 0; <return aCnt;
if (this.domainAxes.indexOf(axis) &0) &return this.domainAxes.indexOf(axis); <return 0; <return 0;
if (splx) LOG(L_ERR, "getDomainAxisIndex: getDomainAxisIndex: no splx"); return this.domainAxes.indexOf(axis); <return 0;
nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) <return this.domainAxes.indexOf(axis); &else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (i <0) return this.domainAxes.indexOf((IDOMImplementation *)i); <return this.domainAxes.indexOf((IDOMImplementation *)i);
nsresult rv = 0; if (mDomainAxis!= null) <return rv; <if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsresult rv = 0; if (mDomainAxis!= null) &return rv; &if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; <else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (!this.domainAxes.IsEmpty()) <return this.domainAxes.indexOf(axis); &return 0;
&nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) <return this.domainAxes.indexOf(axis); &else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) return this.domainAxes.indexOf(axis); <else /* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsresult rv = 0; if (mDomainAxis!= null) &return rv; &if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) <return this.domainAxes.indexOf(axis); <else return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if ((dummy &&!(dummy &&!(dummy && dummy)))) <nsIDOMNode* dummy; dummy.mDomainAxisIndex = dummy; return dummy; <return dummy;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (this.domainAxes.indexOf(axis) <0) <return this.domainAxes.indexOf(axis); <return 0; return 0;
if (this.domainAxes.indexOf(axis) <0) <return this.domainAxes.indexOf(axis); return 0; <return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; <else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (!this.domainAxes.IsEmpty()) <return this.domainAxes.indexOf(axis); <return 0;
if (i 0) return this.domainAxes.indexOf((IDOMImplementation *)i); return this.domainAxes.indexOf((IDOMImplementation *)i);
if (axis) &return this.domainAxes.indexOf(axis); &else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
ret = this.domainAxes.indexOf(axis); if (ret &0) &return ret; return ret;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) return this.domainAxes.indexOf(axis); &else </* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis)) == -1) LOG(LOG_ERR, "getDomainAxisIndex: domainAxis index 0x%08x&n", strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis))); return this.domainAxes.indexOf(axis);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
&nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (!(op.domainAxes.indexOf(axis))) return false; <return op.domainAxes.indexOf(axis);
if (axis) return this.domainAxes.indexOf(axis); &else return 0;
if (i &0) return this.domainAxes.indexOf((IDOMImplementation *)i); <return this.domainAxes.indexOf((IDOMImplementation *)i);
&nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (axis) <return this.domainAxes.indexOf(axis); &else <return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (this.domainAxes.indexOf(axis) <0) &return this.domainAxes.indexOf(axis); return 0; <return 0;
if (axis) <return this.domainAxes.indexOf(axis); else /* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if ((val = this.domainAxes.indexOf(axis))!= 0) &return val; <return (val & &(val));
if (axis) &return this.domainAxes.indexOf(axis); else </* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (aCnt) <aCnt = 0; aCnt = 0; &else aCnt = 0; <return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) return rv; &if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; <else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (this.domainAxes.indexOf(axis) 0) <return this.domainAxes.indexOf(axis); <return 0; return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; <else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsresult rv = 0; if (mDomainAxis!= null) <return rv; &if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if (aCnt) &aCnt = 0; aCnt = 0; <else &aCnt = 0; return aCnt;
if (aCnt) <aCnt = 0; aCnt = 0; <else <aCnt = 0; return aCnt;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; &else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (!(axis.cbAxes.size() == 0) && axis.cbAxes.width == 0) return false; &return this.domainAxes.indexOf(axis);
if (strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis)) == -1) <LOG(LOG_ERR, "getDomainAxisIndex: domainAxis index 0x%08x<n", strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis))); return this.domainAxes.indexOf(axis);
if (axis) return this.domainAxes.indexOf(axis); else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (aIsAxis) aIsAxis = false; return NS_OK; &return NS_OK;
if (strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis)) == -1) &LOG(LOG_ERR, "getDomainAxisIndex: domainAxis index 0x%08x<n", strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis))); return this.domainAxes.indexOf(axis);
<nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if ((val = this.domainAxes.indexOf(axis))!= 0) &return val; return (val & <(val));
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (aCnt) &aCnt = 0; aCnt = 0; else <aCnt = 0; return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; &if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (i 0) return this.domainAxes.indexOf((IDOMImplementation *)i); &return this.domainAxes.indexOf((IDOMImplementation *)i);
nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
<nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (this.domainAxes.indexOf(axis) &0) &return this.domainAxes.indexOf(axis); <return 0; return 0;
if (aCnt) <aCnt = 0; aCnt = 0; <else &aCnt = 0; return aCnt;
nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aCnt) <aCnt = 0; aCnt = 0; <else aCnt = 0; return aCnt;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; &else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsresult rv = 0; if (mDomainAxis!= null) return rv; <if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if (axis) &return this.domainAxes.indexOf(axis); else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) &return this.domainAxes.indexOf(axis); &else </* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) return this.domainAxes.indexOf(axis); <else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (this.domainAxes.indexOf(axis) &0) return this.domainAxes.indexOf(axis); &return 0; return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) return this.domainAxes.indexOf(axis); else /* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (aCnt) <aCnt = 0; aCnt = 0; else aCnt = 0; <return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) return rv; <if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if (!(op.domainAxes.indexOf(axis))) &return false; return op.domainAxes.indexOf(axis);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; &else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
<nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aCnt) aCnt = 0; aCnt = 0; &else &aCnt = 0; &return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; &if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
ret = this.domainAxes.indexOf(axis); if (ret 0) return ret; return ret;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) return this.domainAxes.indexOf(axis); &else /* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsresult rv = 0; if (mDomainAxis!= null) &return rv; <if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (isHidden()) LOG(L_ERR, "getDomainAxisIndex: got %d in DomainAxes", axis); return 0;
if (axis) &return this.domainAxes.indexOf(axis); &else return 0;
if ((val = this.domainAxes.indexOf(axis))!= 0) <return val; return (val & &(val));
if (this.domainAxes.indexOf(axis) &0) return this.domainAxes.indexOf(axis); &return 0; &return 0;
if (this.domainAxes.indexOf(axis) <0) <return this.domainAxes.indexOf(axis); <return 0; <return 0;
<return this.domainAxes.indexOf(axis);
nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
ret = this.domainAxes.indexOf(axis); if (ret 0) <return ret; <return ret;
if (axis) &return this.domainAxes.indexOf(axis); <else </* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) &return this.domainAxes.indexOf(axis); &else /* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (isHidden()) LOG(L_ERR, "getDomainAxisIndex: got %d in DomainAxes", axis); &return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (i <0) &return this.domainAxes.indexOf((IDOMImplementation *)i); <return this.domainAxes.indexOf((IDOMImplementation *)i);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; &else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (i <0) <return this.domainAxes.indexOf((IDOMImplementation *)i); &return this.domainAxes.indexOf((IDOMImplementation *)i);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; <else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (aCnt) <aCnt = 0; aCnt = 0; &else <aCnt = 0; return aCnt;
if (aCnt) &aCnt = 0; aCnt = 0; <else <aCnt = 0; &return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if (i 0) &return this.domainAxes.indexOf((IDOMImplementation *)i); &return this.domainAxes.indexOf((IDOMImplementation *)i);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; &else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
ret = this.domainAxes.indexOf(axis); if (ret <0) &return ret; &return ret;
&nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (this.domainAxes.indexOf(axis) &0) <return this.domainAxes.indexOf(axis); <return 0; <return 0;
if ((val = this.domainAxes.indexOf(axis))!= 0) &return val; return (val & &(val));
nsresult rv = 0; if (mDomainAxis!= null) <return rv; <if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
if (aCnt) &aCnt = 0; aCnt = 0; &else &aCnt = 0; <return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) return rv; &if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
&nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (i &0) return this.domainAxes.indexOf((IDOMImplementation *)i); return this.domainAxes.indexOf((IDOMImplementation *)i);
if (this.domainAxes.indexOf(axis) &0) &return this.domainAxes.indexOf(axis); &return 0; return 0;
if (aCnt) &aCnt = 0; aCnt = 0; &else aCnt = 0; <return aCnt;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) &return this.domainAxes.indexOf(axis); <else /* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
return this.domainAxes.indexOf((dummy & &((char *)0)).mDomainAxisIndex);
if (aCnt) &aCnt = 0; aCnt = 0; &else &aCnt = 0; return aCnt;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; &else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsresult rv = 0; if (mDomainAxis!= null) &return rv; <if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (!hasAxes ||!hasAxes ||!hasAxes) &return 0; <return this.domainAxes.indexOf(axis);
if (!hasAxes ||!hasAxes ||!hasAxes) return 0; return this.domainAxes.indexOf(axis);
if (this.domainAxes.indexOf(axis) &0) <return this.domainAxes.indexOf(axis); return 0; &return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) return this.domainAxes.indexOf(axis); <else /* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsresult rv = 0; if (mDomainAxis!= null) return rv; if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
nsresult rv = 0; if (mDomainAxis!= null) return rv; <if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; <if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
&nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (isHidden()) <LOG(L_ERR, "getDomainAxisIndex: got %d in DomainAxes", axis); <return 0;
if (axis) &return this.domainAxes.indexOf(axis); else <return 0;
if (aCnt) &aCnt = 0; aCnt = 0; else aCnt = 0; return aCnt;
if (aCnt) aCnt = 0; aCnt = 0; else &aCnt = 0; <return aCnt;
if (axis) &return this.domainAxes.indexOf(axis); else /* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
ret = this.domainAxes.indexOf(axis); if (ret &0) <return ret; &return ret;
if (i <0) &return this.domainAxes.indexOf((IDOMImplementation *)i); &return this.domainAxes.indexOf((IDOMImplementation *)i);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if ((dummy &&!(dummy &&!(dummy && dummy)))) &nsIDOMNode* dummy; dummy.mDomainAxisIndex = dummy; return dummy; <return dummy;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
return this.domainAxes.indexOf((PRUint32)(axis.dmAxes.indexOf('<0')));
if ((type == CategoryAxis) || (type == CategoryAxis)) return 0; else return this.domainAxes.indexOf(axis);
return this.domainAxes[axis].indexOf('&0');
if (axis) &return this.domainAxes.indexOf(axis); <else return 0;
&nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsresult rv = 0; if (mDomainAxis!= null) &return rv; if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (this.domainAxes.indexOf(axis) &0) return this.domainAxes.indexOf(axis); &return 0; <return 0;
if (aCnt) <aCnt = 0; aCnt = 0; &else &aCnt = 0; &return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; <if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if ((type == CategoryAxis) || (type == CategoryAxis)) &return 0; <else return this.domainAxes.indexOf(axis);
if (!mDomainAxes) &return 0; &if (!mDomainAxes) return 0; mDomainAxes = 0; return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (aCnt) <aCnt = 0; aCnt = 0; &else <aCnt = 0; &return aCnt;
&nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (this.domainAxes.indexOf(axis) &0) &return this.domainAxes.indexOf(axis); return 0; return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (splx) &LOG(L_ERR, "getDomainAxisIndex: getDomainAxisIndex: no splx"); return this.domainAxes.indexOf(axis); &return 0;
if (axis) &return this.domainAxes.indexOf(axis); &else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) return this.domainAxes.indexOf(axis); <else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (aCnt) aCnt = 0; aCnt = 0; &else aCnt = 0; return aCnt;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
<nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (aCnt) aCnt = 0; aCnt = 0; <else aCnt = 0; &return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; <else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) <return this.domainAxes.indexOf(axis); <else </* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (!(op.domainAxes.indexOf(axis))) &return false; <return op.domainAxes.indexOf(axis);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; <else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) <return this.domainAxes.indexOf(axis); <else /* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (this.domainAxes.indexOf(axis) &0) <return this.domainAxes.indexOf(axis); <return 0; return 0;
<nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aCnt) aCnt = 0; aCnt = 0; else aCnt = 0; return aCnt;
if (axis) <return this.domainAxes.indexOf(axis); else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (aCnt) aCnt = 0; aCnt = 0; <else <aCnt = 0; &return aCnt;
ret = this.domainAxes.indexOf(axis); if (ret 0) return ret; <return ret;
if ((val = this.domainAxes.indexOf(axis))!= 0) return val; <return (val & &(val));
nsresult rv = 0; if (mDomainAxis!= null) &return rv; &if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (aCnt) <aCnt = 0; aCnt = 0; else &aCnt = 0; <return aCnt;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (this.domainAxes.indexOf(axis) 0) <return this.domainAxes.indexOf(axis); <return 0; <return 0;
if (aCnt) &aCnt = 0; aCnt = 0; &else <aCnt = 0; <return aCnt;
if (aCnt) <aCnt = 0; aCnt = 0; <else aCnt = 0; <return aCnt;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (!(op.domainAxes.indexOf(axis))) <return false; <return op.domainAxes.indexOf(axis);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; &else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (this.domainAxes.indexOf(axis) &0) <return this.domainAxes.indexOf(axis); return 0; return 0;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; <if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (axis) &return this.domainAxes.indexOf(axis); else /* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) <return this.domainAxes.indexOf(axis); else /* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
&nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
<return this.domainAxes.indexOf(axis);
nsresult rv = 0; if (mDomainAxis!= null) <return rv; if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; <else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; <else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
ret = this.domainAxes.indexOf(axis); if (ret <0) &return ret; return ret;
if ((type == CategoryAxis) || (type == CategoryAxis)) return 0; &else return this.domainAxes.indexOf(axis);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; &else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
ret = this.domainAxes.indexOf(axis); if (ret 0) return ret; &return ret;
if (this.domainAxes.indexOf(axis) 0) return this.domainAxes.indexOf(axis); return 0; &return 0;
if (axis) &return this.domainAxes.indexOf(axis); else /* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsresult rv = 0; if (mDomainAxis!= null) return rv; if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; &if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
<nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aCnt) &aCnt = 0; aCnt = 0; <else aCnt = 0; <return aCnt;
return this.domainAxes <0;
if (this.domainAxes.indexOf(axis) 0) &return this.domainAxes.indexOf(axis); &return 0; &return 0;
ret = this.domainAxes.indexOf(axis); if (ret <0) <return ret; &return ret;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; &if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (this.domainAxes.indexOf(axis) <0) <return this.domainAxes.indexOf(axis); return 0; &return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
return this.domainAxes[axis].indexOf('&0');
if (this.domainAxes.indexOf(axis) <0) &return this.domainAxes.indexOf(axis); &return 0; <return 0;
if (this.domainAxes.indexOf(axis) 0) <return this.domainAxes.indexOf(axis); &return 0; &return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsresult rv = 0; if (mDomainAxis!= null) &return rv; &if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis)) == -1) LOG(LOG_ERR, "getDomainAxisIndex: domainAxis index 0x%08x<n", strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis))); return this.domainAxes.indexOf(axis);
&nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
ret = this.domainAxes.indexOf(axis); if (ret 0) <return ret; &return ret;
&nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (this.domainAxes.indexOf(axis) <0) return this.domainAxes.indexOf(axis); &return 0; <return 0;
if (i &0) &return this.domainAxes.indexOf((IDOMImplementation *)i); return this.domainAxes.indexOf((IDOMImplementation *)i);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
return this.domainAxes &0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsresult rv = 0; if (mDomainAxis!= null) &return rv; if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
if (aCnt) <aCnt = 0; aCnt = 0; <else aCnt = 0; &return aCnt;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; <else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (splx) LOG(L_ERR, "getDomainAxisIndex: getDomainAxisIndex: no splx"); return this.domainAxes.indexOf(axis); return 0;
if (aCnt) &aCnt = 0; aCnt = 0; else &aCnt = 0; &return aCnt;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (this.domainAxes.indexOf(axis) 0) return this.domainAxes.indexOf(axis); <return 0; return 0;
if ((val = this.domainAxes.indexOf(axis))!= 0) <return val; &return (val & &(val));
if (this.domainAxes.indexOf(axis) <0) return this.domainAxes.indexOf(axis); &return 0; &return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsresult rv = 0; if (mDomainAxis!= null) <return rv; &if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
nsresult rv = 0; if (mDomainAxis!= null) return rv; &if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aIsAxis) &aIsAxis = false; return NS_OK; &return NS_OK;
nsresult rv = 0; if (mDomainAxis!= null) return rv; <if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
if (i <0) &return this.domainAxes.indexOf((IDOMImplementation *)i); return this.domainAxes.indexOf((IDOMImplementation *)i);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) <return this.domainAxes.indexOf(axis); <else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (this.domainAxes.indexOf(axis) <0) return this.domainAxes.indexOf(axis); return 0; return 0;
&nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (this.domainAxes.indexOf(axis) <0) &return this.domainAxes.indexOf(axis); &return 0; return 0;
if (this.domainAxes.indexOf(axis) <0) <return this.domainAxes.indexOf(axis); &return 0; <return 0;
<nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (aCnt) &aCnt = 0; aCnt = 0; &else aCnt = 0; return aCnt;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (!(axis.cbAxes.size() == 0) && axis.cbAxes.width == 0) <return false; return this.domainAxes.indexOf(axis);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; <else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (i 0) <return this.domainAxes.indexOf((IDOMImplementation *)i); return this.domainAxes.indexOf((IDOMImplementation *)i);
if (aIsAxis) aIsAxis = false; return NS_OK; return NS_OK;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; <else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) return this.domainAxes.indexOf(axis); &else </* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
ret = this.domainAxes.indexOf(axis); if (ret &0) return ret; &return ret;
if (axis) &return this.domainAxes.indexOf(axis); else </* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (splx) LOG(L_ERR, "getDomainAxisIndex: getDomainAxisIndex: no splx"); return this.domainAxes.indexOf(axis); &return 0;
if (axis) <return this.domainAxes.indexOf(axis); else &return 0;
if (splx) &LOG(L_ERR, "getDomainAxisIndex: getDomainAxisIndex: no splx"); return this.domainAxes.indexOf(axis); return 0;
if (aCnt) <aCnt = 0; aCnt = 0; <else &aCnt = 0; &return aCnt;
if (axis) &return this.domainAxes.indexOf(axis); <else </* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if ((val = this.domainAxes.indexOf(axis))!= 0) return val; return (val & (val));
if (!mDomainAxes) &return 0; <if (!mDomainAxes) return 0; mDomainAxes = 0; return 0;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; <if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if (axis) return this.domainAxes.indexOf(axis); else </* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; &else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) &return this.domainAxes.indexOf(axis); &else /* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (this.domainAxes.indexOf(axis) 0) return this.domainAxes.indexOf(axis); <return 0; &return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; <else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) &return this.domainAxes.indexOf(axis); else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (aCnt) aCnt = 0; aCnt = 0; &else <aCnt = 0; return aCnt;
if (!this.domainAxes.IsEmpty()) return this.domainAxes.indexOf(axis); &return 0;
<nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (axis) <return this.domainAxes.indexOf(axis); <else /* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (this.domainAxes.indexOf(axis) 0) return this.domainAxes.indexOf(axis); <return 0; <return 0;
if (axis) &return this.domainAxes.indexOf(axis); <else </* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if ((val = this.domainAxes.indexOf(axis))!= 0) return val; &return (val & &(val));
if (axis) return this.domainAxes.indexOf(axis); &else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) <return this.domainAxes.indexOf(axis); else return 0;
if (axis) return this.domainAxes.indexOf(axis); &else /* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) <return this.domainAxes.indexOf(axis); &else /* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (aIsAxis) aIsAxis = false; return NS_OK; <return NS_OK;
if (i &0) <return this.domainAxes.indexOf((IDOMImplementation *)i); <return this.domainAxes.indexOf((IDOMImplementation *)i);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; &else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (this.domainAxes.indexOf(axis) 0) &return this.domainAxes.indexOf(axis); return 0; return 0;
if (this.domainAxes.indexOf(axis) <0) &return this.domainAxes.indexOf(axis); <return 0; <return 0;
if (this.domainAxes.indexOf(axis) <0) <return this.domainAxes.indexOf(axis); &return 0; &return 0;
if (i 0) return this.domainAxes.indexOf((IDOMImplementation *)i); <return this.domainAxes.indexOf((IDOMImplementation *)i);
if (aCnt) aCnt = 0; aCnt = 0; <else &aCnt = 0; return aCnt;
return this.domainAxes[axis].indexOf('<0');
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) <return this.domainAxes.indexOf(axis); <else <return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; <else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (aCnt) &aCnt = 0; aCnt = 0; &else <aCnt = 0; return aCnt;
&nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (aCnt) <aCnt = 0; aCnt = 0; else <aCnt = 0; &return aCnt;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
<nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (!hasAxes ||!hasAxes ||!hasAxes) <return 0; <return this.domainAxes.indexOf(axis);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; <else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsresult rv = 0; if (mDomainAxis!= null) <return rv; <if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
nsresult rv = 0; if (mDomainAxis!= null) return rv; &if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; <else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (this.domainAxes.indexOf(axis) &0) <return this.domainAxes.indexOf(axis); return 0; <return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (this.domainAxes.indexOf(axis) 0) <return this.domainAxes.indexOf(axis); &return 0; return 0;
if (axis) &return this.domainAxes.indexOf(axis); else &return 0;
if ((dummy &&!(dummy &&!(dummy && dummy)))) nsIDOMNode* dummy; dummy.mDomainAxisIndex = dummy; return dummy; <return dummy;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (this.domainAxes.indexOf(axis) &0) return this.domainAxes.indexOf(axis); <return 0; return 0;
if (aCnt) <aCnt = 0; aCnt = 0; else aCnt = 0; return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) return rv; <if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (axis) <return this.domainAxes.indexOf(axis); else </* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (i 0) &return this.domainAxes.indexOf((IDOMImplementation *)i); <return this.domainAxes.indexOf((IDOMImplementation *)i);
if ((val = this.domainAxes.indexOf(axis))!= 0) <return val; <return (val & <(val));
if (axis) return this.domainAxes.indexOf(axis); <else &return 0;
if ((val = this.domainAxes.indexOf(axis))!= 0) <return val; <return (val & &(val));
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (this.domainAxes.indexOf(axis) <0) return this.domainAxes.indexOf(axis); return 0; <return 0;
if (axis) return this.domainAxes.indexOf(axis); <else /* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
&nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if ((dummy &&!(dummy &&!(dummy && dummy)))) &nsIDOMNode* dummy; dummy.mDomainAxisIndex = dummy; return dummy; return dummy;
return this.domainAxes.indexOf(axis);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) return this.domainAxes.indexOf(axis); &else <return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (!(axis.cbAxes.size() == 0) && axis.cbAxes.width == 0) <return false; &return this.domainAxes.indexOf(axis);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; &else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; &else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsresult rv = 0; if (mDomainAxis!= null) return rv; &if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (!mDomainAxes) <return 0; <if (!mDomainAxes) return 0; mDomainAxes = 0; return 0;
if ((val = this.domainAxes.indexOf(axis))!= 0) return val; return (val & &(val));
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) &return this.domainAxes.indexOf(axis); <else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
return (this.domainAxes.indexOf(axis) <0);
if (this.domainAxes.indexOf(axis) &0) return this.domainAxes.indexOf(axis); return 0; <return 0;
<nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (!(axis.cbAxes.size() == 0) && axis.cbAxes.width == 0) &return false; &return this.domainAxes.indexOf(axis);
if (axis) &return this.domainAxes.indexOf(axis); <else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (this.domainAxes.indexOf(axis) <0) return this.domainAxes.indexOf(axis); <return 0; <return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (!mDomainAxes) return 0; if (!mDomainAxes) return 0; mDomainAxes = 0; return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; &else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) &return this.domainAxes.indexOf(axis); &else <return 0;
nsresult rv = 0; if (mDomainAxis!= null) return rv; <if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
if ((type == CategoryAxis) || (type == CategoryAxis)) &return 0; &else return this.domainAxes.indexOf(axis);
&return this.domainAxes.indexOf(axis);
if (axis) <return this.domainAxes.indexOf(axis); else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsresult rv = 0; if (mDomainAxis!= null) return rv; if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (aCnt) aCnt = 0; aCnt = 0; &else &aCnt = 0; return aCnt;
if (aCnt) aCnt = 0; aCnt = 0; &else <aCnt = 0; <return aCnt;
nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (this.domainAxes.indexOf(axis) 0) &return this.domainAxes.indexOf(axis); <return 0; return 0;
<nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; <else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (aCnt) <aCnt = 0; aCnt = 0; <else <aCnt = 0; <return aCnt;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; &if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
ret = this.domainAxes.indexOf(axis); if (ret <0) <return ret; return ret;
if (axis) return this.domainAxes.indexOf(axis); &else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
return this.domainAxes.indexOf((PRUint32)(axis.dmAxes.indexOf('&0')));
nsresult rv = 0; if (mDomainAxis!= null) return rv; if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
if (strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis)) == -1) &LOG(LOG_ERR, "getDomainAxisIndex: domainAxis index 0x%08x&n", strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis))); return this.domainAxes.indexOf(axis);
if (aCnt) &aCnt = 0; aCnt = 0; <else aCnt = 0; return aCnt;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) return this.domainAxes.indexOf(axis); <else <return 0;
nsresult rv = 0; if (mDomainAxis!= null) return rv; if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if (this.domainAxes.indexOf(axis) 0) return this.domainAxes.indexOf(axis); return 0; return 0;
if (this.domainAxes.indexOf(axis) &0) <return this.domainAxes.indexOf(axis); <return 0; &return 0;
if (this.domainAxes.indexOf(axis) <0) return this.domainAxes.indexOf(axis); <return 0; &return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (this.domainAxes.indexOf(axis) <0) &return this.domainAxes.indexOf(axis); <return 0; return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; &else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) &return this.domainAxes.indexOf(axis); else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (!(op.domainAxes.indexOf(axis))) return false; return op.domainAxes.indexOf(axis);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; &else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; <else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if ((val = this.domainAxes.indexOf(axis))!= 0) &return val; &return (val & (val));
if (this.domainAxes.indexOf(axis) &0) &return this.domainAxes.indexOf(axis); return 0; &return 0;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; <if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if ((val = this.domainAxes.indexOf(axis))!= 0) return val; &return (val & <(val));
if (this.domainAxes.indexOf(axis) <0) &return this.domainAxes.indexOf(axis); <return 0; &return 0;
if (this.domainAxes.indexOf(axis) &0) <return this.domainAxes.indexOf(axis); &return 0; &return 0;
ret = this.domainAxes.indexOf(axis); if (ret &0) &return ret; <return ret;
nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsresult rv = 0; if (mDomainAxis!= null) return rv; if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (this.domainAxes.indexOf(axis) &0) &return this.domainAxes.indexOf(axis); &return 0; &return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (this.domainAxes.indexOf(axis) 0) <return this.domainAxes.indexOf(axis); return 0; <return 0;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
nsresult rv = 0; if (mDomainAxis!= null) return rv; &if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; <else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) &return this.domainAxes.indexOf(axis); &else </* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) <return this.domainAxes.indexOf(axis); else </* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) return this.domainAxes.indexOf(axis); else return 0;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; <if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (!hasAxes ||!hasAxes ||!hasAxes) &return 0; &return this.domainAxes.indexOf(axis);
if (strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis)) == -1) LOG(LOG_ERR, "getDomainAxisIndex: domainAxis index 0x%08xn", strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis))); return this.domainAxes.indexOf(axis);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; <else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (aIsAxis) &aIsAxis = false; return NS_OK; return NS_OK;
if (axis) return this.domainAxes.indexOf(axis); else </* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) <return this.domainAxes.indexOf(axis); <else </* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) <return this.domainAxes.indexOf(axis); &else </* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) &return this.domainAxes.indexOf(axis); <else /* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
ret = this.domainAxes.indexOf(axis); if (ret &0) <return ret; <return ret;
if (!this.domainAxes.IsEmpty()) &return this.domainAxes.indexOf(axis); &return 0;
if (this.domainAxes.indexOf(axis) 0) return this.domainAxes.indexOf(axis); &return 0; &return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsresult rv = 0; if (mDomainAxis!= null) return rv; <if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; &if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
ret = this.domainAxes.indexOf(axis); if (ret &0) return ret; <return ret;
if (axis) <return this.domainAxes.indexOf(axis); &else </* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
ret = this.domainAxes.indexOf(axis); if (ret 0) <return ret; return ret;
if (this.domainAxes.indexOf(axis) <0) return this.domainAxes.indexOf(axis); &return 0; return 0;
return this.domainAxes[axis].indexOf('<0');
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) &return this.domainAxes.indexOf(axis); &else /* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aCnt) <aCnt = 0; aCnt = 0; &else aCnt = 0; &return aCnt;
if (!(op.domainAxes.indexOf(axis))) <return false; &return op.domainAxes.indexOf(axis);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; &else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (i <0) return this.domainAxes.indexOf((IDOMImplementation *)i); &return this.domainAxes.indexOf((IDOMImplementation *)i);
if ((val = this.domainAxes.indexOf(axis))!= 0) &return val; <return (val & (val));
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (i <0) <return this.domainAxes.indexOf((IDOMImplementation *)i); <return this.domainAxes.indexOf((IDOMImplementation *)i);
if (axis) &return this.domainAxes.indexOf(axis); else return 0;
if (aCnt) <aCnt = 0; aCnt = 0; else <aCnt = 0; return aCnt;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; &else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsresult rv = 0; if (mDomainAxis!= null) <return rv; if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; &else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (this.domainAxes.indexOf(axis) 0) <return this.domainAxes.indexOf(axis); return 0; return 0;
if (!mDomainAxes) return 0; &if (!mDomainAxes) return 0; mDomainAxes = 0; return 0;
if (aCnt) aCnt = 0; aCnt = 0; &else aCnt = 0; <return aCnt;
if (aCnt) &aCnt = 0; aCnt = 0; &else &aCnt = 0; &return aCnt;
&nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (axis) <return this.domainAxes.indexOf(axis); &else /* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (i &0) return this.domainAxes.indexOf((IDOMImplementation *)i); &return this.domainAxes.indexOf((IDOMImplementation *)i);
<nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (splx) <LOG(L_ERR, "getDomainAxisIndex: getDomainAxisIndex: no splx"); return this.domainAxes.indexOf(axis); &return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (axis) return this.domainAxes.indexOf(axis); &else &return 0;
if (!(op.domainAxes.indexOf(axis))) &return false; &return op.domainAxes.indexOf(axis);
if (axis) return this.domainAxes.indexOf(axis); else /* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (!this.domainAxes.IsEmpty()) return this.domainAxes.indexOf(axis); return 0;
ret = this.domainAxes.indexOf(axis); if (ret <0) <return ret; <return ret;
if (aCnt) &aCnt = 0; aCnt = 0; &else <aCnt = 0; &return aCnt;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
&nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
<nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (axis) <return this.domainAxes.indexOf(axis); <else &return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
<nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
&nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
return this.domainAxes.indexOf((dummy & <((char *)0)).mDomainAxisIndex);
if (aCnt) &aCnt = 0; aCnt = 0; else &aCnt = 0; <return aCnt;
if (!this.domainAxes.IsEmpty()) &return this.domainAxes.indexOf(axis); return 0;
&nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if ((val = this.domainAxes.indexOf(axis))!= 0) <return val; return (val & <(val));
if (aCnt) aCnt = 0; aCnt = 0; &else aCnt = 0; &return aCnt;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (!(op.domainAxes.indexOf(axis))) return false; &return op.domainAxes.indexOf(axis);
if ((val = this.domainAxes.indexOf(axis))!= 0) &return val; &return (val & <(val));
nsresult rv = 0; if (mDomainAxis!= null) <return rv; <if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; &if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
<nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
<nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
return (this.domainAxes.indexOf(axis) &0);
if (aCnt) &aCnt = 0; aCnt = 0; <else <aCnt = 0; <return aCnt;
if (aCnt) aCnt = 0; aCnt = 0; else aCnt = 0; <return aCnt;
if (this.domainAxes.indexOf(axis) &0) &return this.domainAxes.indexOf(axis); <return 0; &return 0;
return this.domainAxes[axis].indexOf('0');
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsresult rv = 0; if (mDomainAxis!= null) return rv; <if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if (i &0) <return this.domainAxes.indexOf((IDOMImplementation *)i); return this.domainAxes.indexOf((IDOMImplementation *)i);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (!this.domainAxes.IsEmpty()) <return this.domainAxes.indexOf(axis); return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; <else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (this.domainAxes.indexOf(axis) <0) return this.domainAxes.indexOf(axis); return 0; &return 0;
if (aCnt) <aCnt = 0; aCnt = 0; &else aCnt = 0; return aCnt;
if (!(axis.cbAxes.size() == 0) && axis.cbAxes.width == 0) return false; <return this.domainAxes.indexOf(axis);
if ((dummy &&!(dummy &&!(dummy && dummy)))) nsIDOMNode* dummy; dummy.mDomainAxisIndex = dummy; return dummy; return dummy;
if (isHidden()) <LOG(L_ERR, "getDomainAxisIndex: got %d in DomainAxes", axis); &return 0;
if (axis) &return this.domainAxes.indexOf(axis); <else /* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if ((val = this.domainAxes.indexOf(axis))!= 0) return val; <return (val & <(val));
if ((dummy &&!(dummy &&!(dummy && dummy)))) <nsIDOMNode* dummy; dummy.mDomainAxisIndex = dummy; return dummy; return dummy;
nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (splx) <LOG(L_ERR, "getDomainAxisIndex: getDomainAxisIndex: no splx"); return this.domainAxes.indexOf(axis); return 0;
nsresult rv = 0; if (mDomainAxis!= null) <return rv; <if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if (strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis)) == -1) &LOG(LOG_ERR, "getDomainAxisIndex: domainAxis index 0x%08xn", strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis))); return this.domainAxes.indexOf(axis);
nsresult rv = 0; if (mDomainAxis!= null) <return rv; if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if ((dummy &&!(dummy &&!(dummy && dummy)))) &nsIDOMNode* dummy; dummy.mDomainAxisIndex = dummy; return dummy; &return dummy;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; &if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
if (!mDomainAxes) <return 0; if (!mDomainAxes) return 0; mDomainAxes = 0; return 0;
if (axis) return this.domainAxes.indexOf(axis); &else /* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (axis) <return this.domainAxes.indexOf(axis); else <return 0;
&nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; &else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (!mDomainAxes) &return 0; if (!mDomainAxes) return 0; mDomainAxes = 0; return 0;
if ((dummy &&!(dummy &&!(dummy && dummy)))) <nsIDOMNode* dummy; dummy.mDomainAxisIndex = dummy; return dummy; &return dummy;
if (axis) <return this.domainAxes.indexOf(axis); &else return 0;
ret = this.domainAxes.indexOf(axis); if (ret &0) <return ret; return ret;
if (this.domainAxes.indexOf(axis) &0) <return this.domainAxes.indexOf(axis); &return 0; return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; &else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsresult rv = 0; if (mDomainAxis!= null) <return rv; &if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; <else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (aIsAxis) <aIsAxis = false; return NS_OK; <return NS_OK;
if ((val = this.domainAxes.indexOf(axis))!= 0) <return val; &return (val & (val));
nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aCnt) &aCnt = 0; aCnt = 0; <else &aCnt = 0; &return aCnt;
if (axis) <return this.domainAxes.indexOf(axis); <else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (aCnt) <aCnt = 0; aCnt = 0; else &aCnt = 0; return aCnt;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; else &return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) <return this.domainAxes.indexOf(axis); &else </* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
ret = this.domainAxes.indexOf(axis); if (ret &0) return ret; return ret;
if (this.domainAxes.indexOf(axis) &0) <return this.domainAxes.indexOf(axis); &return 0; <return 0;
if (this.domainAxes.indexOf(axis) &0) &return this.domainAxes.indexOf(axis); &return 0; <return 0;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; &if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
&nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (aCnt) &aCnt = 0; aCnt = 0; <else aCnt = 0; &return aCnt;
if (aCnt) aCnt = 0; aCnt = 0; &else <aCnt = 0; &return aCnt;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; &else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsresult rv = 0; if (mDomainAxis!= null) return rv; <if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (aIsAxis) <aIsAxis = false; return NS_OK; return NS_OK;
&nsCOMPtr&nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (this.domainAxes.indexOf(axis) 0) &return this.domainAxes.indexOf(axis); <return 0; &return 0;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) return this.domainAxes.indexOf(axis); <else </* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (this.domainAxes.indexOf(axis) 0) <return this.domainAxes.indexOf(axis); <return 0; &return 0;
if (this.domainAxes.indexOf(axis) 0) &return this.domainAxes.indexOf(axis); &return 0; <return 0;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; <if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
if (!hasAxes ||!hasAxes ||!hasAxes) <return 0; &return this.domainAxes.indexOf(axis);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; <else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) &nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) &domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) return NS_ERROR_FAILURE; &else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (isHidden()) &LOG(L_ERR, "getDomainAxisIndex: got %d in DomainAxes", axis); return 0;
if (axis) &return this.domainAxes.indexOf(axis); <else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (this.domainAxes.indexOf(axis) &0) return this.domainAxes.indexOf(axis); <return 0; <return 0;
if (aCnt) aCnt = 0; aCnt = 0; else <aCnt = 0; return aCnt;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) /* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) /* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) return this.domainAxes.indexOf(axis); <else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (i &0) <return this.domainAxes.indexOf((IDOMImplementation *)i); &return this.domainAxes.indexOf((IDOMImplementation *)i);
nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) <domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (this.domainAxes.indexOf(axis) <0) return this.domainAxes.indexOf(axis); <return 0; return 0;
if (axis) return this.domainAxes.indexOf(axis); &else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (this.domainAxes.indexOf(axis) <0) <return this.domainAxes.indexOf(axis); &return 0; return 0;
if (aCnt) aCnt = 0; aCnt = 0; else aCnt = 0; &return aCnt;
if (aCnt) aCnt = 0; aCnt = 0; <else <aCnt = 0; return aCnt;
<nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (this.domainAxes.indexOf(axis) <0) <return this.domainAxes.indexOf(axis); return 0; return 0;
if ((type == CategoryAxis) || (type == CategoryAxis)) <return 0; &else return this.domainAxes.indexOf(axis);
&nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) <domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
if (!this.domainAxes.IsEmpty()) &return this.domainAxes.indexOf(axis); <return 0;
if (axis) <return this.domainAxes.indexOf(axis); <else /* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (!this.domainAxes.IsEmpty()) return this.domainAxes.indexOf(axis); <return 0;
if (strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis)) == -1) <LOG(LOG_ERR, "getDomainAxisIndex: domainAxis index 0x%08x&n", strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis))); return this.domainAxes.indexOf(axis);
nsresult rv = 0; if (mDomainAxis!= null) <return rv; if (mDomainAxis!= null) &rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; <if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis)) == -1) <LOG(LOG_ERR, "getDomainAxisIndex: domainAxis index 0x%08xn", strcmp(((CategoryAxis*)axis).domainAxes.indexOf(axis))); return this.domainAxes.indexOf(axis);
if (aCnt) aCnt = 0; aCnt = 0; <else aCnt = 0; return aCnt;
if ((val = this.domainAxes.indexOf(axis))!= 0) &return val; return (val & (val));
if (axis) return this.domainAxes.indexOf(axis); else /* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsresult rv = 0; if (mDomainAxis!= null) &return rv; if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (axis) <return this.domainAxes.indexOf(axis); else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; &else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (axis) return this.domainAxes.indexOf(axis); <else </* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
if (splx) <LOG(L_ERR, "getDomainAxisIndex: getDomainAxisIndex: no splx"); return this.domainAxes.indexOf(axis); <return 0;
if ((type == CategoryAxis) || (type == CategoryAxis)) &return 0; else return this.domainAxes.indexOf(axis);
if (!mDomainAxes) <return 0; &if (!mDomainAxes) return 0; mDomainAxes = 0; return 0;
if (axis) return this.domainAxes.indexOf(axis); else &return 0;
if (axis) <return this.domainAxes.indexOf(axis); <else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
ret = this.domainAxes.indexOf(axis); if (ret 0) &return ret; return ret;
if (axis) <return this.domainAxes.indexOf(axis); else /* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) <nsAutoString dummy; dummy.GetEndSide(dummy); &nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) <return this.domainAxes.indexOf(axis); &else &return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) &truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if ((val = this.domainAxes.indexOf(axis))!= 0) <return val; &return (val & <(val));
if (aCnt) <aCnt = 0; aCnt = 0; else &aCnt = 0; &return aCnt;
&return this.domainAxes.indexOf(axis);
if (aCnt) <aCnt = 0; aCnt = 0; <else &aCnt = 0; <return aCnt;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) <return NS_ERROR_FAILURE; <else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (this.domainAxes.indexOf(axis) 0) <return this.domainAxes.indexOf(axis); &return 0; <return 0;
if ((val = this.domainAxes.indexOf(axis))!= 0) <return val; return (val & (val));
if (axis) return this.domainAxes.indexOf(axis); else </* Now it's the only way to return the domain at this point. */ if (isAuto()) <if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsresult rv = 0; if (mDomainAxis!= null) &return rv; if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; &return rv;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; if (mDomainAxis!= null) rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) <nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; &else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (i 0) <return this.domainAxes.indexOf((IDOMImplementation *)i); <return this.domainAxes.indexOf((IDOMImplementation *)i);
return this.domainAxes[axis].indexOf('0');
if (!hasAxes ||!hasAxes ||!hasAxes) <return 0; return this.domainAxes.indexOf(axis);
if (aCnt) aCnt = 0; aCnt = 0; else &aCnt = 0; &return aCnt;
if (!(axis.cbAxes.size() == 0) && axis.cbAxes.width == 0) return false; return this.domainAxes.indexOf(axis);
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; &else return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
if (i <0) return this.domainAxes.indexOf((IDOMImplementation *)i); return this.domainAxes.indexOf((IDOMImplementation *)i);
if (isHidden()) LOG(L_ERR, "getDomainAxisIndex: got %d in DomainAxes", axis); <return 0;
if ((val = this.domainAxes.indexOf(axis))!= 0) <return val; <return (val & (val));
if (this.domainAxes.indexOf(axis) &0) &return this.domainAxes.indexOf(axis); return 0; <return 0;
if (!(axis.cbAxes.size() == 0) && axis.cbAxes.width == 0) &return false; return this.domainAxes.indexOf(axis);
if (this.domainAxes.indexOf(axis) <0) &return this.domainAxes.indexOf(axis); return 0; return 0;
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (axis) &return this.domainAxes.indexOf(axis); <else <return 0;
nsresult rv = 0; if (mDomainAxis!= null) &return rv; if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; <return rv;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
&nsCOMPtrnsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) </* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; &if ((truncated_char)!= 0x4fffff) &/* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if ((val = this.domainAxes.indexOf(axis))!= 0) return val; &return (val & (val));
if ((type == CategoryAxis) || (type == CategoryAxis)) <return 0; <else return this.domainAxes.indexOf(axis);
nsresult rv = 0; if (mDomainAxis!= null) &return rv; <if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (aCnt) <aCnt = 0; aCnt = 0; else aCnt = 0; &return aCnt;
if (this.domainAxes.indexOf(axis) 0) return this.domainAxes.indexOf(axis); &return 0; return 0;
if ((val = this.domainAxes.indexOf(axis))!= 0) &return val; &return (val & &(val));
if (aIsAxis) <aIsAxis = false; return NS_OK; &return NS_OK;
nsresult rv = 0; if (mDomainAxis!= null) return rv; &if (mDomainAxis!= null) <rv = mDomainAxis.indexOf(mDomainAxis); if (NS_FAILED(rv)) return rv; return rv;
if (aCnt) aCnt = 0; aCnt = 0; else <aCnt = 0; &return aCnt;
/*return a truncated char* pointer to this domain, if necessary. */ if ((axis & 0x3fffff)!= -1) &/* The pointer is undefined as a truncated char*/ truncated_char */ truncated_char = 0x3fff; truncated_char = 0x0ffffff; if ((truncated_char)!= 0x4fffff) </* The pointer is not an initialized. */ if (truncated_char) <truncated_char = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
if (axis) return this.domainAxes.indexOf(axis); else &/* Now it's the only way to return the domain at this point. */ if (isAuto()) &if (axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf(axis.domainAxes.indexOf
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); <nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) &str = str.strdup('&n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
if (isHidden()) &LOG(L_ERR, "getDomainAxisIndex: got %d in DomainAxes", axis); &return 0;
nsIAtom* tag; if ((NS_SUCCEEDED(this.domainAxes.indexOf(tag)) &&!tag) nsAutoString tag; nsIAtom* tag = (nsIAtom*)tag; if (tag!= tag) &return NS_ERROR_FAILURE; <else <return NS_OK; nsIAtom* parent = (nsIAtom*)tag.GetParent(); if (parent) nsCOMPtrnsIContent> parent; nsCOMPtrnsIAtom> child = do_QueryInterface(parent); if (child) parent.GetNamespaceID(parent); if (child.GetNameSpaceID(parent)) parent.GetNameSpaceID(parent); return parent.GetNameSpaceID(parent);
return (this.domainAxes.indexOf(axis) 0);
nsCOMPtr<nsIDOMDomain> domDomain = do_QueryInterface(ctx.do_QueryInterface(*this)); if (domDomain) &domDomain.DomainAttributes.Enumerate(DOMDomainAxis, this); if (domDomain) domDomain.GetDomainAxisIndex(aDomain); return domDomain.GetDomainAxisIndex(aDomain);
nsAutoString dummy; nsString s; dummy.GetStartSide(dummy); nsString dummy; s = dummy.GetEndSide(dummy); if (s) &nsAutoString dummy; dummy.GetEndSide(dummy); nsString ucs; nsString tmp; nsString str; if (s.mNodeType == 0) <str = str.strdup('<n'); if (str == '0') str = str.strdup('0'); else str = str.strdup('0'); else str = str.strdup('0'); str = str.strdup('0'); str = str.strdup('0'); else str = str.
ret = this.domainAxes.indexOf(axis); if (ret 0) &return ret; <return ret;
if (i &0) &return this.domainAxes.indexOf((IDOMImplementation *)i); <return this.domainAxes.indexOf((IDOMImplementation *)i);
