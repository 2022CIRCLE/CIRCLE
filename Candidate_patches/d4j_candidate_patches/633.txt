golden:
pos += Character.charCount(Character.codePointAt(input, pos));
inference:
pos = Character.charCount(Character.codePointAt(input, pos));

pos += Character.charCount();
pos += c.charCount(Character.codePointAt(input, pos));
pos += Character.charArray(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos));
pos += c.length;
pos += Character.CharArray(Character.codePointAt(input, pos));
pos += character.charCount(Character.codePointAt(input, pos));
int pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(input);
pos += Character.charCount(Character.codePointAt(input));
pos += Character.charCount(Character.codePointAt(out, pos));
pos++;
pos += Character.charCount(Character.codePointAt(input, pos) + 1);
pos += Character.charCount (Character.codePointAt(input, pos));
pos += Character.charAt(Character.codePointAt(input, pos));
else pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos+1));
pos += String.charCount(Character.codePointAt(input, pos));
pos += Character.charAt(input, pos);
pos += Character.toChars(Character.codePointAt(input, pos));
pos += Value.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(0);
int pos = Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(String.valueOf(input), pos));
pos += Character.size();
pos -= Character.charCount(Character.codePointAt(input, pos));
pos += charCount(Character.codePointAt(input, pos));
pos += Character.CharArrayAt(Character.codePointAt(input, pos));
pos += Character.charCount(Character.charAt(input, pos));
pos += Character.charCount(&Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos), 0);
pos += Character.charCount(Character.codePointAt(buf, pos));
pos += String.valueOf(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos+2));
pos += Character.charCount(c);
pos += u.charCount(Character.codePointAt(input, pos));
pos += Character.charLength(Character.codePointAt(input, pos));
pos += String.CharCount(Character.codePointAt(input, pos));
pos += Character.charCount(String.valueOf(input, pos));
pos += Character.CharArray();
pos += Character.charCount (Character.codePointAt (input, pos));
pos += c.charCount(Character.codePointAt(input, pos));
p += Character.charCount(Character.codePointAt(input, p));
pos += Character.length();
pos += Character.charCount(Character.codePointAt(input, pos)+1);
pos += Character.charCount(Character.codePointAt(output, pos));
pos += Character.charArrayAt(Character.codePointAt(input, pos));
pos += Character.charArray();
pos += char.charCount(Character.codePointAt(input, pos));
*pos += Character.charCount(Character.codePointAt(input, pos));
pos = character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(char);
pos += char(Character.codePointAt(input, pos));
pos += len;
pos += c.charCount();
pos |= Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.CodePointAt(input, pos));
pos += PRUint32(Character.codePointAt(input, pos));
pos += Character.charCount(input, pos);
pos += Character.charCount(CodePointAt(input, pos));
pos += Character.Length();
pos += Input.charCount(Character.codePointAt(input, pos));
pos += Character.get();
pos += char[Character.codePointAt(input, pos)];
pos += Character.charCount(Character.codePointAt(input, pos)-1);
pos += c.length);
pos += String.CharArray(Character.codePointAt(input, pos));
long pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charOffset(Character.codePointAt(input, pos));
pos += '0';
pos += Character.charCount(Input.charAt(input, pos));
pos += Character.Length(Character.codePointAt(input, pos));
pos += Character.charCount(input.charAt(pos));
pos += characters.charCount(Character.codePointAt(input, pos));
pos++ = Character.charCount(Character.codePointAt(input, pos));
pos += ToNewUnicode(Character.codePointAt(input, pos));
pos += const Character.charCount(Character.codePointAt(input, pos));
pos += Character.format(Character.codePointAt(input, pos));
pos += Character.charList(Character.codePointAt(input, pos));
pos += Character.characterCount(Character.codePointAt(input, pos));
pos += Character.charAt(input);
pos += Character.charCount(Character.codePointAt(c, pos));
pos += Character.charCount(Character.codePointAt(input, pos));
pos += Type.charCount(Character.codePointAt(input, pos));
pos += Character.eCharCount(Character.codePointAt(input, pos));
pos += Character.charIndex(Character.codePointAt(input, pos));
pos +=Character.charCount(Character.codePointAt(input, pos));
pos += characters[Character.codePointAt(input, pos)];
pos += Character.charData(Character.codePointAt(input, pos));
pos = Character.charCount();
pos += Character.charCount(String.valueOf(input));
c = Character.toChars(Character.codePointAt(input, pos));
pos += Person.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, len));
pos += Character.charCount(Character.codePointAt(input, p));
pos += Character;
pos += Character.charCount(Character.codePointAt(input, pos + 1));
pos += Character.charCount(chars);
pos += Character.charCount(Character.codePointAt(input, pt));
pos += Character.charCount(Character.codePointAt(p, pos));
pos += Character.charBytes(Character.codePointAt(input, pos));
pos += Character.charSize(Character.codePointAt(input, pos));
result = Character.charCount(Character.codePointAt(input, pos));
pos += Writer.charCount(Character.codePointAt(input, pos));
pos += chars[Character.codePointAt(input, pos)];
pos += Character.charCount(1);
pos += Character.charCount(Character.codePointAt(0));
pos += Character(Character.codePointAt(input, pos));
p = Character.charCount(Character.codePointAt(input, pos));
pos += strlen(Character.codePointAt(input, pos));
pos += Character.charCount(Character.c.codePointAt(input, pos));
pos += Character.charPtr(Character.codePointAt(input, pos));
pos += Character.charCount(PRUint32(input), pos));
pos += Character.stringAt(Character.codePointAt(input, pos));
break;
pos += c;
p += Character.charCount(Character.codePointAt(input, pos));
result += Character.charCount(Character.codePointAt(input, result));
pos += Character.charCount(CCharacter.codePointAt(input, pos));
pos += Character.charCount(character);
pos += Character.charCount(Character.codePointAt(input, pos++));
pos += Character.charCount(Character.codePointAt(charset, pos));
pos += Character.charCount(char));
pos.append(Character.codePointAt(input, pos));
pos += Character.CharCount();
pos += Character.len;
pos += Character.charCount(Character.codePointAt(pos));
pos += Character.charCount(Character.codePointAt(char, pos));
pos = Character.codePointAt(input, pos);
pos += c.len;
pos += int(Character.codePointAt(input, pos));
pos += character.charCount();
pos += Character.charCount(Character.codePointAt(input, c));
pos += Character.CharAt(Character.codePointAt(input, pos));
pos += Character.charCount(charAt(input, pos));
pt += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(character.charAt(input, pos));
pos += Character.charCount(consumed);
pos += Character.charCount(charset);
pos += Character.charCount("");
rv = Character.charCount(Character.codePointAt(input, rv));
pos += Character.CharAt(input, pos);
pos += c.charCount;
pos += Character.charCount();
pos += Character.charCount(Character.get(input, pos));
pos += Character.charAt(0);
pos += Character.charCount(char(input, pos));
pos += Character.charCount(Character.bufferAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos).get());
pos += (Character)Character.charCount(input, pos));
pos += Character.charCount(Character.strdup(input, pos));
pos += Character.charCount(char[0]);
pos += Character.charCount(Character.codePointAt(Input, pos));
result = Character.charCount(Character.codePointAt(input, result));
pos += Character.charCount(Character.codePointAt(input, pos), c);
pos += Character.charCount(Character.codePointAt(input, pos+3));
pos += Character.CharCount(Character.codePointAt(input, pos));
pos += Character.charCount(input.get());
pos += Character.charCount(Character.codePointAt(*input, pos));
pos += Character.charCount(type);
pos += Character.charCount(Character.toChars(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos));
pos += c.size();
pos += Character.charCount(Character.codePointAt(input, pos-1));
pos += Character.get().charCount();
pos += Character.charCount(Character.codePtr(input, pos));
pos += Character.charCount(StringAt(input, pos));
pos += Character.charCount(Character.codePointAt(position, pos));
r = Character.charCount(Character.codePointAt(input, r));
pos += (char)Character.codePointAt(input, pos);
pos += Character.charCount(l);
pos += Character.cstr_oneuse();
pos += Character.CharArrayAt(input, pos);
pos += Character.charCount(Character.codePointAt(&input, pos));
pos += Character.charCount(Character.codingAt(input, pos));
pos += Character.charCount(PRUint32(input, pos));
pos += Character.charCount(Character.coordAt(input, pos));
pos += Character.charCount(char(input));
pos += Character.charCount(String.valueOf(char));
pos += Character.charCount(Character.codePointAt(type, pos));
pos += Character.charCount(Character.codePointAt(input, *pos));
pos += Character.charCount(Character.codePointAt (input, pos));
pos += Character.charCount(char[1]);
pos += Character.charCount('0');
pos += Character.charCount(out);
pos += Character.charCount(Character.get());
pos += Character.charCount(Character.codePointAt(input, 0));
pos+=Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos, offset));
pos += Character.charCount(Character.codePointAt(input, pos, size));
pos += Character.charCount(Character.codePointAt(input, pos - 1));
pos = Character.charCount(Character.codePointAt(input, pos)); break;
pos += Character.charCount(strcmp(char, "%s", pos));
pos += Character.charCount(Character.codePointAt(input, pos), &line);
pos += Character.charCount(Character.codePointAt(input, pos), lhs.length());
pos += Character.charCount(Character.codePointAt(input, pos, 0));
pos += (String)Character.charCount(Character.codePointAt(input, pos));
pos += Char.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos));  else  pos += Character.charCount(Character.codePointAt(input, pos));
pos += (unsigned char)Character.codePointAt(input, pos));
pos += char_type.charCount(Character.codePointAt(input, pos));
pos += Char(input, pos));
pos += chars[1];
pos += chars.charCount(Character.codePointAt(input, pos));
pos += char[input.length() - 1];
pos += Character.charCount(Input.valueOf(Character.codePointAt(input, pos)));
pos += Character.charCount(char_buf);
pos += Character.charCount(Character.codePointAt(input, pos, sizeof(input)));
pos += chars[character.charCount];
pos += Character.charCount(Character.codePointAt(input, pos+(Character.isStartSignaling()|Character.isEndSignaling())));
pos += chars;
pos += Character.charCount(String.fromLength(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos, true));
pos += Character.charCount(Character.codePointAt(input, pos) + 1, 1);
pos += Character.charCount(Character.codePointAt(input, pos, pos));
pos += (Character.charCount(Character.codePointAt(input, pos))));
pos += Character.charCount(Character.codePointAt(input, pos, c));
pos += Character.charCount(Character.codePointAt(input, pos, l));
pos += Character.charCount(Character.codePointAt(input, pos), int len);
pos += Character.charCount(Character.codePointAt(input, pos+c.length));
pos += Character.charCount((unsigned char)Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos), 1);
pos += Character.charCount((const char *)Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos+2 + 1 + 4));
pos += Character.charCount(s);
pos += Character.charCount(Character.codePointAt(input, pos) / 0);
pos += Character.charCount(Character.codePointAt(input, pos), 0, 0);
pos += Character.charCount((unsigned long)Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos, char));
pos += Character.charCount(char) - 1;
pos += Character.charCount(c, pos);
pos += Character.charCount((Character)(char)(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos, (Int)strlen(char)));
pos += char_len;
pos += Character.charCount(char_char(input, pos));
pos += c.length - Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos) + 1, -1);
pos += Character.charCount(PRUint32(input));
pos += Character.charCount(Input.ElementAt(input, pos));
pos += Character.charCount(Input.AsciiInput(input, pos));
pos += Character.charCount(char_c.mType);
pos += Character.charCount(Input.charAt(pos));
pos += Character.charCount(Character.codePointAt(input, pos), (char *) 0);
pos += Character.charCount(input, pos) + c.length;
pos += charAtom(input, pos);
pos += char[0];
pos += Character.charCount(Input.unsigned32(Character.codePointAt(input, pos)));
pos += Character.charCount((Character.codePointAt(input, pos)));
pos += (Character)Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos))  32;
pos += Character.charCount(chars[0]);
pos += uint32(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos, (consumed == 0)? Character.charCount(char):Character.codePointAt(input, pos, 0)));
pos += Character.charCount(AtomAt(input, pos));
pos += Character.charCount(input.CharAt(pos));
pos += Character.charCount(Character.codePointAt(input, pos, m_char));
pos += (int)Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Input.advance(input, pos));
pos += char_str_char_length(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos), out);
pos += charSeq[character.charCount()];
pos += s.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos), offset);
pos += Character.codePointAt(input, pos, 1);
pos += Character.charCount(Character.codePointAt(input, pos) - input.length());
pos += Character.charCount(Character.codePointAt(input, pos) - 1);
pos += Character.charCount(Character.codePointAt(input, pos), int pos);
pos += Character.charCount(Character.codePointAt(input, pos, &char));
pos += Character.charCount(char(Character.codePointAt(input, pos)));
pos += Character.charCount(nsAutoString(input), pos));
pos += Char.charCount(Character.codePointAt(input, pos), sizeof(input));
pos += Character.codePointAt(Input.Bytes(pos), pos));
pos += nsAutoString(Character.codePointAt(input, pos));
pos += Character.charCount(((input == '0')? Character.charCount(Character.codePointAt(input, pos)) : Character.charCount(char)));
pos += Character.charCount(input.GetUnicode());
pos += Character.charCount(Character.codePointAt(input, pos, len));
pos += splchars.Character.charCount(splChars.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos)) + 1;
pos += Character.charCount(Character.codePointAt(input, pos, nrnl));
pos += Character.charCount(Character.codePointAt(input, pos, int));
pos += Character.charCount(char_p(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos), char[3]);
pos += Character.charCount(Character.codePointAt(input, pos) + 1, 0);
pos += Character.charCount(Character.codePointAt(input, pos+c));
pos += Character.charCount(Character.codePointAt(input, pos)) &32;
pos += Character.charCount(Character.codePointAt(input, pos)); <else <pos += Character.charCount(Character.codePointAt(input, pos));
<pos += Character.charCount(Character.codePointAt(input, pos));
pos += '&0';
pos += Character.charCount(Character.codePointAt(input, pos)); <else &pos += Character.charCount(Character.codePointAt(input, pos));
pos += &Character.charCount(Character.codePointAt(input, pos));
pos += '<0';
pos += Character.charCount(Character.codePointAt(input, pos)); else <pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount('&0');
pos += Character.charCount(Character.codePointAt(input, pos)) <32;
pos += Character.charCount(((input == '0')? Character.charCount(Character.codePointAt(input, pos)) : Character.charCount(char)));
pos += Character.charCount(((input == '<0')? Character.charCount(Character.codePointAt(input, pos)) : Character.charCount(char)));
pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos)); <else pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos)) 32;
pos += Character.charCount(((input == '&0')? Character.charCount(Character.codePointAt(input, pos)) : Character.charCount(char)));
pos += '0';
pos += Character.charCount(Character.codePointAt(input, pos)); &else <pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos)); &else &pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount('0');
pos += <Character.charCount(Character.codePointAt(input, pos));
&pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos)); else pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount(Character.codePointAt(input, pos)); else &pos += Character.charCount(Character.codePointAt(input, pos));
pos += Character.charCount('<0');
pos += Character.charCount(Character.codePointAt(input, pos)); &else pos += Character.charCount(Character.codePointAt(input, pos));
