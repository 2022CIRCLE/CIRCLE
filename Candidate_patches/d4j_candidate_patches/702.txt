golden:
return getCumPct((Comparable<?>) v);
inference:
return getCumPct(v);
return v;
return getCumPct((Comparable?>) v);
return getCumPct((comparable?>) v);
return double getCumPct((Comparable?>) v);
return getCumPct((Comparable?>)v);
return getCumPct(&v);
return getCumPct((Object?>) v);
return ((Comparable?>) v);
return GetCumPct(v);
return GetCumPct((Comparable?>) v);
return getCumPct();
return getCumPct ((Comparable?>) v);
return getCumPct((IComparable?>) v);
return getCumPct((Comparable) v);
return getCumPct((unsigned char*) v);
return getCumPct((void*) v);
return getCumPct( v );
return getPct(v);
return getPct((Comparable?>) v);
return getCumPct(*v);
return getCumPct(VarTerm);
return v.getCumPct();
return getCumPct((Comparable?>) &v);
return getCumPct((comparable) v);
return getCumPct((double)v);
return getCumPct((int)v);
return getCumPct((int) v);
return getCumPct((COMPtr?>) v);
return getCumPct((PRUint32) v);
return getCumPct((void**) v);
return getCumPct((void *) v);
return getCumPct((*v));
return v.getCumPct();
return getCumPct( (Comparable?>) v );
return (GetCumPct(v));
return getCumPct((PRUint32*) v);
return getCumPct((Comparable)v);
return 0;
return getCumPct((comp) v);
return getCumPct((unsigned char *) v);
return getCumPct((Unsigned char*) v);
return getCumPct(VarTerm, v);
return getCumPct((Node?>) v);
return (getCumPct(v));
return getCumPct((void **) v);
return getCumPct((ComparableObject?>) v);
return getCumPct((void*)v);
return getCumPct((const double)v);
return getCumPct((Comparable *) v);
return getCumPct(((Comparable?>)v));
getCumPct(v); return (0);
return getCumPct((v) v);
return (v);
return getCumPct((COMPARISON?>) v);
return getCumPct((unsigned long)v);
return getCumPct(nv);
return getCumPct((unsigned long) v);
return getCumPct(s);
return mPct;
return getCumPct(ct);
return do_GetCumPct(v);
return *getCumPct((Comparable?>) v);
return getCumPct(v, 0);
return getCumPct((void**)v);
return getCumPct((Comparable?>)*v);
return getCumPct((Comparable?>) *v);
return *v;
return getCumPct((PRUint32)v);
return getCumPct((nsIContent*) v);
return getCumPct((CComparable?>) v);
return getCumPct(getter_AddRefs(v));
return getCumPct(dev);
return getCumPct((double) v);
return (*v);
return (Comparable?>) v;
return getCumPct((void *)v);
return getCumPct((Vector?>) v);
return getCumPct((Number?>) v);

return getCumPct((VarType?>) v);
return getCumPct((Comparable?>) s);
return getCumPct((const double) v);
return this;
return getCumPct((Comparable?>)&v);
return getCumPct((Pct) v);
return getCumPct((String?>) v);
return mCumPct;
return getCumPct(pct);
return getCumPct((Comparable? >>>) v);
getCumPct(v); return v;
return getCumPct(null);
return getCumPct((Comparable?>) u);
return getCumPct((void **)v);
getCumPct((Comparable?>) v);
return getCumPct((nsIAtom*) v);
return pct;
return getCumPct(v, v);
return (getCumPct((Comparable?>) v);
return getCumPct((NodeList?>) v);
return NS_OK;
return getCumPct((Object *) v);
return double getCumPct(v);
return getCumPct((Unsigned char *) v);
return *getCumPct(v);
return getCumPct((object) v);
return getCumPct(dv);
return getCumPct((intptr) v);
return getCumPct((Comparable?>)s);
return getCumPct((String) v);
return getCumPct(m);
return getCumPct((Comparable?>)(v));
return double v;
return getCumPct((result) v);
return getCumPct(n);
return v.getPct();
return getCumPct((Comparable&) v);
return *((Comparable?>) v);
return getCumPct(tmp);
return getCumPct(p);
return getCumPct( (Comparable?>) v);
return getCumPct((Comparable*) v);
return getCumPct(aPct);
getCumPct(v);
return getCumPct((Object*) v);
return getCumPct(object);
getCumPct(v); return 0;
return getCumPct((Common?>) v);
return getCumPct(((Comparable) v);
return getCumPct((Comparable[]) v);
return getCumPct(type);
return getCumPct((Comparable?>) v;
return getCumPct((Comparable>) v);
return getCumPct((Comparator?>) v);
getCumPct(v); return getCumPct(v);
return getCumPct((Placeholder?>) v);
return getCumPct((comparable?>)v);
return getCumPct(lv);
return getCumPct((comparison?>) v);
return getCumPct(c);
return getCumPct(d);
return getCumPct((intptr_t) v);
return getCumPct((compare) v);
return getCumPct((Comparable?>) vp);
return getCumPct((Atom?>) v);
return getCumPct((Comparable?>&) v);
return getCumPct(aComparable);
return getCumPct((Comparable?>)u);
return getCumPct(strlen(v));
return getCumPct((v));
return ret;
return true;
return v.getCumPct(v);
return getCumPct((Comparable?>>) v);
return getPct((Comparable?>)v);
return getCumPct((intptr_t)v);
return getCumPct((comparison) v);
return rv;
return getCumPct((Comparable?>)a);
return getCumPct((COMPARISON) v);
return getCumPct((uintptr) v);
v = getCumPct(v); return v;
return getCumPct(x, y);
return getCumPct((Comparable?>)dv);
return getCumPct((const double*) v);
return compare(v);
return result;
return getCumPct((unsigned char*)v);
return getCumPct((VarTerm) v);
return getCumPct((NodeSet?>) v);
return getCumPct((unsigned char *)v);
return getCumPct(getter_Copies(v));
return getCumPct((Ptr?>) v);
return getCumPct((compatibility) v);
return getCumPct((comp)v);
return getCumPct((Comparable?>) a);
return getCumPct((unsigned char) v);
return getCumPct((dummy) v);
return getCumPct((unsigned int) v);
return getCumPct((u_long) v);
return (0);
return getCumPct((PRUint32*)v);
return getCumPct(((Comparable) v));
return getCumPct(((Comparable)v);
v = v; return getCumPct(v);
return getCumPct((Integer?>) v);
return getCumPct((Pixel?>) v);
return tmp;
return getCumPct((Comparable?>) p);
return getCumPct(((comparable?>) v);
return getCumPct((Pool?>) v);
return getCumPct((Comparable?>) d);
return false;
return getCumPct((Pct*) v);
return getCumPct((Comparable?>) vv);
return getCumPct((nsISupports**) v);
return getCumPct((Comparable?>) v, (u_long)v);
return getCumPct((Pnt32?>) v);
v = getCumPct((Comparable?>) v); if (v)  return (0);  return (0);
return getCumPct(((Comparable?>)(uintptr)v);
/* XXX */ v = (v)v; return getCumPct((Comparable?>) v);
return getCumPct((Comparable?>) v, 0, 0);
if (v == null)  return 0;  return 0;
return getCumPct((nsAWritableString&) v);
return __getCumPct((Comparable?>) v);
if (!mDoc) return (0); return mDoc.mDoc.mPct;
if (v) return getCumPct((Comparable?>) v); else return 0;
return getCumPct((compare_np) v);
rv = getCumPct((Comparable?>) v); if (NS_FAILED(rv)) return rv; return NS_OK;
v = getCumPct((Comparable?>) v); return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next)  if ((v == null) && v.next)  if ((v == null) && v.next)  if ((v == null) && (v.next)!= 0)  if ((v == null) && (v.next)!= 0)  /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next;  else  v.next = v.next;      return v.next;   return v.next;
if (v == NS_CONTENT_STRING_EXT_CAMP)  v = ((String) v).GetPct();  return 0;
return getCumPct((Object) v);
return getCumPct(((Comparable?>) v));
if (v)  if (v)  *v = v;  else  *v = v; return 0;   return 0;
if (v)  if (v == 0)  v = double v;  else  v = (double) v;  return v;
return getCumPct((Import?>) v);
struct proc *pct = getCumPct((Comparable?>) v); if (pct  0)  return pct;  return pct;
return getCumPct((*(v)));
return getCumPct((Comparable?>)(VarType v));
return getCumPct((Comparable?>)(v*)v);
return getCumPct(((Comparable?>) v, 0);
return getCumPct(((Comparable?>) v) & 0xffff);
return getCumPct((nsComparable?>) v);
return getCumPct((Comparable?>) v, sizeof(v));
return getCumPct((Comparable?>) v, v.p, v.d_type);
return getCumPct((compareObject) v);
rv = getCumPct((Comparable?>) v); if (rv) return rv; return rv;
return getCumPct((Comparable?>) v, v.mTarget);
if ((!strlen(v))) return NS_OK; if (v == -1)  strlen(v);  else  strlen(v);  return NS_OK;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1)  return 1;  /* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v = -1) return 1; */
return getCumPct((compareTo?>) v);
return nsCRT::compareToPct(v);
ret = getCumPct((Comparable?>) v); if (ret) return ret; return ret;
return getCumPct((Comparable?>) v, (VoidArray)v);
return getCumPct((Comparable?>) v, sizeof(struct vct));
return getCumPct((Comparable?>) v, sizeof((Comparable?>)));
return getCumPct((Comparable?>) v, 0);
if (!(v)) return 0; return v;
if (v && v.flags & ACTIVE_PACT)  if (*v.flags & ACTIVE_PACTIVE)  if (*v.flags & ACTIVE_PACTIVE)  *v.flags &= ACTIVE_PACTIVE;    return 0;
if (v == null)  return null;  return 0;
if (v)  if (n.len == -1)  return 0;  return v.ioctx;   else  return 0;    return v.ioctx;
if (v == null)  mTotalPct = v; return NS_OK;  return getCumPct((Comparable?>) v);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v)  *p = v; return v;  else  *p = (*) v;  *p = v;  return p;
if (null == v)  return NS_ERROR_NULL_POINTER;  if (null == v)  nsString* tmp; tmp = null; tmp = null; return tmp;  return getCumPct(tmp);
return getCumPct((Comparable?>) v, &context);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable?>) v); if (v)  d = getDirtyPct((Comparable?>) v); return d;  if (nv)  d = v; if (nv)  v = getDirtyPct((Comparable?>) v); if (v!= nv)  if (nv.nv) v = getDirtyPct((Comparable?>) v); return d;   if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct(((Comparable?>) v)!= null? v : 0);
return getCumPct((Comparable?>) v, &idx);
return getCumPct(((Integer)v) v);
return getCumPct((SingleType?>) v);
if ((v = getCumPct((Comparable?>) v)) == null) return 0; else return 0;
return getCumPct((Comparable?>) v, (u_long) v);
/* * If a single ipct is specified, then convert it to * an integer */ v = getCumPct((Comparable?>) v); return v;
return getCumPct((VarTermComparator?>) v);
return getCumPct((Comparable?>) v, true);
if (v)  n = v.next;  else  return getCumPct((Comparable?>) v);
return nsCRT::strdup((nsCRT::strdup(v))) && (v.type == struct value *) && v.data[0]!= '0';
return getCumPct(((PctData*) v));
return getCumPct((Comparable?>) v.obs.value);
return getCumPct((Comparable?>) v, v;
if (!(v) || (v))  mBatch = 1;  return getCumPct((Comparable?>) v);
if (v == null)  if (v == null) return -1; else return v;  if (v == null) return -1;  return v;
r = getCumPct((Comparable?>) v); if (NS_FAILED(r)) return r; r = NS_OK; return r;
return getCumPct((Comparable?>) v.ctrl);
if (v)  return getCumPct((Comparable?>) v);  else  return v;
return getCumPct((Comparable?>) v.mPct, v.mDragonType);
return getCumPct((Comparable?>) v.mPct);
return getCumPct((Comparable?>)v, v.v_pos);
*v = v; return v;
return getCumPct(((Unsigned long)v);
if (v)  pct = v;  return pct;
return getCumPct((VoidComparable?>) v);
return getCumPct((nsIComparable?>) v);
return __getCumPct(v);
if (v && v.id.mVariants)  v.id.mVariants = v.id.mVariants; return getCumPct(v);  else  v.id.mVariants = v.id.mVariants;  return getCumPct(v.id.mVariants);
return getCumPct((Comparable?>) v, sizeof(*(v).tb));
return getCumPct((comparePctSize?>) v);
if (v)  s = v.mCurrentProc; return s;  else  s = v.mCurrentProc; return s;
return mTargetCumPct((Comparable?>) v);
return getCumPct((Comparable?>) v, &v.pct);
return getCumPct((comp.Comparable?>) v);
if (v)  if (!mPct)  mPct = NS_ERROR_NULL_POINTER; return NS_OK;  else  if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK;  return NS_OK;  return NS_OK;
return getCumPct((Comparable?>) v, v);
if (v == null)   v = v;  return (0);  return (0);
nsCRT::free(v); return nsCRT::Free(v);
return getCumPct((Comparable?>) v, v.x);
return getCumPct((Comparable?>) v, null);
return getCumPct((Comparable?>) v, v.x);
return getCumPct((Comparable?>) v, &bp);
/* Get a vct that has a double value. */ vct = getCumPct(v); return vct;
if (v == null) return null; v = v.v_getCumPct(v); return v;
return getCumPct(((VarComparable?>) v);
nsIContent* result = getCumPct((Comparable?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0)  nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v)  v = v;  if (v)  v.floatPct = v;  return v;    return result;
if ((v = getPct((Comparable?>))) == null)  if (v) v.flags = 0;  else v.flags = 0; v.mCurrentPct = v; v.v = v;  if (v) v.v = v; v.v = v; return v.pct;
return GetCumPct((Comparable&?>) v);
if (v == null) &v = v; &return (0); return (0);
if ((v = getPct((Comparable<?>))) == null) &if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v) if (v) *v = v; &else <*v = v; return 0; return 0;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) &return 1; </* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v &= -1) return 1; */
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) return 1; /* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v <= -1) return 1; */
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); else &v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v) <return getCumPct((Comparable?>) v); &else return v;
return getCumPct((Comparable&?>) v, sizeof((Comparable<?>)));
return getCumPct((COMPARISON<?>) v);
struct proc *pct = getCumPct((Comparable<?>) v); if (pct 0) <return pct; &return pct;
if (v == null) <&v = v; <return (0); return (0);
if (null == v) return NS_ERROR_NULL_POINTER; &if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v) <if (v == 0) <v = double v; <else &v = (double) v; return v;
if (v) <if (v) <*v = v; &else &*v = v; return 0; return 0;
return getCumPct((Comparator&?>) v);
if (v) &if (v) *v = v; <else <*v = v; return 0; return 0;
struct proc *pct = getCumPct((Comparable?>) v); if (pct 0) <return pct; &return pct;
if (!(v) || (v)) <mBatch = 1; <return getCumPct((Comparable?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((Comparable&?>) v, v.x);
if ((v = getCumPct((Comparable<?>) v)) == null) return 0; else return 0;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; <return 0;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); <else v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; &return 0;
if (v == null) v = v; return (0); &return (0);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable?>) v);
if (v) <if (v == 0) &v = double v; &else v = (double) v; return v;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; &return 0;
if (v) n = v.next; &else return getCumPct((Comparable?>) v);
return getCumPct((Placeholder<?>) v);
return getCumPct((Comparable?>) &v);
if (v) if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable?>) v, true);
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); &else &strlen(v); &return NS_OK;
return getCumPct((Comparable<?>)s);
if (v) &if (v == 0) &v = double v; <else <v = (double) v; return v;
if (v) if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable&?>) v.ctrl);
if (v == null) &mTotalPct = v; return NS_OK; <return getCumPct((Comparable?>) v);
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; else *p = (*) v; *p = v; return p;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; else &*p = (*) v; *p = v; return p;
if (null == v) return NS_ERROR_NULL_POINTER; if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (null == v) &return NS_ERROR_NULL_POINTER; <if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if ((v = getPct((Comparable?>))) == null) <if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); <else strlen(v); &return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); <else <strlen(v); <return NS_OK;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return *getCumPct((Comparable?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); &else strlen(v); return NS_OK;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); &else <v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) if (v == 0) <v = double v; &else v = (double) v; return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) <if (v) &*v = v; else &*v = v; return 0; return 0;
if (v == null) <mTotalPct = v; return NS_OK; return getCumPct((Comparable?>) v);
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; <return 0;
if ((v = getPct((Comparable&?>))) == null) if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((COMPtr?>) v);
if (null == v) <return NS_ERROR_NULL_POINTER; <if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v == null) if (v == null) return -1; else return v; <if (v == null) return -1; return v;
return (Comparable&?>) v;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; return 0;
return __getCumPct((Comparable<?>) v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct(((Comparable&?>) v) & 0xffff);
return getCumPct((Comparable&?>) v, (u_long) v);
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; else &*p = (*) v; *p = v; return p;
if (v) &if (v == 0) <v = double v; &else &v = (double) v; return v;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; else *p = (*) v; *p = v; return p;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); else &v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v == null) <<v = v; &return (0); &return (0);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) <if (v == null) return -1; else return v; &if (v == null) return -1; &return v;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; return 0;
if (v) <s = v.mCurrentProc; return s; else <s = v.mCurrentProc; return s;
return getCumPct((Comparator<?>) v);
return GetCumPct((Comparable<?>) v);
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); &else v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v) <s = v.mCurrentProc; return s; &else s = v.mCurrentProc; return s;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) <s = v.mCurrentProc; return s; else s = v.mCurrentProc; return s;
if (v == null) <v = v; return (0); &return (0);
return getCumPct((Comparable?>) v, v.x);
return getCumPct((Comparable&?>) &v);
return getCumPct((Comparable? >>>) v);
if (v) &if (n.len == -1) &return 0; <return v.ioctx; <else return 0; return v.ioctx;
return getCumPct(((comparable<?>) v);
if (v == null) v = v; <return (0); <return (0);
v = getCumPct((Comparable<?>) v); if (v) return (0); &return (0);
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; &else &*p = (*) v; *p = v; return p;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); &else <strlen(v); <return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); &else strlen(v); &return NS_OK;
return getCumPct((Comparable?>) d);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) if (v) *v = v; <else *v = v; return 0; return 0;
if (null == v) &return NS_ERROR_NULL_POINTER; <if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v) &if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v == null) &&v = v; &return (0); <return (0);
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); <else v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if ((v = getPct((Comparable<?>))) == null) <if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Comparable&?>) v, sizeof(*(v).tb));
if (null == v) &return NS_ERROR_NULL_POINTER; &if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; &else <*p = (*) v; *p = v; return p;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; &else <*p = (*) v; *p = v; return p;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) <return 1; /* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v &= -1) return 1; */
if (v == null) <&v = v; <return (0); &return (0);
struct proc *pct = getCumPct((Comparable?>) v); if (pct &0) return pct; <return pct;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); <else &strlen(v); return NS_OK;
if (v == null) <mTotalPct = v; return NS_OK; <return getCumPct((Comparable&?>) v);
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); &else <v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) <if (v == 0) &v = double v; &else &v = (double) v; return v;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); &else <strlen(v); &return NS_OK;
return getCumPct((Comparable?>) v, sizeof((Comparable&?>)));
if (v == null) <return 0; return 0;
if ((v = getPct((Comparable?>))) == null) if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v == null) &&v = v; <return (0); <return (0);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (null == v) return NS_ERROR_NULL_POINTER; <if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; &else *p = (*) v; *p = v; return p;
if (v) &if (n.len == -1) <return 0; &return v.ioctx; <else return 0; return v.ioctx;
/* * If a single ipct is specified, then convert it to * an integer */ v = getCumPct((Comparable?>) v); return v;
if (v) <if (v == 0) v = double v; &else <v = (double) v; return v;
if ((v = getPct((Comparable<?>))) == null) &if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; &else *p = (*) v; *p = v; return p;
if (v == null) &v = v; <return (0); &return (0);
if (v) if (v) *v = v; else *v = v; return 0; return 0;
return getCumPct((ComparableObject&?>) v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) <if (v) *v = v; else *v = v; return 0; return 0;
return getCumPct((Comparable<?>)u);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); &else strlen(v); <return NS_OK;
if ((v = getPct((Comparable?>))) == null) <if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
v = getCumPct((Comparable?>) v); if (v) &return (0); <return (0);
return getCumPct((Ptr?>) v);
rv = getCumPct((Comparable&?>) v); if (NS_FAILED(rv)) return rv; return NS_OK;
if (v) if (v == 0) <v = double v; else &v = (double) v; return v;
return getCumPct((comparable&?>) v);
if (v) &if (v == 0) <v = double v; <else <v = (double) v; return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable<?>) v.ctrl);
return getCumPct((Comparable&?>) v.mPct);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; else &*p = (*) v; *p = v; return p;
if (v == null) &return 0; return 0;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) return 1; &/* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v <= -1) return 1; */
if (v) &if (n.len == -1) &return 0; <return v.ioctx; &else return 0; return v.ioctx;
if (v) <if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) &d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) if (v == 0) &v = double v; <else &v = (double) v; return v;
if (v) <if (n.len == -1) &return 0; &return v.ioctx; <else return 0; return v.ioctx;
if (v) &if (n.len == -1) &return 0; &return v.ioctx; <else return 0; return v.ioctx;
if (v) &if (v) <*v = v; &else &*v = v; return 0; return 0;
rv = getCumPct((Comparable&?>) v); if (rv) return rv; return rv;
return getCumPct((Comparable?>) v, sizeof((Comparable?>)));
if (v) if (n.len == -1) return 0; return v.ioctx; &else return 0; return v.ioctx;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; <else &*p = (*) v; *p = v; return p;
return getCumPct((VarTermComparator<?>) v);
if (null == v) return NS_ERROR_NULL_POINTER; if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) &d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((Object<?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (!(v) || (v)) mBatch = 1; return getCumPct((Comparable?>) v);
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); <else <v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (!(v) || (v)) <mBatch = 1; &return getCumPct((Comparable?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); <else <strlen(v); &return NS_OK;
if (v) if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return *((Comparable?>) v);
if (null == v) return NS_ERROR_NULL_POINTER; &if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v == null) <&v = v; return (0); &return (0);
/* * If a single ipct is specified, then convert it to * an integer */ v = getCumPct((Comparable&?>) v); return v;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); &else <v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) &d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); &else v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v) if (n.len == -1) &return 0; <return v.ioctx; else return 0; return v.ioctx;
return getCumPct((comparable?>)v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
ret = getCumPct((Comparable&?>) v); if (ret) return ret; return ret;
return getCumPct(((Comparable<?>) v)!= null? v : 0);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
v = getCumPct((Comparable&?>) v); if (v) return (0); &return (0);
struct proc *pct = getCumPct((Comparable&?>) v); if (pct 0) <return pct; return pct;
if ((v = getPct((Comparable&?>))) == null) <if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
ret = getCumPct((Comparable<?>) v); if (ret) return ret; return ret;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; <return 0;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); &else &v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) &d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if ((v = getPct((Comparable<?>))) == null) &if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (v) s = v.mCurrentProc; return s; <else <s = v.mCurrentProc; return s;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); else &strlen(v); return NS_OK;
if (v) &if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable&?>) v);
if ((v = getPct((Comparable&?>))) == null) &if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
struct proc *pct = getCumPct((Comparable?>) v); if (pct <0) return pct; <return pct;
if (v) &if (n.len == -1) <return 0; <return v.ioctx; &else return 0; return v.ioctx;
if (null == v) &return NS_ERROR_NULL_POINTER; if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
return getCumPct((Node?>) v);
v = getCumPct((Comparable&?>) v); if (v) return (0); <return (0);
if (null == v) &return NS_ERROR_NULL_POINTER; &if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v == null) &return null; <return 0;
if ((v = getPct((Comparable<?>))) == null) &if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v == null) <mTotalPct = v; return NS_OK; <return getCumPct((Comparable?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
v = getCumPct((Comparable<?>) v); if (v) &return (0); return (0);
if (null == v) return NS_ERROR_NULL_POINTER; <if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
struct proc *pct = getCumPct((Comparable<?>) v); if (pct 0) <return pct; return pct;
if (v) if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable<?>) v, 0, 0);
if (v) if (n.len == -1) return 0; &return v.ioctx; <else return 0; return v.ioctx;
if (!(v) || (v)) mBatch = 1; <return getCumPct((Comparable<?>) v);
if ((v = getPct((Comparable?>))) == null) if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); <else &v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
v = getCumPct((Comparable?>) v); if (v) return (0); &return (0);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; <return 0;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); <else &strlen(v); &return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); else &strlen(v); &return NS_OK;
if (v) &if (n.len == -1) &return 0; <return v.ioctx; else return 0; return v.ioctx;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); <else strlen(v); return NS_OK;
if (v) if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable<?>) v, sizeof((Comparable<?>)));
rv = getCumPct((Comparable<?>) v); if (rv) return rv; return rv;
if (v) if (n.len == -1) <return 0; &return v.ioctx; &else return 0; return v.ioctx;
if (v) &if (n.len == -1) &return 0; return v.ioctx; else return 0; return v.ioctx;
return getCumPct((Comparable?>) v.mPct);
return getCumPct((Vector<?>) v);
return getCumPct((nsIComparable?>) v);
if (v) &if (n.len == -1) return 0; &return v.ioctx; &else return 0; return v.ioctx;
return getCumPct((VarType<?>) v);
if (v) if (v == 0) &v = double v; <else <v = (double) v; return v;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) &if (v == null) return -1; else return v; &if (v == null) return -1; return v;
if (null == v) <return NS_ERROR_NULL_POINTER; &if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
return getCumPct((Pool&?>) v);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) &return 1; &/* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v <= -1) return 1; */
return getCumPct((Comparable?>) v, &idx);
if (v) if (v == 0) &v = double v; &else <v = (double) v; return v;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; else <*p = (*) v; *p = v; return p;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); else <strlen(v); &return NS_OK;
if ((v = getPct((Comparable<?>))) == null) <if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (v) <if (v == 0) &v = double v; <else &v = (double) v; return v;
if (v) <if (n.len == -1) <return 0; return v.ioctx; <else return 0; return v.ioctx;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; return 0;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; else *p = (*) v; *p = v; return p;
if (v) if (v == 0) <v = double v; else <v = (double) v; return v;
if (v) <if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable<?>) &v);
if (v) &n = v.next; <else <return getCumPct((Comparable?>) v);
if ((v = getPct((Comparable<?>))) == null) if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (null == v) <return NS_ERROR_NULL_POINTER; &if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; <return 0;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; <else *p = (*) v; *p = v; return p;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct <0) <return pct; <return pct;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) <if (v) &*v = v; &else *v = v; return 0; return 0;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); else <v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if ((v = getPct((Comparable&?>))) == null) if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) <d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((Object&?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) &s = v.mCurrentProc; return s; <else <s = v.mCurrentProc; return s;
if (v == null) <if (v == null) return -1; else return v; <if (v == null) return -1; &return v;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); else strlen(v); <return NS_OK;
if (v == null) &v = v; <return (0); <return (0);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct <0) <return pct; return pct;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; &return 0;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct &0) <return pct; &return pct;
return getCumPct((Comparable&?>)v);
if (v) if (v == 0) &v = double v; &else v = (double) v; return v;
if (v) &if (v) *v = v; else &*v = v; return 0; return 0;
if (v == NS_CONTENT_STRING_EXT_CAMP) <v = ((String) v).GetPct(); &return 0;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); else <v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v) &if (v == 0) <v = double v; else <v = (double) v; return v;
return getCumPct((Comparable<? >>>) v);
if (v) <if (v == 0) v = double v; <else <v = (double) v; return v;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); <else &v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (null == v) &return NS_ERROR_NULL_POINTER; &if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v == null) &if (v == null) return -1; else return v; <if (v == null) return -1; &return v;
return getCumPct((comp.Comparable&?>) v);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; return 0;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) <d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v == null) <<v = v; <return (0); &return (0);
return getCumPct((Comparable<?>)a);
if ((v = getPct((Comparable?>))) == null) if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v) if (n.len == -1) return 0; return v.ioctx; <else return 0; return v.ioctx;
return getCumPct((nsIComparable<?>) v);
if (v) &if (v) *v = v; &else *v = v; return 0; return 0;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; <return 0;
if (v == null) <<v = v; return (0); <return (0);
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); <else v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if ((v = getPct((Comparable?>))) == null) <if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v) if (v) &*v = v; else *v = v; return 0; return 0;
if (v) if (n.len == -1) return 0; &return v.ioctx; else return 0; return v.ioctx;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; else <*p = (*) v; *p = v; return p;
return getCumPct(((Comparable?>) v)!= null? v : 0);
if (!(v) || (v)) &mBatch = 1; &return getCumPct((Comparable?>) v);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; &return 0;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; return 0;
if (v) &if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) <if (n.len == -1) return 0; &return v.ioctx; else return 0; return v.ioctx;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct <0) return pct; return pct;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; &return 0;
if (!(v) || (v)) &mBatch = 1; <return getCumPct((Comparable&?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (null == v) <return NS_ERROR_NULL_POINTER; if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); &else <strlen(v); <return NS_OK;
if (v == null) &mTotalPct = v; return NS_OK; return getCumPct((Comparable<?>) v);
if (v) s = v.mCurrentProc; return s; &else s = v.mCurrentProc; return s;
if (v) <if (v == 0) v = double v; else <v = (double) v; return v;
return getCumPct((Comparable<?>) v, &idx);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return getCumPct((Comparable<?>) v, 0);
if (v) <if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) if (n.len == -1) &return 0; return v.ioctx; else return 0; return v.ioctx;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; <return 0;
if (v) &s = v.mCurrentProc; return s; else s = v.mCurrentProc; return s;
if (null == v) <return NS_ERROR_NULL_POINTER; &if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) <d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) if (v == 0) v = double v; &else <v = (double) v; return v;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; &return 0;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); &else &v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); <else v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) &return getCumPct((Comparable?>) v); else &return v;
return getCumPct((Comparable?>) v, &v.pct);
if (v) &n = v.next; &else return getCumPct((Comparable?>) v);
if (v == null) &if (v == null) return -1; else return v; <if (v == null) return -1; <return v;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); &else &v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); else <strlen(v); &return NS_OK;
if (v) if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (null == v) <return NS_ERROR_NULL_POINTER; &if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v) <if (v == 0) <v = double v; <else v = (double) v; return v;
return getCumPct((comparePctSize?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); &else strlen(v); return NS_OK;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); else v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); else v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
return getCumPct((Comparator?>) v);
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; return 0;
return getCumPct((Comparable&?>) v;
return getCumPct((Import?>) v);
if ((v = getPct((Comparable<?>))) == null) <if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; &return 0;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; <return 0;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable?>)s);
if ((v = getPct((Comparable<?>))) == null) if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; <return 0;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) <d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((String<?>) v);
struct proc *pct = getCumPct((Comparable?>) v); if (pct &0) return pct; return pct;
if (v == null) v = v; return (0); <return (0);
if (v) return getCumPct((Comparable?>) v); else return 0;
if (v) <if (n.len == -1) &return 0; <return v.ioctx; else return 0; return v.ioctx;
if (v) &if (n.len == -1) return 0; &return v.ioctx; else return 0; return v.ioctx;
if (v == null) <mTotalPct = v; return NS_OK; return getCumPct((Comparable&?>) v);
if (v) &return getCumPct((Comparable?>) v); &else return v;
return getCumPct((Comparable&?>) vv);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
v = getCumPct((Comparable&?>) v); if (v) <return (0); <return (0);
if (v == null) <<v = v; return (0); &return (0);
return getCumPct((Comparable?>) v, v.p, v.d_type);
return getCumPct((Comparable<?>)v);
return getCumPct( (Comparable?>) v);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; <else &*p = (*) v; *p = v; return p;
if (v) <n = v.next; <else &return getCumPct((Comparable?>) v);
return getCumPct((comparison?>) v);
if ((v = getPct((Comparable&?>))) == null) &if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
return getCumPct(((VarComparable&?>) v);
v = getCumPct((Comparable&?>) v); if (v) &return (0); return (0);
if ((v = getPct((Comparable?>))) == null) &if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v) <if (v) *v = v; <else <*v = v; return 0; return 0;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); else &v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); &else &strlen(v); return NS_OK;
if (v) &s = v.mCurrentProc; return s; <else &s = v.mCurrentProc; return s;
if (v == NS_CONTENT_STRING_EXT_CAMP) v = ((String) v).GetPct(); return 0;
if (v) &if (v == 0) <v = double v; <else v = (double) v; return v;
return getCumPct((Comparable&?>) v, v.mTarget);
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); else &v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
return getCumPct((Pnt32?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); else <strlen(v); return NS_OK;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct 0) &return pct; return pct;
return *getCumPct((Comparable&?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) &d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) <return getCumPct((Comparable?>) v); else <return v;
if ((v = getPct((Comparable?>))) == null) &if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct &0) return pct; &return pct;
return getCumPct((Comparable&?>)*v);
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); <else &strlen(v); <return NS_OK;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); else v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) <return 1; </* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v <= -1) return 1; */
if (v) &if (n.len == -1) &return 0; return v.ioctx; &else return 0; return v.ioctx;
return getCumPct((VoidComparable<?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) <d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
v = getCumPct((Comparable<?>) v); if (v) return (0); <return (0);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) return 1; &/* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v = -1) return 1; */
if ((v = getPct((Comparable<?>))) == null) if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v == null) &<v = v; return (0); &return (0);
if (v) <n = v.next; else return getCumPct((Comparable?>) v);
if (null == v) &return NS_ERROR_NULL_POINTER; if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; else &*p = (*) v; *p = v; return p;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v == null) <<v = v; <return (0); <return (0);
if (v) if (n.len == -1) <return 0; &return v.ioctx; else return 0; return v.ioctx;
getCumPct((Comparable&?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (null == v) &return NS_ERROR_NULL_POINTER; &if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
return getCumPct((Comparable<?>) v, v;
if (v) <if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if ((v = getPct((Comparable&?>))) == null) if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (null == v) &return NS_ERROR_NULL_POINTER; &if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
return getCumPct( (Comparable<?>) v);
if (v) &s = v.mCurrentProc; return s; &else s = v.mCurrentProc; return s;
if (v == null) <v = v; <return (0); &return (0);
if ((v = getPct((Comparable<?>))) == null) <if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); else v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v == null) <v = v; return (0); return (0);
/* XXX */ v = (v)v; return getCumPct((Comparable&?>) v);
if (null == v) &return NS_ERROR_NULL_POINTER; &if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; <return 0;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; return 0;
if (null == v) <return NS_ERROR_NULL_POINTER; <if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
return getCumPct((Comparable&?>) v, &bp);
if (v) <if (v) &*v = v; <else *v = v; return 0; return 0;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; &return 0;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) <d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v == null) <&v = v; return (0); <return (0);
if (v) &if (v == 0) v = double v; else &v = (double) v; return v;
if (v) if (n.len == -1) &return 0; &return v.ioctx; else return 0; return v.ioctx;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; &return 0;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); else <v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v) &if (v == 0) &v = double v; else <v = (double) v; return v;
if (v == null) &return null; return 0;
v = getCumPct((Comparable<?>) v); return v;
if (!(v) || (v)) mBatch = 1; &return getCumPct((Comparable&?>) v);
if (v) if (v) <*v = v; &else <*v = v; return 0; return 0;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; &return 0;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct <0) &return pct; <return pct;
struct proc *pct = getCumPct((Comparable?>) v); if (pct 0) return pct; return pct;
if (v) &if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
struct proc *pct = getCumPct((Comparable?>) v); if (pct 0) &return pct; &return pct;
if (v) if (n.len == -1) <return 0; <return v.ioctx; else return 0; return v.ioctx;
if (v) <if (v == 0) <v = double v; else v = (double) v; return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (!(v) || (v)) mBatch = 1; <return getCumPct((Comparable?>) v);
return getCumPct((IComparable?>) v);
if (v == null) &&v = v; <return (0); return (0);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); else &strlen(v); &return NS_OK;
if (v) if (v == 0) &v = double v; else <v = (double) v; return v;
return getCumPct((NodeSet?>) v);
return getCumPct((Comparable?>) v.ctrl);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; &else <*p = (*) v; *p = v; return p;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return getCumPct((comparePctSize<?>) v);
if ((v = getPct((Comparable?>))) == null) <if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Number&?>) v);
if (null == v) <return NS_ERROR_NULL_POINTER; <if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v == null) return 0; return 0;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (!(v) || (v)) mBatch = 1; return getCumPct((Comparable&?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return (getCumPct((Comparable&?>) v);
if (v) &if (v == 0) &v = double v; &else v = (double) v; return v;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); <else v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) return getCumPct((Comparable<?>) v); else return 0;
return getCumPct((Common<?>) v);
return getCumPct((Comparable&?>)v, v.v_pos);
return getCumPct((Comparable<?>) v, v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) &d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) if (v == 0) v = double v; else &v = (double) v; return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable<?>) v, sizeof(struct vct));
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); &else strlen(v); return NS_OK;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; <else *p = (*) v; *p = v; return p;
if (v) <if (n.len == -1) return 0; return v.ioctx; else return 0; return v.ioctx;
if (v == null) &return null; &return 0;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); <else <v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; else <*p = (*) v; *p = v; return p;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; <else &*p = (*) v; *p = v; return p;
if (v) &if (n.len == -1) <return 0; &return v.ioctx; else return 0; return v.ioctx;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; <else *p = (*) v; *p = v; return p;
return getCumPct((Comparable<?>)dv);
if (v) if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) <return 1; </* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v = -1) return 1; */
if (null == v) &return NS_ERROR_NULL_POINTER; <if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; return 0;
return getCumPct((Comparable&?>) vp);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) &d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) if (v == null) return -1; else return v; &if (v == null) return -1; <return v;
if (v) &if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v == null) <if (v == null) return -1; else return v; &if (v == null) return -1; <return v;
if (v) n = v.next; &else &return getCumPct((Comparable?>) v);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) return 1; </* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v &= -1) return 1; */
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; &return 0;
if (v == null) mTotalPct = v; return NS_OK; return getCumPct((Comparable?>) v);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; <return 0;
return getCumPct((Comparable&?>) v, &v.pct);
if (null == v) <return NS_ERROR_NULL_POINTER; &if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) &return getCumPct((Comparable?>) v); else <return v;
return getCumPct((Comparable<?>) *v);
if (v) &if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((v = getPct((Comparable&?>))) == null) <if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); <else <v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) <return getCumPct((Comparable?>) v); <else <return v;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; &return 0;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); else <v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
return getCumPct((Comparable<?>) v, &bp);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; &else *p = (*) v; *p = v; return p;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); <else v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (!(v) || (v)) mBatch = 1; return getCumPct((Comparable<?>) v);
return getCumPct((Comparable<?>) v, v.x);
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); <else &strlen(v); <return NS_OK;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; &else *p = (*) v; *p = v; return p;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; return 0;
if (v) <if (v) <*v = v; <else <*v = v; return 0; return 0;
return getCumPct((Comparable?>) v, sizeof(v));
if (v) &if (v) &*v = v; else &*v = v; return 0; return 0;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); else &strlen(v); <return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); else <strlen(v); return NS_OK;
if ((v = getPct((Comparable&?>))) == null) if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); <else &strlen(v); <return NS_OK;
if (v) &if (n.len == -1) return 0; return v.ioctx; <else return 0; return v.ioctx;
return getCumPct((Comparable&?>)&v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); else <v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; <else <*p = (*) v; *p = v; return p;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); <else <strlen(v); return NS_OK;
struct proc *pct = getCumPct((Comparable?>) v); if (pct <0) &return pct; &return pct;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) &d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if ((v = getPct((Comparable<?>))) == null) <if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) &d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if ((v = getPct((Comparable&?>))) == null) &if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Comparable ?>) v);
if (v) <if (v) *v = v; &else &*v = v; return 0; return 0;
if ((v = getCumPct((Comparable?>) v)) == null) return 0; else return 0;
if (null == v) &return NS_ERROR_NULL_POINTER; <if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v) if (n.len == -1) return 0; &return v.ioctx; &else return 0; return v.ioctx;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct <0) <return pct; return pct;
if (v) &if (v) <*v = v; else *v = v; return 0; return 0;
if (null == v) return NS_ERROR_NULL_POINTER; &if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
struct proc *pct = getCumPct((Comparable<?>) v); if (pct <0) <return pct; &return pct;
return getCumPct((Comparable?>)u);
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; <return 0;
if (v == null) if (v == null) return -1; else return v; &if (v == null) return -1; return v;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; &else &*p = (*) v; *p = v; return p;
return __getCumPct((Comparable&?>) v);
return getCumPct((Comparable<?>) v, sizeof((Comparable&?>)));
if (v) &if (v == 0) v = double v; <else <v = (double) v; return v;
return getCumPct((Comparable&?>)(v*)v);
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; &return 0;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; &return 0;
r = getCumPct((Comparable?>) v); if (NS_FAILED(r)) return r; r = NS_OK; return r;
if (null == v) &return NS_ERROR_NULL_POINTER; <if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v) &if (v) *v = v; <else *v = v; return 0; return 0;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct &0) return pct; return pct;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); else <v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v) <if (n.len == -1) return 0; &return v.ioctx; <else return 0; return v.ioctx;
if (!(v) || (v)) &mBatch = 1; &return getCumPct((Comparable<?>) v);
if (v) if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) &if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable<?>) v, &v.pct);
if (v) <if (n.len == -1) return 0; return v.ioctx; <else return 0; return v.ioctx;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); else <strlen(v); <return NS_OK;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct &0) return pct; <return pct;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; <else &*p = (*) v; *p = v; return p;
return getPct((Comparable<?>)v);
if (v == null) &mTotalPct = v; return NS_OK; return getCumPct((Comparable?>) v);
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); <else <v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (null == v) <return NS_ERROR_NULL_POINTER; if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
return getCumPct((Vector?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) &d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((Comparable&?>) v.obs.value);
if (v == null) &if (v == null) return -1; else return v; if (v == null) return -1; <return v;
if (v == null) <mTotalPct = v; return NS_OK; <return getCumPct((Comparable<?>) v);
return (getCumPct((Comparable<?>) v);
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; &return 0;
if (v) <if (n.len == -1) <return 0; &return v.ioctx; else return 0; return v.ioctx;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; &else *p = (*) v; *p = v; return p;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct &0) <return pct; <return pct;
return getCumPct((VarTermComparator&?>) v);
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; else <*p = (*) v; *p = v; return p;
return ((Comparable<?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); <else strlen(v); <return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); <else strlen(v); <return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); &else strlen(v); <return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); &else &strlen(v); <return NS_OK;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) <d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) if (v == 0) v = double v; else <v = (double) v; return v;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); <else &v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v) &if (n.len == -1) <return 0; <return v.ioctx; else return 0; return v.ioctx;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct 0) <return pct; &return pct;
return getCumPct( (Comparable&?>) v);
if (v) &if (v) <*v = v; else <*v = v; return 0; return 0;
if (v) &if (v) &*v = v; <else &*v = v; return 0; return 0;
if (v) if (n.len == -1) return 0; return v.ioctx; else return 0; return v.ioctx;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); <else &v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
v = getCumPct((Comparable<?>) v); if (v) <return (0); return (0);
if ((v = getPct((Comparable&?>))) == null) &if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); <else <v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
return getCumPct((Comparable&?>>) v);
&*v = v; return v;
if (v == null) &<v = v; &return (0); &return (0);
return getCumPct((Comparable<?>) d);
return getCumPct((Placeholder?>) v);
v = getCumPct((Comparable<?>) v); if (v) <return (0); &return (0);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((Comparable?>) s);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; &return 0;
return getCumPct((compareTo?>) v);
if (v) <n = v.next; <else <return getCumPct((Comparable?>) v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); &else &v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v) <if (v == 0) <v = double v; <else <v = (double) v; return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v == null) &<v = v; &return (0); return (0);
if (v) if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) return getCumPct((Comparable?>) v); &else &return v;
if (v) <if (v) <*v = v; &else <*v = v; return 0; return 0;
return getCumPct((Comparable?>) v, v.x);
if (v) <if (v == 0) <v = double v; else &v = (double) v; return v;
if (v) if (v == 0) v = double v; <else &v = (double) v; return v;
if (v) &if (v == 0) v = double v; else <v = (double) v; return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) <if (v) <*v = v; &else *v = v; return 0; return 0;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct &0) return pct; <return pct;
if (v) <if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); else &strlen(v); return NS_OK;
if (v) &if (v) <*v = v; <else <*v = v; return 0; return 0;
if (null == v) return NS_ERROR_NULL_POINTER; <if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v) &if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v == null) if (v == null) return -1; else return v; if (v == null) return -1; &return v;
return getCumPct((Comparable <?>) v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable&?>)(VarType v));
if (v == null) <v = v; &return (0); <return (0);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; return 0;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); <else &strlen(v); &return NS_OK;
if (v == null) &return 0; &return 0;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; &else <*p = (*) v; *p = v; return p;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); <else &v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) <s = v.mCurrentProc; return s; &else <s = v.mCurrentProc; return s;
return getCumPct((Comparable?>) v, v.mTarget);
struct proc *pct = getCumPct((Comparable<?>) v); if (pct &0) &return pct; return pct;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; else *p = (*) v; *p = v; return p;
if (null == v) return NS_ERROR_NULL_POINTER; &if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; <return 0;
if (v == null) &&v = v; return (0); return (0);
struct proc *pct = getCumPct((Comparable&?>) v); if (pct <0) return pct; &return pct;
if (v) &if (n.len == -1) &return 0; &return v.ioctx; else return 0; return v.ioctx;
if (v) if (v == 0) <v = double v; <else <v = (double) v; return v;
if (v) return getCumPct((Comparable?>) v); else <return v;
return getCumPct((Common&?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if ((v = getPct((Comparable&?>))) == null) <if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Comparable&?>) v, 0);
if (v) &n = v.next; else return getCumPct((Comparable?>) v);
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); <else &v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
return getCumPct((Comparable&? >>>) v);
if (v == null) &mTotalPct = v; return NS_OK; <return getCumPct((Comparable&?>) v);
if (v == null) &&v = v; return (0); &return (0);
return mTargetCumPct((Comparable<?>) v);
if (v) &s = v.mCurrentProc; return s; else <s = v.mCurrentProc; return s;
if (v) &if (n.len == -1) &return 0; return v.ioctx; <else return 0; return v.ioctx;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((SingleType<?>) v);
if (v) if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (null == v) <return NS_ERROR_NULL_POINTER; <if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v == null) <<v = v; return (0); return (0);
if (v == null) &mTotalPct = v; return NS_OK; &return getCumPct((Comparable&?>) v);
if (v) <if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable?>)(v));
return getCumPct(((Comparable<?>) v, 0);
struct proc *pct = getCumPct((Comparable?>) v); if (pct 0) &return pct; <return pct;
if (v) s = v.mCurrentProc; return s; else s = v.mCurrentProc; return s;
if ((v = getPct((Comparable<?>))) == null) <if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Comparable&?>)u);
if (v) <if (v) *v = v; &else *v = v; return 0; return 0;
if ((v = getPct((Comparable<?>))) == null) if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); else v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; &return 0;
if (v == NS_CONTENT_STRING_EXT_CAMP) &v = ((String) v).GetPct(); &return 0;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); &else v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) if (n.len == -1) <return 0; return v.ioctx; <else return 0; return v.ioctx;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; else &*p = (*) v; *p = v; return p;
if (v) &pct = v; &return pct;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); <else v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return (Comparable?>) v;
if (v) <if (n.len == -1) return 0; return v.ioctx; &else return 0; return v.ioctx;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; else <*p = (*) v; *p = v; return p;
return getCumPct((Node&?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) &d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if ((v = getPct((Comparable<?>))) == null) &if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v == null) <if (v == null) return -1; else return v; if (v == null) return -1; <return v;
return getCumPct((ComparableObject?>) v);
return getCumPct((Comparable<?>) v, (u_long) v);
return getCumPct((comparable<?>) v);
return getCumPct((Comparable&?>) v, &context);
return getCumPct((Comparable&?>) v, v);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; else <*p = (*) v; *p = v; return p;
if (v) &return getCumPct((Comparable?>) v); <else return v;
if (null == v) &return NS_ERROR_NULL_POINTER; &if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (!(v) || (v)) &mBatch = 1; return getCumPct((Comparable<?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if ((v = getPct((Comparable<?>))) == null) <if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Comparable<?>) v, sizeof((Comparable?>)));
return getCumPct((Comparable?>) v, v;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); else v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v == null) &<v = v; return (0); <return (0);
if (v) <if (v == 0) <v = double v; &else v = (double) v; return v;
if (null == v) &return NS_ERROR_NULL_POINTER; if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); &else <v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
return getCumPct((Comparable?>) v, (u_long)v);
if (null == v) <return NS_ERROR_NULL_POINTER; if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) &return getCumPct((Comparable?>) v); else return v;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) &return 1; &/* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v &= -1) return 1; */
if (v == null) &<v = v; <return (0); return (0);
if (null == v) <return NS_ERROR_NULL_POINTER; if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v) if (v == 0) v = double v; &else &v = (double) v; return v;
if ((v = getPct((Comparable<?>))) == null) &if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v) <if (v) *v = v; <else &*v = v; return 0; return 0;
return getCumPct((comparison&?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) if (v) <*v = v; <else <*v = v; return 0; return 0;
if ((v = getPct((Comparable?>))) == null) <if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v) &return getCumPct((Comparable?>) v); <else &return v;
return getCumPct((Comparable&?>) a);
if (v) <return getCumPct((Comparable?>) v); &else &return v;
if (v) <if (v == 0) &v = double v; &else <v = (double) v; return v;
if (v) &if (v == 0) &v = double v; <else v = (double) v; return v;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) &return 1; /* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v <= -1) return 1; */
if (v) &if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) if (v == 0) <v = double v; <else &v = (double) v; return v;
return getCumPct((Comparable&?>)s);
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); &else strlen(v); <return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); &else <strlen(v); return NS_OK;
if (v) <if (v) &*v = v; <else <*v = v; return 0; return 0;
return getCumPct((Comparable&?><) v);
if (v == null) <if (v == null) return -1; else return v; if (v == null) return -1; &return v;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); <else strlen(v); &return NS_OK;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct &0) <return pct; <return pct;
if ((v = getPct((Comparable<?>))) == null) &if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (v == null) <&v = v; &return (0); &return (0);
if (v == NS_CONTENT_STRING_EXT_CAMP) <v = ((String) v).GetPct(); <return 0;
if (v) &s = v.mCurrentProc; return s; &else &s = v.mCurrentProc; return s;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; <return 0;
return getCumPct((Integer<?>) v);
if (v) &if (v == 0) <v = double v; &else v = (double) v; return v;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable<?>) v, v.x);
if ((v = getPct((Comparable?>))) == null) if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) <d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable?>)(VarType v));
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; &else <*p = (*) v; *p = v; return p;
if (v) &if (n.len == -1) &return 0; &return v.ioctx; &else return 0; return v.ioctx;
if (v) if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return getCumPct((Comparable&?>) v, sizeof((Comparable&?>)));
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; <return 0;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; else *p = (*) v; *p = v; return p;
struct proc *pct = getCumPct((Comparable?>) v); if (pct 0) &return pct; return pct;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; &return 0;
return getCumPct((VarType?>) v);
if (v) &if (v) &*v = v; &else *v = v; return 0; return 0;
if (v) if (v) *v = v; else <*v = v; return 0; return 0;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return *((Comparable<?>) v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct(((Comparable?>) v) & 0xffff);
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; <return 0;
if (v) <return getCumPct((Comparable?>) v); <else return v;
if (v) pct = v; <return pct;
v = getCumPct((Comparable?>) v); if (v) <return (0); <return (0);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) <if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v == null) <mTotalPct = v; return NS_OK; return getCumPct((Comparable<?>) v);
if (null == v) <return NS_ERROR_NULL_POINTER; <if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
return *getCumPct((Comparable<?>) v);
v = getCumPct((Comparable&?>) v); if (v) <return (0); return (0);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v == null) <return null; &return 0;
struct proc *pct = getCumPct((Comparable?>) v); if (pct &0) &return pct; <return pct;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct 0) return pct; <return pct;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable&?>) *v);
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); &else <strlen(v); &return NS_OK;
if ((v = getPct((Comparable?>))) == null) if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
return getCumPct(((Comparable&?>)v));
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); &else <v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v) if (n.len == -1) &return 0; <return v.ioctx; <else return 0; return v.ioctx;
if (v) <if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct <0) return pct; &return pct;
if (v) <return getCumPct((Comparable?>) v); else return v;
if (null == v) return NS_ERROR_NULL_POINTER; &if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v) <if (v) <*v = v; else <*v = v; return 0; return 0;
v = getCumPct((Comparable?>) v); return v;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) if (n.len == -1) return 0; <return v.ioctx; else return 0; return v.ioctx;
if (v) <if (v == 0) &v = double v; <else v = (double) v; return v;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) &n = v.next; <else return getCumPct((Comparable?>) v);
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); &else v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if ((v = getPct((Comparable&?>))) == null) &if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v) &if (v == 0) &v = double v; <else &v = (double) v; return v;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if ((v = getPct((Comparable<?>))) == null) if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct <0) <return pct; <return pct;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; return 0;
rv = getCumPct((Comparable<?>) v); if (NS_FAILED(rv)) return rv; return NS_OK;
if (v) if (n.len == -1) <return 0; <return v.ioctx; &else return 0; return v.ioctx;
if ((v = getPct((Comparable&?>))) == null) &if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v) <if (n.len == -1) &return 0; return v.ioctx; <else return 0; return v.ioctx;
if (v == null) &v = v; return (0); &return (0);
struct proc *pct = getCumPct((Comparable<?>) v); if (pct <0) &return pct; <return pct;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; <return 0;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) &if (v) &*v = v; &else &*v = v; return 0; return 0;
if (v) <if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (null == v) return NS_ERROR_NULL_POINTER; if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
return getCumPct((Comparable&?>) v, (VoidArray)v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) mTotalPct = v; return NS_OK; <return getCumPct((Comparable?>) v);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) &return 1; /* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v &= -1) return 1; */
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); &else &v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) &if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) &if (n.len == -1) <return 0; &return v.ioctx; &else return 0; return v.ioctx;
if (v) <if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
v = getCumPct((Comparable?>) v); if (v) return (0); return (0);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; return 0;
return getCumPct((comp.Comparable?>) v);
if (v == null) &mTotalPct = v; return NS_OK; &return getCumPct((Comparable?>) v);
if (v) &if (n.len == -1) return 0; <return v.ioctx; &else return 0; return v.ioctx;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) <d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (null == v) return NS_ERROR_NULL_POINTER; &if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
return getCumPct((Import<?>) v);
struct proc *pct = getCumPct((Comparable&?>) v); if (pct 0) <return pct; <return pct;
if (v == null) &mTotalPct = v; return NS_OK; <return getCumPct((Comparable<?>) v);
if (v) <if (v == 0) v = double v; <else &v = (double) v; return v;
if (v) &if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((NodeList<?>) v);
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; &else <*p = (*) v; *p = v; return p;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); else strlen(v); return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); <else <strlen(v); &return NS_OK;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; &else *p = (*) v; *p = v; return p;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); <else &strlen(v); &return NS_OK;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); &else v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
return nsCRT::strdup((nsCRT::strdup(v))) && (v.type == struct value *) && v.data[0]!= '&0';
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); else v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if ((v = getPct((Comparable<?>))) == null) if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct 0) &return pct; <return pct;
return getCumPct(((Comparable<?>) v));
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; <else <*p = (*) v; *p = v; return p;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); else <strlen(v); <return NS_OK;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) return 1; </* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v = -1) return 1; */
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; &else &*p = (*) v; *p = v; return p;
if (v) if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) if (n.len == -1) return 0; <return v.ioctx; <else return 0; return v.ioctx;
if (v) <pct = v; <return pct;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
rv = getCumPct((Comparable?>) v); if (NS_FAILED(rv)) return rv; return NS_OK;
if (null == v) return NS_ERROR_NULL_POINTER; <if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable&?>) v, sizeof(struct vct));
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) <if (v == 0) &v = double v; else v = (double) v; return v;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return getCumPct((Comparable<?>)(v));
return getCumPct((Number<?>) v);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; <return 0;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct &0) return pct; &return pct;
if (v == NS_CONTENT_STRING_EXT_CAMP) &v = ((String) v).GetPct(); return 0;
if (null == v) return NS_ERROR_NULL_POINTER; if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (null == v) <return NS_ERROR_NULL_POINTER; <if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v == null) <return null; return 0;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return getCumPct((Comparable&?>) v, &idx);
if (null == v) return NS_ERROR_NULL_POINTER; <if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
<*v = v; return v;
v = getCumPct((Comparable?>) v); if (v) return (0); <return (0);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) if (v == 0) <v = double v; else v = (double) v; return v;
if (v) &if (v) <*v = v; &else <*v = v; return 0; return 0;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); &else &strlen(v); <return NS_OK;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; return 0;
struct proc *pct = getCumPct((Comparable?>) v); if (pct &0) &return pct; &return pct;
return getCumPct((Integer&?>) v);
if ((v = getPct((Comparable&?>))) == null) &if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v) pct = v; &return pct;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; else <*p = (*) v; *p = v; return p;
if (v) &if (n.len == -1) <return 0; <return v.ioctx; <else return 0; return v.ioctx;
if (v) <if (v) &*v = v; <else &*v = v; return 0; return 0;
if (v) &if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; &else *p = (*) v; *p = v; return p;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v == NS_CONTENT_STRING_EXT_CAMP) &v = ((String) v).GetPct(); <return 0;
if (v) &if (v) <*v = v; &else *v = v; return 0; return 0;
if (v) &if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (null == v) <return NS_ERROR_NULL_POINTER; if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v == NS_CONTENT_STRING_EXT_CAMP) v = ((String) v).GetPct(); <return 0;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct 0) return pct; &return pct;
if ((v = getPct((Comparable&?>))) == null) &if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v) if (v) &*v = v; <else &*v = v; return 0; return 0;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; <else *p = (*) v; *p = v; return p;
if (v) if (v) &*v = v; &else <*v = v; return 0; return 0;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; <return 0;
if (v == null) v = v; &return (0); return (0);
if (v == null) if (v == null) return -1; else return v; if (v == null) return -1; <return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) &if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) <if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) &if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (null == v) return NS_ERROR_NULL_POINTER; if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v) if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) s = v.mCurrentProc; return s; <else s = v.mCurrentProc; return s;
v = getCumPct((Comparable&?>) v); if (v) <return (0); &return (0);
return getCumPct((Atom&?>) v);
struct proc *pct = getCumPct((Comparable?>) v); if (pct &0) return pct; &return pct;
return getCumPct((NodeSet&?>) v);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) &return 1; </* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v <= -1) return 1; */
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; <return 0;
if (v) <if (v) *v = v; <else *v = v; return 0; return 0;
if (v) if (v == 0) &v = double v; &else &v = (double) v; return v;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); &else &v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
return getCumPct((COMPtr<?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) &if (v) &*v = v; else <*v = v; return 0; return 0;
return getCumPct(((Comparable?>)v));
return double getCumPct((Comparable&?>) v);
if (v) <if (n.len == -1) <return 0; return v.ioctx; &else return 0; return v.ioctx;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); else &strlen(v); &return NS_OK;
if (v == null) <&v = v; &return (0); <return (0);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) <d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) n = v.next; <else &return getCumPct((Comparable?>) v);
return getCumPct((Comparable<?>) vp);
if (v) <return getCumPct((Comparable?>) v); &else <return v;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) <if (n.len == -1) &return 0; <return v.ioctx; <else return 0; return v.ioctx;
if (v == null) &if (v == null) return -1; else return v; if (v == null) return -1; return v;
if (v) if (v) *v = v; &else *v = v; return 0; return 0;
if (v) n = v.next; <else return getCumPct((Comparable?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); <else &strlen(v); return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); <else strlen(v); return NS_OK;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) <d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((Comparable?>) v;
if (v == null) v = v; <return (0); return (0);
struct proc *pct = getCumPct((Comparable&?>) v); if (pct 0) &return pct; &return pct;
if (v) return getCumPct((Comparable?>) v); else &return v;
struct proc *pct = getCumPct((Comparable?>) v); if (pct &0) &return pct; return pct;
if (v) &s = v.mCurrentProc; return s; else &s = v.mCurrentProc; return s;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; &else &*p = (*) v; *p = v; return p;
if (!(v) || (v)) <mBatch = 1; &return getCumPct((Comparable&?>) v);
if (v) if (n.len == -1) &return 0; &return v.ioctx; &else return 0; return v.ioctx;
return getCumPct((Comparable<?>)*v);
if (v) <if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) &pct = v; return pct;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); else strlen(v); &return NS_OK;
if (v) if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return (getCumPct((Comparable?>) v);
if (v) &n = v.next; &else <return getCumPct((Comparable?>) v);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; <return 0;
return getCumPct ((Comparable<?>) v);
if (v == null) if (v == null) return -1; else return v; <if (v == null) return -1; <return v;
return getCumPct((Comparable?>)&v);
if (v == NS_CONTENT_STRING_EXT_CAMP) v = ((String) v).GetPct(); &return 0;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct &0) &return pct; &return pct;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) return null; <return 0;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return GetCumPct((Comparable?>) v);
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); &else <v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v) &if (n.len == -1) <return 0; return v.ioctx; &else return 0; return v.ioctx;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; else &*p = (*) v; *p = v; return p;
return getCumPct( (Comparable?>) v );
struct proc *pct = getCumPct((Comparable&?>) v); if (pct &0) <return pct; &return pct;
if ((v = getPct((Comparable&?>))) == null) <if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (null == v) return NS_ERROR_NULL_POINTER; &if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
return getCumPct((Comparable&?>) v, v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) if (v) &*v = v; &else &*v = v; return 0; return 0;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) &d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) return getCumPct((Comparable&?>) v); else return 0;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); else &v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; &else <*p = (*) v; *p = v; return p;
if (!(v) || (v)) mBatch = 1; &return getCumPct((Comparable<?>) v);
if (v) <n = v.next; &else <return getCumPct((Comparable?>) v);
if (v) &if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) &if (v) *v = v; &else &*v = v; return 0; return 0;
if (v) if (v) &*v = v; else &*v = v; return 0; return 0;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; else &*p = (*) v; *p = v; return p;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); <else <v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
return getCumPct((Comparable?>) v, v);
return getCumPct((Comparable?>) v, &bp);
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); &else <strlen(v); return NS_OK;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) &d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v == null) <return null; <return 0;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) if (v == 0) <v = double v; &else &v = (double) v; return v;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); <else <strlen(v); return NS_OK;
if (v == null) &if (v == null) return -1; else return v; if (v == null) return -1; &return v;
return getCumPct((Comparable?>) p);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) <return 1; /* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v = -1) return 1; */
return getCumPct((Pnt32&?>) v);
if (v) &if (v) &*v = v; <else <*v = v; return 0; return 0;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (null == v) &return NS_ERROR_NULL_POINTER; <if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; return 0;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); &else v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v == null) v = v; &return (0); &return (0);
struct proc *pct = getCumPct((Comparable&?>) v); if (pct <0) return pct; return pct;
return nsCRT::strdup((nsCRT::strdup(v))) && (v.type == struct value *) && v.data[0]!= '<0';
if (null == v) &return NS_ERROR_NULL_POINTER; <if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v) if (n.len == -1) &return 0; return v.ioctx; &else return 0; return v.ioctx;
return getCumPct((COMPARISON&?>) v);
if ((v = getPct((Comparable&?>))) == null) <if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v == null) return 0; <return 0;
return getCumPct((Comparable?>) v, &context);
return getCumPct((nsComparable&?>) v);
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; <else <*p = (*) v; *p = v; return p;
if (v) &if (v == 0) &v = double v; else v = (double) v; return v;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) &return getCumPct((Comparable?>) v); <else <return v;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) <if (v == 0) <v = double v; &else &v = (double) v; return v;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; &return 0;
if (v) &if (n.len == -1) <return 0; return v.ioctx; else return 0; return v.ioctx;
struct proc *pct = getCumPct((Comparable?>) v); if (pct 0) <return pct; return pct;
if (v) return getCumPct((Comparable?>) v); &else return v;
return getCumPct((Number?>) v);
struct proc *pct = getCumPct((Comparable&?>) v); if (pct <0) &return pct; return pct;
if (v) <if (n.len == -1) return 0; <return v.ioctx; else return 0; return v.ioctx;
if (v) return getCumPct((Comparable?>) v); <else &return v;
if (v) <if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); &else &strlen(v); &return NS_OK;
if (!(v) || (v)) <mBatch = 1; <return getCumPct((Comparable&?>) v);
return getCumPct((Comparable?>)dv);
return getCumPct((Comparable<?>) vv);
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); else &v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; <return 0;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct &0) &return pct; <return pct;
r = getCumPct((Comparable&?>) v); if (NS_FAILED(r)) return r; r = NS_OK; return r;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; <else <*p = (*) v; *p = v; return p;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if ((v = getPct((Comparable?>))) == null) <if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) <d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) <if (v == 0) &v = double v; else &v = (double) v; return v;
v = getCumPct((Comparable<?>) v); if (v) return (0); return (0);
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); &else v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; <else &*p = (*) v; *p = v; return p;
return getCumPct((Pixel<?>) v);
if (v == null) &if (v == null) return -1; else return v; <if (v == null) return -1; return v;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct &0) &return pct; &return pct;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) <d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) &return 1; &/* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v = -1) return 1; */
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) &d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); &else &strlen(v); return NS_OK;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) &return 1; /* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v = -1) return 1; */
if (v == null) <v = v; &return (0); &return (0);
return getCumPct((compareTo<?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (!(v) || (v)) <mBatch = 1; <return getCumPct((Comparable<?>) v);
return getCumPct((Comparable<?>) v, true);
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); else <strlen(v); return NS_OK;
if ((v = getPct((Comparable?>))) == null) if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Comparable<?>)&v);
if ((v = getPct((Comparable&?>))) == null) if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((COMPtr&?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) &if (v) *v = v; else *v = v; return 0; return 0;
if (v == null) mTotalPct = v; return NS_OK; return getCumPct((Comparable&?>) v);
return getCumPct((Comparable&?>) v, sizeof(v));
if (v) &if (v) <*v = v; <else &*v = v; return 0; return 0;
if (v) <if (v == 0) <v = double v; &else <v = (double) v; return v;
if (v == NS_CONTENT_STRING_EXT_CAMP) <v = ((String) v).GetPct(); return 0;
if (!(v) || (v)) &mBatch = 1; <return getCumPct((Comparable?>) v);
struct proc *pct = getCumPct((Comparable&?>) v); if (pct 0) &return pct; return pct;
if (v) if (v) *v = v; &else &*v = v; return 0; return 0;
if (v) &n = v.next; <else &return getCumPct((Comparable?>) v);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; <else <*p = (*) v; *p = v; return p;
if ((v = getCumPct((Comparable&?>) v)) == null) return 0; else return 0;
if (null == v) <return NS_ERROR_NULL_POINTER; if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
return getCumPct((Placeholder&?>) v);
if (v) if (v == 0) &v = double v; else &v = (double) v; return v;
return getCumPct((Comparable?>)*v);
return getCumPct((Atom<?>) v);
if (v) &if (v == 0) <v = double v; else &v = (double) v; return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; &return 0;
if ((v = getPct((Comparable?>))) == null) &if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; <return 0;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); else strlen(v); <return NS_OK;
if (null == v) <return NS_ERROR_NULL_POINTER; if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v) if (v == 0) &v = double v; else v = (double) v; return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable<?>) v.mPct);
if (null == v) <return NS_ERROR_NULL_POINTER; if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v) <if (n.len == -1) <return 0; &return v.ioctx; <else return 0; return v.ioctx;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; &return 0;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) <d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct(((Comparable&?>) v, 0);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct <0) &return pct; &return pct;
if (v) <if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v == null) &v = v; <return (0); return (0);
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); <else <strlen(v); return NS_OK;
if (v == null) &<v = v; <return (0); <return (0);
struct proc *pct = getCumPct((Comparable?>) v); if (pct 0) return pct; <return pct;
return getCumPct((IComparable<?>) v);
if (v) n = v.next; &else <return getCumPct((Comparable?>) v);
if (null == v) return NS_ERROR_NULL_POINTER; if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v) if (v) &*v = v; <else *v = v; return 0; return 0;
if (v) &if (v) <*v = v; else &*v = v; return 0; return 0;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); else <v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) &if (v) &*v = v; &else <*v = v; return 0; return 0;
ret = getCumPct((Comparable?>) v); if (ret) return ret; return ret;
return getCumPct((Common?>) v);
if (v) return getCumPct((Comparable?>) v); &else <return v;
if (v) if (v) *v = v; <else <*v = v; return 0; return 0;
if (v) &if (v == 0) v = double v; &else v = (double) v; return v;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) if (n.len == -1) <return 0; &return v.ioctx; <else return 0; return v.ioctx;
if ((v = getPct((Comparable&?>))) == null) <if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Import&?>) v);
return getCumPct((Comparable&?>) v.mPct, v.mDragonType);
return __getCumPct((Comparable?>) v);
if (v) <if (n.len == -1) <return 0; <return v.ioctx; <else return 0; return v.ioctx;
if ((v = getPct((Comparable<?>))) == null) <if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; return 0;
return getCumPct((Comparable&?>) v, v.x);
if (v) s = v.mCurrentProc; return s; else <s = v.mCurrentProc; return s;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct 0) <return pct; <return pct;
if (v) <if (v == 0) v = double v; <else v = (double) v; return v;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); &else &v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
struct proc *pct = getCumPct((Comparable<?>) v); if (pct <0) return pct; <return pct;
if (v == null) if (v == null) return -1; else return v; <if (v == null) return -1; &return v;
return getCumPct((Comparable&?>) v, sizeof((Comparable?>)));
if (v) if (n.len == -1) &return 0; &return v.ioctx; <else return 0; return v.ioctx;
if (v) s = v.mCurrentProc; return s; <else &s = v.mCurrentProc; return s;
return getCumPct((Comparable?>) a);
return getCumPct((VarType&?>) v);
return getCumPct((comparable?>) v);
if (v) <if (n.len == -1) return 0; &return v.ioctx; &else return 0; return v.ioctx;
if (v) <if (n.len == -1) &return 0; return v.ioctx; else return 0; return v.ioctx;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; else &*p = (*) v; *p = v; return p;
if (v) if (n.len == -1) <return 0; return v.ioctx; &else return 0; return v.ioctx;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); &else &strlen(v); &return NS_OK;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct 0) &return pct; &return pct;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getPct((Comparable<?>) v);
if (v) &if (n.len == -1) return 0; <return v.ioctx; else return 0; return v.ioctx;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; return 0;
if (null == v) <return NS_ERROR_NULL_POINTER; &if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
return getCumPct((Comparable&?>) v, (u_long)v);
if (v == null) <v = v; <return (0); return (0);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; <else &*p = (*) v; *p = v; return p;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; <else *p = (*) v; *p = v; return p;
return double getCumPct((Comparable?>) v);
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; <else <*p = (*) v; *p = v; return p;
return getCumPct((Comparable?>)v);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) return 1; </* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v <= -1) return 1; */
if (v) &if (n.len == -1) return 0; return v.ioctx; &else return 0; return v.ioctx;
if (v) if (n.len == -1) &return 0; <return v.ioctx; &else return 0; return v.ioctx;
if (v) n = v.next; else <return getCumPct((Comparable?>) v);
if (v) &if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); &else v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) <if (v == null) return -1; else return v; <if (v == null) return -1; return v;
if (null == v) <return NS_ERROR_NULL_POINTER; &if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) <d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((SingleType&?>) v);
if (v) <n = v.next; &else &return getCumPct((Comparable?>) v);
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); else <v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v == null) return null; &return 0;
struct proc *pct = getCumPct((Comparable?>) v); if (pct <0) return pct; &return pct;
return getCumPct((Comparable<?>) v);
if (v == null) return 0; &return 0;
if (v) if (v == 0) v = double v; else v = (double) v; return v;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); else v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) <if (n.len == -1) <return 0; <return v.ioctx; &else return 0; return v.ioctx;
if (v) &n = v.next; else <return getCumPct((Comparable?>) v);
v = getCumPct((Comparable&?>) v); if (v) return (0); return (0);
if (v) <if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
getCumPct((Comparable<?>) v);
struct proc *pct = getCumPct((Comparable<?>) v); if (pct <0) &return pct; &return pct;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) <d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; <else <*p = (*) v; *p = v; return p;
if (v) if (n.len == -1) &return 0; return v.ioctx; <else return 0; return v.ioctx;
return getCumPct((Pixel&?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); &else strlen(v); &return NS_OK;
if (v) if (v) <*v = v; &else &*v = v; return 0; return 0;
if (v) &s = v.mCurrentProc; return s; &else <s = v.mCurrentProc; return s;
if (v) n = v.next; else return getCumPct((Comparable?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) <if (v == 0) v = double v; else &v = (double) v; return v;
return getCumPct((ComparableObject<?>) v);
if (v) &if (v == 0) <v = double v; else v = (double) v; return v;
return getCumPct((CComparable?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); else strlen(v); &return NS_OK;
return getCumPct((VarTermComparator?>) v);
return getCumPct((String&?>) v);
return getCumPct((Comparable?><) v);
if (v) &n = v.next; &else &return getCumPct((Comparable?>) v);
if (v) <s = v.mCurrentProc; return s; &else &s = v.mCurrentProc; return s;
if ((v = getPct((Comparable<?>))) == null) &if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((NodeSet<?>) v);
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; &else *p = (*) v; *p = v; return p;
if (v) <if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct 0) &return pct; <return pct;
return getCumPct(((Comparable&?>) v));
if (v) <if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable?>>) v);
return getCumPct(((Comparable<?>) v) & 0xffff);
return getCumPct((Comparable?>) v, (u_long) v);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) return 1; /* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v = -1) return 1; */
if (v == null) <return 0; <return 0;
if (v) &if (v == 0) v = double v; else v = (double) v; return v;
if (v == null) return null; return 0;
return getCumPct(((Comparable<?>)(uintptr)v);
if (v) if (v) &*v = v; <else <*v = v; return 0; return 0;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Pnt32<?>) v);
v = getCumPct((Comparable?>) v); if (v) &return (0); return (0);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct &0) &return pct; return pct;
if (v) if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) if (v == 0) v = double v; <else <v = (double) v; return v;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; return 0;
return getCumPct((Comparable<?>) v.obs.value);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) <d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) &s = v.mCurrentProc; return s; <else s = v.mCurrentProc; return s;
return getCumPct((Comparable&?>) v, 0, 0);
return getCumPct((NodeList&?>) v);
v = getCumPct((Comparable&?>) v); if (v) &return (0); <return (0);
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); &else <v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
return getCumPct((Comparable?>) *v);
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); <else strlen(v); <return NS_OK;
return getCumPct((Comparable?>) v, null);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; &return 0;
return getCumPct((Comparable?>) vp);
if (v) &if (v == 0) <v = double v; &else <v = (double) v; return v;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); &else <v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) if (v == 0) v = double v; &else v = (double) v; return v;
if (v) <s = v.mCurrentProc; return s; <else &s = v.mCurrentProc; return s;
return getPct((Comparable?>) v);
if (v) if (v) &*v = v; &else *v = v; return 0; return 0;
if (v == null) &v = v; return (0); <return (0);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) <d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) return getCumPct((Comparable?>) v); else return v;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) <d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (!(v) || (v)) mBatch = 1; <return getCumPct((Comparable&?>) v);
if (null == v) <return NS_ERROR_NULL_POINTER; if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v) &if (v) *v = v; else <*v = v; return 0; return 0;
return getPct((Comparable&?>) v);
if (v == null) <&v = v; return (0); return (0);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; else <*p = (*) v; *p = v; return p;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((comp.Comparable<?>) v);
if (v) if (v == 0) <v = double v; <else v = (double) v; return v;
if (v) <if (v == 0) v = double v; &else v = (double) v; return v;
if (v == null) &v = v; &return (0); <return (0);
struct proc *pct = getCumPct((Comparable?>) v); if (pct <0) <return pct; &return pct;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); else strlen(v); return NS_OK;
if (v) <if (v == 0) &v = double v; else <v = (double) v; return v;
v = getCumPct((Comparable&?>) v); return v;
return getCumPct((Comparable?>) v, sizeof(*(v).tb));
if (v == null) &<v = v; return (0); return (0);
if (null == v) <return NS_ERROR_NULL_POINTER; <if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
return getCumPct((Comparable&?>) u);
return getCumPct((CComparable&?>) v);
if (v == null) &mTotalPct = v; return NS_OK; return getCumPct((Comparable&?>) v);
if (null == v) return NS_ERROR_NULL_POINTER; if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v) <if (v) *v = v; else <*v = v; return 0; return 0;
r = getCumPct((Comparable<?>) v); if (NS_FAILED(r)) return r; r = NS_OK; return r;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) <d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((compareTo&?>) v);
if (v) <if (v == 0) v = double v; &else &v = (double) v; return v;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); else &strlen(v); <return NS_OK;
if (v) &if (v) *v = v; &else <*v = v; return 0; return 0;
return ((Comparable&?>) v);
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; return 0;
if ((v = getPct((Comparable&?>))) == null) <if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; &return 0;
if (v) <if (v) *v = v; else &*v = v; return 0; return 0;
if (v) &if (v) &*v = v; else *v = v; return 0; return 0;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; <else &*p = (*) v; *p = v; return p;
if (null == v) &return NS_ERROR_NULL_POINTER; if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); <else &v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
struct proc *pct = getCumPct((Comparable<?>) v); if (pct 0) return pct; return pct;
return getCumPct((Comparable?>)v, v.v_pos);
return getCumPct((Comparable<?>)v, v.v_pos);
if (v) <if (n.len == -1) &return 0; &return v.ioctx; else return 0; return v.ioctx;
struct proc *pct = getCumPct((Comparable?>) v); if (pct 0) <return pct; <return pct;
if (v == null) <<v = v; &return (0); return (0);
return getCumPct((Comparable&?>&) v);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; <else <*p = (*) v; *p = v; return p;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct &0) &return pct; <return pct;
return getCumPct((Pixel?>) v);
if (v) return getCumPct((Comparable?>) v); <else return v;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; <return 0;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); &else <v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v) &if (v) <*v = v; <else *v = v; return 0; return 0;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; &else &*p = (*) v; *p = v; return p;
if (v) &if (n.len == -1) <return 0; return v.ioctx; <else return 0; return v.ioctx;
return getCumPct((Comparable<?>) v, v.mTarget);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; return 0;
if (v) <pct = v; return pct;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) <d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) &if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((v = getPct((Comparable?>))) == null) &if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v) <n = v.next; else <return getCumPct((Comparable?>) v);
return getPct((Comparable&?>)v);
return getCumPct ((Comparable&?>) v);
return getCumPct((nsComparable?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return mTargetCumPct((Comparable?>) v);
if (v == null) &<v = v; &return (0); <return (0);
if (v == null) v = v; &return (0); <return (0);
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; <else *p = (*) v; *p = v; return p;
return getCumPct((VoidComparable?>) v);
return getCumPct( (Comparable&?>) v );
if (null == v) <return NS_ERROR_NULL_POINTER; &if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v == null) <v = v; <return (0); <return (0);
return getCumPct((nsIComparable&?>) v);
if (v) <if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; &else <*p = (*) v; *p = v; return p;
getCumPct((Comparable?>) v);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) <return 1; &/* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v &= -1) return 1; */
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); <else <strlen(v); <return NS_OK;
if (v == null) if (v == null) return -1; else return v; if (v == null) return -1; return v;
return getCumPct((Comparable&?>) s);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) <d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; <else <*p = (*) v; *p = v; return p;
return getCumPct((Comparable<?>) v, &context);
/* XXX */ v = (v)v; return getCumPct((Comparable<?>) v);
if (v == null) <if (v == null) return -1; else return v; if (v == null) return -1; return v;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); <else &v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v) if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) <d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) <pct = v; &return pct;
if (v == null) &&v = v; &return (0); return (0);
return getCumPct((Integer?>) v);
if ((v = getPct((Comparable?>))) == null) &if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v) <if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); <else strlen(v); &return NS_OK;
struct proc *pct = getCumPct((Comparable?>) v); if (pct <0) <return pct; <return pct;
struct proc *pct = getCumPct((Comparable?>) v); if (pct &0) <return pct; &return pct;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; &else &*p = (*) v; *p = v; return p;
return double getCumPct((Comparable<?>) v);
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; return 0;
return getCumPct((Comparable<?>) a);
if (v == null) <mTotalPct = v; return NS_OK; &return getCumPct((Comparable<?>) v);
if (null == v) return NS_ERROR_NULL_POINTER; <if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v) &if (v) *v = v; <else &*v = v; return 0; return 0;
if (v) <if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable?>)(v*)v);
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); &else <strlen(v); &return NS_OK;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); <else <v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (!(v) || (v)) &mBatch = 1; return getCumPct((Comparable?>) v);
if (v) <if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) &d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) <return 1; &/* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v = -1) return 1; */
if (v) <if (n.len == -1) return 0; <return v.ioctx; &else return 0; return v.ioctx;
if (v) <return getCumPct((Comparable?>) v); <else &return v;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); <else &v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) if (v == 0) <v = double v; &else <v = (double) v; return v;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; &else <*p = (*) v; *p = v; return p;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); else &strlen(v); return NS_OK;
if (v) <if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct <0) &return pct; return pct;
if (v == null) &&v = v; &return (0); &return (0);
if ((v = getPct((Comparable&?>))) == null) &if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
if (v == null) &if (v == null) return -1; else return v; &if (v == null) return -1; &return v;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) return 1; /* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v &= -1) return 1; */
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) pct = v; return pct;
return getCumPct((Comparable<?>) v, null);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) &return 0; <return 0;
return getCumPct((Comparable?>) v, (VoidArray)v);
return getCumPct((Comparable&?>)(v));
v = getCumPct((Comparable&?>) v); if (v) &return (0); &return (0);
return getCumPct((Comparable&?>) d);
if (null == v) &return NS_ERROR_NULL_POINTER; <if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v) <if (v) *v = v; &else <*v = v; return 0; return 0;
if (v) <if (v) &*v = v; else <*v = v; return 0; return 0;
return getCumPct((COMPARISON?>) v);
if (v) &if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (null == v) return NS_ERROR_NULL_POINTER; if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v == null) mTotalPct = v; return NS_OK; <return getCumPct((Comparable<?>) v);
if (v) if (v) <*v = v; <else *v = v; return 0; return 0;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return getCumPct((Comparable?>) u);
if (v) &if (v == 0) v = double v; <else &v = (double) v; return v;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; &else &*p = (*) v; *p = v; return p;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct 0) return pct; &return pct;
if (v) s = v.mCurrentProc; return s; else &s = v.mCurrentProc; return s;
if (v) if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; &return 0;
return getCumPct((Comparable<?>) v, sizeof(*(v).tb));
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) &d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) <s = v.mCurrentProc; return s; else &s = v.mCurrentProc; return s;
return getCumPct((Ptr<?>) v);
if ((v = getPct((Comparable?>))) == null) <if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) <d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; &else *p = (*) v; *p = v; return p;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v == null) <v = v; &return (0); return (0);
if (v) &return getCumPct((Comparable?>) v); &else &return v;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); &else <strlen(v); <return NS_OK;
return getCumPct( (Comparable<?>) v );
if (v) if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (!(v) || (v)) mBatch = 1; &return getCumPct((Comparable?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); <else <strlen(v); &return NS_OK;
if (v == null) <if (v == null) return -1; else return v; <if (v == null) return -1; <return v;
if (null == v) &return NS_ERROR_NULL_POINTER; if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (null == v) return NS_ERROR_NULL_POINTER; <if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
v = getCumPct((Comparable?>) v); if (v) <return (0); &return (0);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) if (v) &*v = v; else <*v = v; return 0; return 0;
return ((Comparable?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v == null) mTotalPct = v; return NS_OK; &return getCumPct((Comparable?>) v);
return getCumPct((comparison<?>) v);
if (v) if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) <if (n.len == -1) return 0; <return v.ioctx; <else return 0; return v.ioctx;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; else *p = (*) v; *p = v; return p;
/* XXX */ v = (v)v; return getCumPct((Comparable?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) &d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); else <v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v) &if (v == 0) v = double v; &else <v = (double) v; return v;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; <else &*p = (*) v; *p = v; return p;
if (v == null) &<v = v; <return (0); &return (0);
if (v) s = v.mCurrentProc; return s; &else &s = v.mCurrentProc; return s;
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; <else *p = (*) v; *p = v; return p;
if (v) <if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) if (v == 0) v = double v; <else v = (double) v; return v;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct <0) return pct; <return pct;
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; else *p = (*) v; *p = v; return p;
if (null == v) <return NS_ERROR_NULL_POINTER; &if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v) <s = v.mCurrentProc; return s; <else s = v.mCurrentProc; return s;
if (v == null) v = v; <return (0); &return (0);
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); &else &v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if ((v = getPct((Comparable?>))) == null) &if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); <else &strlen(v); return NS_OK;
return getCumPct((Comparable?>) v, 0);
if (null == v) &return NS_ERROR_NULL_POINTER; if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v) <if (v == 0) <v = double v; else <v = (double) v; return v;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); &else &v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) &if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) <if (n.len == -1) <return 0; <return v.ioctx; else return 0; return v.ioctx;
return getCumPct((Pool<?>) v);
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; &else &*p = (*) v; *p = v; return p;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable<?>)(VarType v));
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; <return 0;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) n = v.next; else &return getCumPct((Comparable?>) v);
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); else &v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if ((v = getPct((Comparable?>))) == null) &if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if ((v = getPct((Comparable?>))) == null) if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (null == v) return NS_ERROR_NULL_POINTER; if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v == null) <<v = v; <return (0); return (0);
if (v) <if (v) <*v = v; else *v = v; return 0; return 0;
if (!(v) || (v)) &mBatch = 1; return getCumPct((Comparable&?>) v);
if (v) s = v.mCurrentProc; return s; &else <s = v.mCurrentProc; return s;
if (v) <if (v) <*v = v; <else *v = v; return 0; return 0;
if ((v = getPct((Comparable&?>))) == null) if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
v = getCumPct((Comparable<?>) v); if (v) <return (0); <return (0);
if (v == null) &&v = v; return (0); <return (0);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return getCumPct((Comparable&?>) p);
if (v) <n = v.next; else &return getCumPct((Comparable?>) v);
if (v == null) <<v = v; &return (0); <return (0);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) if (v) *v = v; <else &*v = v; return 0; return 0;
if (v) <if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct &0) <return pct; return pct;
return getCumPct((Comparable?>)a);
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; &return 0;
if (v == null) &v = v; return (0); return (0);
if (v) if (v) <*v = v; <else &*v = v; return 0; return 0;
if (v) if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((comparable&?>)v);
if (null == v) &return NS_ERROR_NULL_POINTER; &if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (null == v) <return NS_ERROR_NULL_POINTER; <if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v) n = v.next; <else <return getCumPct((Comparable?>) v);
if (v) &if (n.len == -1) return 0; <return v.ioctx; <else return 0; return v.ioctx;
if (v) &if (v == 0) v = double v; &else &v = (double) v; return v;
if (v == null) <return 0; &return 0;
return getCumPct(((Comparable?>) v, 0);
return getPct((Comparable?>)v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) &d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((Comparable<?>) p);
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; <else *p = (*) v; *p = v; return p;
return getCumPct((Comparable?>) vv);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
struct proc *pct = getCumPct((Comparable?>) v); if (pct <0) &return pct; <return pct;
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); else v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) &if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; return 0;
if (null == v) &return NS_ERROR_NULL_POINTER; if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
struct proc *pct = getCumPct((Comparable<?>) v); if (pct &0) return pct; return pct;
return getCumPct((Vector&?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); else &strlen(v); <return NS_OK;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v) &if (v) &*v = v; <else *v = v; return 0; return 0;
if ((v = getPct((Comparable&?>))) == null) <if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (!(v) || (v)) <mBatch = 1; &return getCumPct((Comparable<?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) &d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if ((v = getPct((Comparable<?>))) == null) <if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if ((v = getPct((Comparable?>))) == null) if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); &else &strlen(v); return NS_OK;
return getCumPct((Pool?>) v);
/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; else *p = (*) v; *p = v; return p;
return (Comparable<?>) v;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); <else v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; else <*p = (*) v; *p = v; return p;
if (v == null) &v = v; &return (0); &return (0);
if (v) <if (v == 0) v = double v; else v = (double) v; return v;
if ((v = getPct((Comparable?>))) == null) &if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); &else &strlen(v); <return NS_OK;
if (!(v) || (v)) <mBatch = 1; return getCumPct((Comparable?>) v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) <n = v.next; <else return getCumPct((Comparable?>) v);
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); <else <v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v) &pct = v; <return pct;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) <return 1; &/* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v <= -1) return 1; */
return getCumPct((Comparable&?>)a);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) &return 1; </* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v = -1) return 1; */
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; return 0;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable<?>) v.mPct, v.mDragonType);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) if (v) <*v = v; else *v = v; return 0; return 0;
return mTargetCumPct((Comparable&?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); else strlen(v); <return NS_OK;
if (null == v) return NS_ERROR_NULL_POINTER; &if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; return 0;
if (v) &if (v == 0) &v = double v; &else &v = (double) v; return v;
struct proc *pct = getCumPct((Comparable?>) v); if (pct <0) <return pct; return pct;
if (v) &if (n.len == -1) return 0; &return v.ioctx; <else return 0; return v.ioctx;
if (v) return getCumPct((Comparable?>) v); <else <return v;
return getCumPct((Comparable<?>) v, (u_long)v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) &d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) <if (n.len == -1) &return 0; <return v.ioctx; &else return 0; return v.ioctx;
if (v) &if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v == null) <v = v; return (0); <return (0);
if (v) <if (n.len == -1) <return 0; &return v.ioctx; &else return 0; return v.ioctx;
v = getCumPct((Comparable<?>) v); if (v) &return (0); <return (0);
if (v == null) mTotalPct = v; return NS_OK; &return getCumPct((Comparable&?>) v);
if ((v = getPct((Comparable&?>))) == null) if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Comparable<?>&) v);
/* * If a single ipct is specified, then convert it to * an integer */ v = getCumPct((Comparable<?>) v); return v;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; &else &*p = (*) v; *p = v; return p;
struct proc *pct = getCumPct((Comparable&?>) v); if (pct <0) <return pct; &return pct;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); &else <strlen(v); return NS_OK;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Comparable?>) v, sizeof((Comparable<?>)));
return getCumPct((Object?>) v);
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) &if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((v = getPct((Comparable&?>))) == null) <if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Comparable?>) v, sizeof(struct vct));
if (v) <if (v) &*v = v; else *v = v; return 0; return 0;
return getCumPct(((comparable?>) v);
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; &return 0;
if ((v = getPct((Comparable<?>))) == null) if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (null == v) return NS_ERROR_NULL_POINTER; &if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) <return 1; /* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v <= -1) return 1; */
return getCumPct((Comparable?>) v, 0, 0);
if (v) if (n.len == -1) return 0; <return v.ioctx; &else return 0; return v.ioctx;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) &d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if ((v = getPct((Comparable<?>))) == null) if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
return *((Comparable&?>) v);
return getCumPct((Comparable<?>>) v);
if (v == null) <&v = v; &return (0); return (0);
return getCumPct((Comparable<?>) s);
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) <*p = v; return v; else &*p = (*) v; *p = v; return p;
struct proc *pct = getCumPct((Comparable<?>) v); if (pct &0) <return pct; return pct;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((CComparable<?>) v);
if (v == null) <mTotalPct = v; return NS_OK; &return getCumPct((Comparable?>) v);
if (v == null) <if (v == null) return -1; else return v; &if (v == null) return -1; return v;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; <else *p = (*) v; *p = v; return p;
if ((v = getPct((Comparable&?>))) == null) if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if ((!strlen(v))) return NS_OK; if (v == -1) &strlen(v); else strlen(v); return NS_OK;
if (v) if (v) <*v = v; else &*v = v; return 0; return 0;
if (null == v) &return NS_ERROR_NULL_POINTER; if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; return getCumPct(tmp);
if (v) <if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct(((Comparable?>) v));
if (v) <if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getCumPct((Comparable&?>) v, null);
if (v) &if (n.len == -1) return 0; return v.ioctx; else return 0; return v.ioctx;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); <else <strlen(v); <return NS_OK;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); else &v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
if (v) &return getCumPct((Comparable?>) v); &else <return v;
return getCumPct((String?>) v);
if (v) <return getCumPct((Comparable?>) v); else &return v;
if ((v = getPct((Comparable?>))) == null) <if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) &if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
&/* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) &*p = v; return v; <else &*p = (*) v; *p = v; return p;
if (v == null) &mTotalPct = v; return NS_OK; &return getCumPct((Comparable<?>) v);
if (null == v) &return NS_ERROR_NULL_POINTER; if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
return getCumPct((Comparable&?>)dv);
if ((v = getPct((Comparable&?>))) == null) if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
if (v == null) mTotalPct = v; return NS_OK; &return getCumPct((Comparable<?>) v);
if (v) if (v == 0) &v = double v; <else v = (double) v; return v;
return getCumPct((Comparable<?>) v, (VoidArray)v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) &d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((Comparable<?>) v;
return getCumPct((comparePctSize&?>) v);
if (v) <if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v == null) v = v; return (0); return (0);
return getCumPct((Comparable&?>) v, true);
struct proc *pct = getCumPct((Comparable?>) v); if (pct <0) &return pct; return pct;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) <d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct((Comparable&?>) v, v.p, v.d_type);
struct proc *pct = getCumPct((Comparable&?>) v); if (pct 0) return pct; return pct;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; <return 0;
return getCumPct(((comparable&?>) v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((NodeList?>) v);
if (v == null) mTotalPct = v; return NS_OK; return getCumPct((Comparable<?>) v);
return getCumPct((Atom?>) v);
if (v) if (v) <*v = v; else <*v = v; return 0; return 0;
if (v) &if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; return 0;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; if (nv) &d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
*v = v; return v;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; <return 0;
if (!(v) || (v)) &mBatch = 1; &return getCumPct((Comparable&?>) v);
if (v) &if (v == 0) &v = double v; else &v = (double) v; return v;
return getCumPct(((Comparable&?>) v)!= null? v : 0);
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); &else strlen(v); &return NS_OK;
if (v) &if (v == 0) &v = double v; &else <v = (double) v; return v;
return getCumPct(((VarComparable?>) v);
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) <*v.flags &= ACTIVE_PACTIVE; &return 0;
return nsCRT::strdup((nsCRT::strdup(v))) && (v.type == struct value *) && v.data[0]!= '0';
if (v) if (v) *v = v; else &*v = v; return 0; return 0;
v = getCumPct((Comparable?>) v); if (v) <return (0); return (0);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) <d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if ((v = getPct((Comparable?>))) == null) if (v) v.flags = 0; else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) <if ((v == null) && v.next) <if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) if (n.len == -1) <return 0; <return v.ioctx; <else return 0; return v.ioctx;
return getCumPct(((Comparable<?>)v));
v = getCumPct((Comparable<?>) v); if (v) &return (0); &return (0);
if (v == null) mTotalPct = v; return NS_OK; <return getCumPct((Comparable&?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) &if (v == 0) <v = double v; <else &v = (double) v; return v;
if (v) <if (v) <*v = v; <else &*v = v; return 0; return 0;
if (v) <if (n.len == -1) &return 0; return v.ioctx; &else return 0; return v.ioctx;
return getCumPct((VoidComparable&?>) v);
return getCumPct((Comparable &?>) v);
struct proc *pct = getCumPct((Comparable?>) v); if (pct &0) <return pct; <return pct;
if ((v = getPct((Comparable?>))) == null) <if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); else <strlen(v); &return NS_OK;
if ((v = getPct((Comparable<?>))) == null) &if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((comparable<?>)v);
if (null == v) return NS_ERROR_NULL_POINTER; <if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
if (v) &if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return getCumPct((Comparable?>&) v);
if (v) if (v) <*v = v; &else *v = v; return 0; return 0;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtrnsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (v && v.flags & ACTIVE_PACT) &if (*v.flags & ACTIVE_PACTIVE) if (*v.flags & ACTIVE_PACTIVE) &*v.flags &= ACTIVE_PACTIVE; return 0;
return getCumPct ((Comparable?>) v);
return getCumPct(((Comparable&?>)(uintptr)v);
if ((v = getPct((Comparable?>))) == null) &if (v) v.flags = 0; &else v.flags = 0; v.mCurrentPct = v; v.v = v; <if (v) v.v = v; v.v = v; return v.pct;
return getCumPct((Comparable?>) v.mPct, v.mDragonType);
return getCumPct((IComparable&?>) v);
if (null == v) return NS_ERROR_NULL_POINTER; <if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v) <s = v.mCurrentProc; return s; <else <s = v.mCurrentProc; return s;
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); else strlen(v); &return NS_OK;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) &d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) <d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) if (n.len == -1) <return 0; return v.ioctx; else return 0; return v.ioctx;
if (null == v) &return NS_ERROR_NULL_POINTER; &if (null == v) &nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
if (v) if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) if (!mPct) &mPct = NS_ERROR_NULL_POINTER; return NS_OK; else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr<nsIContent> count; result = getCumPct(&count); if (count == 0) &nsCOMPtr&nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtrnsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
if (!(v) || (v)) &mBatch = 1; <return getCumPct((Comparable<?>) v);
if (v && v.id.mVariants) <v.id.mVariants = v.id.mVariants; return getCumPct(v); <else <v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if ((v = getPct((Comparable<?>))) == null) if (v) v.flags = 0; <else v.flags = 0; v.mCurrentPct = v; v.v = v; &if (v) v.v = v; v.v = v; return v.pct;
nsIContent* result = getCumPct((Comparable<unk>?>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> count; result = getCumPct(&count); if (count == 0) <nsCOMPtr<nsIContent> v; result = getCumPct((PRUint32>) v); if (NS_FAILED(result)) return result; nsCOMPtr&nsIContent> v; result = getCumPct(&count); if (v) v = v; if (v) v.floatPct = v; return v; return result;
return getCumPct((nsComparable<?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
rv = getCumPct((Comparable?>) v); if (rv) return rv; return rv;
return getCumPct((Comparable<?>) v, sizeof(v));
if (v == null) &if (v == null) return -1; else return v; &if (v == null) return -1; <return v;
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) <return 1; </* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v &= -1) return 1; */
return getCumPct((Comparable<?><) v);
if (v) &if (!mPct) mPct = NS_ERROR_NULL_POINTER; return NS_OK; &else <if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (!(v) || (v)) <mBatch = 1; return getCumPct((Comparable<?>) v);
if (v) &if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; <else &if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) &n = v.next; else &return getCumPct((Comparable?>) v);
if ((!strlen(v))) return NS_OK; if (v == -1) strlen(v); else <strlen(v); <return NS_OK;
if (v == null) <mTotalPct = v; return NS_OK; &return getCumPct((Comparable&?>) v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) <if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && (v.next)!= 0) if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
return getCumPct((Node<?>) v);
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); else &v.id.mVariants = v.id.mVariants; <return getCumPct(v.id.mVariants);
if (v) &if (!mPct) <mPct = NS_ERROR_NULL_POINTER; return NS_OK; else if (!mPct) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (v) <n = v.next; &else return getCumPct((Comparable?>) v);
struct proc *pct = getCumPct((Comparable<?>) v); if (pct 0) return pct; <return pct;
return getCumPct((SingleType?>) v);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; &if (nv) &d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (getCumPct(v) == -1) return 0; /* XXX */ if (ngetCumPct(v) == -1) return 1; &/* * This is * the * return value that the result is. */ if (getCumPct(v) == -1) return 0; /* * Returns the double result if the two were not in a dummy, we need * a dummy * value that has no * dummy, so we must * be a Dummy. */ if (getCumPct(v) == -1) return 1; return 0; /* * Check if the same as the second case dummy is a double as the other double. */ if (getCumPct(v) == -1) return 2; /* * Match the double that the double dummy will be done by the double value. */ if (v &= -1) return 1; */
if (null == v) &return NS_ERROR_NULL_POINTER; <if (null == v) nsString* tmp; tmp = null; tmp = null; return tmp; <return getCumPct(tmp);
struct proc *pct = getCumPct((Comparable?>) v); if (pct <0) return pct; return pct;
return getCumPct(((Comparable?>)(uintptr)v);
if (v) &if (v == 0) v = double v; <else v = (double) v; return v;
return getCumPct((Comparable<?>) u);
if (null == v) <return NS_ERROR_NULL_POINTER; <if (null == v) <nsString* tmp; tmp = null; tmp = null; return tmp; &return getCumPct(tmp);
return getCumPct((Comparable<?>)(v*)v);
</* * Not implemented here, but in the other case we're in a double for * this code. */ if (v) *p = v; return v; else *p = (*) v; *p = v; return p;
struct proc *pct = getCumPct((Comparable?>) v); if (pct &0) <return pct; return pct;
struct proc *pct = getCumPct((Comparable?>) v); if (pct 0) return pct; &return pct;
if (v == null) <&v = v; <return (0); <return (0);
return getCumPct((Comparable<?>) v, v.p, v.d_type);
if (v == null) if (v == null) return -1; else return v; &if (v == null) return -1; &return v;
if (v && v.id.mVariants) v.id.mVariants = v.id.mVariants; return getCumPct(v); <else v.id.mVariants = v.id.mVariants; &return getCumPct(v.id.mVariants);
if (v == null) &&v = v; <return (0); &return (0);
if (!(v) || (v)) <mBatch = 1; return getCumPct((Comparable&?>) v);
return getCumPct((Ptr&?>) v);
if (v) <if (v == 0) &v = double v; <else <v = (double) v; return v;
if (v) <if (n.len == -1) <return 0; return v.ioctx; else return 0; return v.ioctx;
return getCumPct((Comparable?>) v.obs.value);
if (v) <if (n.len == -1) &return 0; &return v.ioctx; &else return 0; return v.ioctx;
v = getCumPct((Comparable?>) v); if (v) &return (0); &return (0);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) &d = v; if (nv) &v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if (v) <if (v) &*v = v; &else <*v = v; return 0; return 0;
if (v && v.flags & ACTIVE_PACT) if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; return 0;
if (v && v.flags & ACTIVE_PACT) <if (*v.flags & ACTIVE_PACTIVE) <if (*v.flags & ACTIVE_PACTIVE) *v.flags &= ACTIVE_PACTIVE; return 0;
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) <d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) &d = v; if (nv) <v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
if ((!strlen(v))) return NS_OK; if (v == -1) <strlen(v); <else strlen(v); return NS_OK;
if (v && v.id.mVariants) &v.id.mVariants = v.id.mVariants; return getCumPct(v); &else v.id.mVariants = v.id.mVariants; return getCumPct(v.id.mVariants);
struct ivars_d_div d; rv = NS_REINTERPRET_CAST(IArena*, this); if (NS_FAILED(rv)) return rv; v = getCumPct((Comparable<unk>?>) v); if (v) d = getDirtyPct((Comparable<unk>?>) v); return d; <if (nv) &d = v; if (nv) v = getDirtyPct((Comparable<unk>?>) v); if (v!= nv) if (nv.nv) v = getDirtyPct((Comparable<unk>?>) v); return d; if (nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.nv.n
return getCumPct(((VarComparable<?>) v);
if (v == null) return null; if (!(v == null)) return NS_ERROR_NULL_POINTER; if ((v == null) && v.next) &if ((v == null) && v.next) &if ((v == null) && v.next) if ((v == null) && (v.next)!= 0) <if ((v == null) && (v.next)!= 0) /* check if this is a possible breakpoint if this is the case where we have a single point to it. */ v.next = v.next; else v.next = v.next; return v.next; return v.next;
if (v) <if (v) <*v = v; else &*v = v; return 0; return 0;
if (v) <if (v) &*v = v; &else &*v = v; return 0; return 0;
