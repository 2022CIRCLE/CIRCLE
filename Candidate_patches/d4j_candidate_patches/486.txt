golden:
return mockSettings
inference:
return mockSettings;
return mockSettings.get()
return MockSettings
return withSettings()
return withSettings();
return mockSettings.get();
return mockSettings = false;

return mockSettings.first()
return mockSettings.clone();
return mockSettings();
return mockSettings, mockSettings;
return mockSettings.mVariants
return mockSettings.clone()
MockSettings return mockSettings;
return mockSettings || mockSettings;
return mockSettings, withSettings();
return mockSettings || mockSettings
return mockSettings.mAnswer
return mockSettings = true;
return mockSettings
return mockSettings = 0;
return mockSettings.mCurrentContext
return mockSettings.trim();
return mockSettings.mInstance
return mockSettings.mInitialized
return NS_OK;
withSettings(); return mockSettings;
return mockSettings.first();
return mockSettings.value
return mockSettings);
return mockSettings.mMockSettings
return mockSettings.trim()
return mockSettings = mockSettings;
return mockSettings.values()
return mockSettings.mNext
return mockSettings.Empty()
return mockSettingsAnswer
return mockSettings.free();
return mockSettings ATTRIBUTE_UNUSED
return mockSettings, withSettings()
return (mockSettings)
withSettings(); return mockSettings
return mockSettings.toNewCString()
return mockSettings.iterator()
return mockSettings.Empty();
return (MockSettings) mockSettings
return mockSettings, mockSettings2
return (void) mockSettings
return mockSettings.IsEmpty()
return mockSettings.size()
return mockSettings.First()
return mockSettings.copy();
return mockSettings.mDocument
return mockSettings, mockSettingsSupport
return mockSettings.mInstance()
return mockSettings + mockSettings;
return mockSettings.create();
return mockSettings.isEmpty()
return mockSettings.this;
return mockSettings!= 0
return mockSettings1, mockSettings2;
return mockSettings.list()
return mockSettingsInternal
return mockSettings!= null
return mockSettings.nativeAnswer()
return mockSettings + mockSettings
return mockSettings, null
return mockSettings ;
return mockSettings.assignWithConversion()
return mockSettings.assign();
return mockSettings, mockSettingsType
return mockSettings.items()
return mockSettings!=0
return mockSettings, 0
return mockSettings.size();
return withSettings(); return mockSettings
return null;
return mockSettings.removeAnswer
return mockSettings.assignments
return mockSettings, mockSettings
return mockSettings.ToNewCString()
return mockSettings.mVariants;
return mock_settings
return mockSettings.mEmpty()
return mockSettings.value()
return mockSettings, mockSettings.first()
return mockSettings.type
return rv
return mockSettings.saveAnswer
return templateSettings
return mockSettings.mInner()
return mockSettings.deprecated()
return mockSettings.toNewCString();
return false;
return mockSettings.csa()
return mockSettings, mockSettings.get()
return mockSettings.mAbort();
return mockSettings = false;
return, mockSettings
return mockSettings.deprecated
return withSettings(), mockSettings
return mockSettings.this
return mockSettings_
return mockSettings.returnType
return (MockSettings) mockSettings;
MockSettings return mockSettings
return mockSettings(void)
return mockSettings.assign()
return mockSettings.peek();
return mockSettings.mFrameState
return mockSettings.mTarget
return mockSettingsAsMockSettings
return mockSettings.init();
return withSettings
return mockSettings[0];
MockSettings mockSettings;
return mockSettings.strip()
return mockSettings.mMockSettings;
return mockSettings.mParent()
return mockSettings.mFirst()
return rv;
return mockSettings.
return mockSettings.Length();
return mockSettings.swap();
return mockSettings[0]
return mockSettings = withSettings();
return mockSettings2
return mockSettings.mContent;
return mockSettings.list();
return MarkSettings
return mockSettings.mInitialized;
return mockSettings.copy()
return nsMockSettings
return mockSettings > 0
return mockSettings.mLength
return mockObjects
return mockSettings, mockPtr
return mockSettings * mockSettings;
return mockSettings == 0
return mockSettings.mEmpty();
return mockSettings.tqe()
return mockSettings.mInsertionPoint
return mockSettings(mockSettings);
return mockSettings.mCurrentType
returnWithSettings
return mockSettings.mOwner
return mockSettings, mockSettings2;
return mockSettings || withSettings();
return nsMockSettings()
return mockSettings.mLength()
#endif return mockSettings;
return mockSettings.mVoid()
return mockSettings.hashCode()
return mockSettings.mDeepSettings
return void* mockSettings;
return mockSettings, null;
return mockSettings.iterator();
return mockSettings, mockSettingsArena
return this;
return mockSettings.toArray()
return mockSettings.newAnswer();
return mockSettings.assignment()
return mockSettings || withSettings()
return mockSettingsWithConversions
return mockSettings1, mockSettings2
return mockSettings.cstr()
return mockSettings.async()
return mockSettings.mFrameSettings
return mockSettings.acquire();
return mockSettings; return mockSettings;
return mockSettings.mLength();
return mockSettings || mockSettings ;
return mockSettings().get()
return withSettings(); return mockSettings;
return mockSettings.next()
return mockSettings.advance();
return mockSettings, mockSettings();
return mockSetting
return targetSettings
return mockSettings.MockSettings()
return mockSettings.mCurrentContext;
return renderSettings
return 0;
return mockSettings.mTargetSettings
return mockSettings(false);
return mockSettings.defaultAnswer();
return mockElements
return mockSettings.addElementAt(0)
return mockSettings(mockSettings)
return mockSettings.ToNewCString();
return Settings
return markSettings
return mockSettings.mDeepStubs
return mockSettings || mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
return mockSettings.GetMockSettings()
return mockSettings.removeValue()
return mockSettings.mTargetInfo.mType
return mockSettings,.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
return mockSettings.addElementAt(mockSettings);
return mockSettings, mockSettingsAnswer
return mockSettings.definePrefix("")
return mockSettings.GetFirst()
return mockSettings.mNodeInfo
return mockSettings.deprecated_returns
return mockSettings.smimeType
return mockSettings.assignWithConversion("MockSettings", 0)
return mockSettings || mockSettings.type!= MockSettings.None
return mockSettings.create()
return mockSettings, mockSettings.mCachedArena;
return mockSettings.mInner
return mockSettings, mockSettings.teardown
return mockSettings, mockSettings, mockSettings.next
return mockSettings || mockSettings.empty();
return mockSettings, mockSettings.previous
return mockSettings, mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
return mockSettings.assignments()
return mockSettings.removeAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
return mockSettings || mockSettings == null
return mockSettings.assignWithConversion(returnTypeGenericMetadata.rawExtraInterfaces())
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
return mockSettings, mockSettingsContent
return mockSettings.slot()
return mockSettings = mockSettings.replaceAll("..", "..");
return mockSettings.deprecated_nsCase()
return mockSettings.tqe_assignments
return withSettings().defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
return mockSettings.csa();
return mockSettings || mockSettings.type == nsGenericGenericMetadata::nsReporter
return mockSettings, mockSettings_.removeAnswer
return mockSettings || mockSettings.mIsImplemented()
return mockSettings || mockSettings.size() == 0
return mockSettings.assign(mockSettings);
return mockSettings.mFrameset
return mockSettings, mockSettings, mockSettingsLength
return mockSettings = mockSettings.type() == RETURN_TYPE_METADATA_NONE;
return mockSettings.doReturnTypeGenericMetadata
return mockSettings.tqe_all();
return mockSettings.replaceAll("n", "n", "n", "n");
return mockSettings, mockSettings.type
return mockSettings, mockSettings.mLength
return mockSettings.advance(false);
return mockSettings = mockSettings.advance(rdfServ.dfServ.dfServ.dfServ.dfServ.dfServ);
return mockSettings.removeAnswer();
return mockSettings.mRawExtraInterfaces()
return mockSettings.mDeepSettings;
return mockSettings.assignWithConversion(returnTypeGenericMetadata);
return mockSettings, mockSettings, mockSettingsCnt
return mockSettings || mockSettings == 0
return mockSettings, mockSettingsAnswers(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
return mockSettings, mockSettingsContext
return mockSettings.mDeepUpdater()
return mockSettings || mockSettings.exists();
return mockSettings.advance( 0 );
return mockSettings.saveCase();
return mockSettings, mockSettingsFromConverter(returnTypeGenericMetadata)
return mockSettings, mockSettingsSize
return mockSettings.assign(mockSettings)
return mockSettings.replaceAll("<n", "n", "&n", "&n");
return mockSettings.replaceAll("&n", "n", "&n", "n");
return mockSettings.replaceAll("<n", "n", "<n", "n");
return mockSettings.replaceAll("<n", "&n", "n", "n");
return mockSettings.replaceAll("n", "&n", "n", "&n");
return mockSettings.replaceAll("n", "&n", "n", "n");
return mockSettings.replaceAll("&n", "n", "&n", "&n");
return mockSettings.replaceAll("&n", "&n", "n", "n");
return mockSettings.replaceAll("<n", "&n", "<n", "<n");
return mockSettings.replaceAll("<n", "<n", "&n", "n");
return mockSettings.replaceAll("&n", "n", "<n", "&n");
return mockSettings.replaceAll("n", "<n", "&n", "&n");
return mockSettings.replaceAll("<n", "<n", "&n", "&n");
return mockSettings.replaceAll("&n", "&n", "<n", "n");
return mockSettings.replaceAll("n", "n", "n", "<n");
return mockSettings.replaceAll("n", "&n", "&n", "<n");
<return mockSettings;
return mockSettings.replaceAll("n", "&n", "<n", "<n");
return mockSettings.replaceAll("&n", "n", "<n", "n");
return mockSettings.replaceAll("n", "&n", "n", "<n");
return mockSettings.replaceAll("<n", "<n", "<n", "&n");
return mockSettings.replaceAll("n", "&n", "&n", "n");
return mockSettings.replaceAll("n", "<n", "n", "<n");
return mockSettings.replaceAll("<n", "<n", "n", "&n");
return mockSettings.replaceAll("<n", "n", "n", "&n");
return mockSettings.replaceAll("&n", "<n", "<n", "&n");
return mockSettings.replaceAll("n", "<n", "<n", "n");
return mockSettings.replaceAll("n", "n", "<n", "<n");
return mockSettings.replaceAll("&n", "n", "n", "<n");
&return mockSettings;
return mockSettings.replaceAll("n", "<n", "&n", "n");
return mockSettings.replaceAll("<n", "n", "n", "n");
return mockSettings.replaceAll("<n", "<n", "n", "n");
return mockSettings.replaceAll("&n", "<n", "<n", "n");
return mockSettings.replaceAll("&n", "n", "n", "&n");
return mockSettings.replaceAll("n", "n", "n", "&n");
return mockSettings.replaceAll("<n", "<n", "&n", "<n");
return mockSettings.replaceAll("&n", "<n", "&n", "n");
return mockSettings.replaceAll("<n", "&n", "<n", "&n");
return mockSettings.replaceAll("<n", "&n", "&n", "n");
return mockSettings.replaceAll("&n", "<n", "n", "<n");
return mockSettings.replaceAll("n", "n", "&n", "&n");
return mockSettings.replaceAll("n", "<n", "<n", "&n");
return mockSettings;
return mockSettings.replaceAll("<n", "<n", "<n", "<n");
return mockSettings.replaceAll("n", "<n", "n", "n");
return mockSettings.replaceAll("n", "&n", "&n", "&n");
return mockSettings.replaceAll("&n", "&n", "<n", "&n");
return mockSettings.replaceAll("&n", "&n", "n", "&n");
return mockSettings.replaceAll("<n", "&n", "n", "&n");
return mockSettings.replaceAll("&n", "&n", "&n", "<n");
return mockSettings.replaceAll("<n", "&n", "n", "<n");
return mockSettings.replaceAll("&n", "&n", "&n", "&n");
return mockSettings.replaceAll("<n", "n", "&n", "n");
return mockSettings.replaceAll("<n", "&n", "<n", "n");
return mockSettings.replaceAll("<n", "n", "n", "<n");
return mockSettings.replaceAll("&n", "n", "n", "n");
return mockSettings.replaceAll("&n", "<n", "n", "&n");
return mockSettings.replaceAll("&n", "n", "<n", "<n");
return mockSettings.replaceAll("&n", "&n", "&n", "n");
return mockSettings.replaceAll("n", "n", "<n", "&n");
return mockSettings.replaceAll("n", "<n", "<n", "<n");
return mockSettings.replaceAll("n", "n", "<n", "n");
return mockSettings.replaceAll("&n", "<n", "&n", "<n");
return mockSettings;
return mockSettings.replaceAll("n", "<n", "n", "&n");
return mockSettings.replaceAll("&n", "<n", "<n", "<n");
return mockSettings.replaceAll("n", "&n", "<n", "&n");
return mockSettings.replaceAll("&n", "<n", "n", "n");
<return mockSettings;
return mockSettings.replaceAll("n", "<n", "&n", "<n");
return mockSettings.replaceAll("<n", "<n", "n", "<n");
return mockSettings.replaceAll("n", "&n", "<n", "n");
return mockSettings.replaceAll("<n", "<n", "<n", "n");
return mockSettings.replaceAll("&n", "&n", "n", "<n");
return mockSettings.replaceAll("<n", "n", "&n", "<n");
return mockSettings.replaceAll("<n", "n", "<n", "&n");
return mockSettings.replaceAll("&n", "&n", "<n", "<n");
return mockSettings.replaceAll("<n", "n", "<n", "<n");
return mockSettings.replaceAll("n", "n", "&n", "n");
return mockSettings.replaceAll("&n", "<n", "&n", "&n");
return mockSettings.replaceAll("<n", "&n", "&n", "<n");
return mockSettings.replaceAll("&n", "n", "&n", "<n");
return mockSettings.replaceAll("<n", "&n", "&n", "&n");
return mockSettings.replaceAll("n", "n", "n", "n");
&return mockSettings;
return mockSettings.replaceAll("n", "n", "&n", "<n");
