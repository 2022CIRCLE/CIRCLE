golden:
int sum = 0;
inference:
int sum;
int sum = 0;

long sum = 0;
int sum = -1;
int sum = 1;
int sum = null;
unsigned int sum = 0;
u_long sum = 0;
static int sum = 0;
unsigned long sum = 0;
int sum = (int)0;
u_int sum = 0;
size_t sum = 0;
int sum = 0; int i;
const int sum = 0;
int sum; int i;
int sum = 0 __unused;
double sum = 0;
long sum;
int sum = 2;
int sum = &sum;
int sum = 0 = 0;
int sum=0;
int sum = (0);
u_int_sum = 0;
int sum = (int) 0;
short sum = 0;
u_int32_t sum;
int sum = 0, length = 0;
int i, sum = 0;
int i;
int sum = 0, i;
int sum = false;
int sum, i;
int result = 0;
int sum, length = 0;
int sum, sum = 0;
int i = 0;
unsigned int sum;
size_t sum;
int sum, length;
int sum2 = 0;
final int sum = 0;
int sum = 0 ;
int sum = 0, max = 0;
int num = 0;
unsigned long sum;
int sum; int length;
int sum = i;
int *sum = 0;
off_t sum = 0;
int sum1 = 0;
int s = 0;
uint sum = 0;
int sum = 0.0;
int sum, sum;
int sum = 0.;
int sum[] = 0;
int sum = (int *)0;
u_int16_t sum;
int total = 0;
int sum = -sum;
int sum, max = 0;
int sum = sum;
int sum = zero;
int sum; int i = 0;
int sum = 0, length;
int sum = MAX_SIZE;
int sum = 0, i = 0;
int sum = '0';
int_sum = 0;
int sum = sizeof(*p1);
int res = 0;
int sum; int sum = 0;
int sum = %d;
int sum = 0; int length;
int sum = [];
int sum = 32;
int sum = ;
u_long sum;
int sum = 0; #endif
int sum = (long)0;
integer sum = 0;
void *sum = 0;
int sum =;
int sum = 0, n = 0;
int sum, i = 0;
int sum = p1[i];
int i; int sum = 0;
int sum, offset;
Integer sum = 0;
int amount = 0;
int sum = p2[i];
int sum = EINVAL;
int sum = 0 - 1;
double sum;
int sum =  0;
int sum = 0, sum = 0;
u_quad_t sum = 0;
int subsum = 0;
int sum, offset = 0;
int sum = 4;
int sum; int sum;
int sum = -2;
uint32_t sum = 0;
int sum = 3;
int sum = -p1;
int sum = 0, offset = 0;
int sum = i = 0;
static int sum;
int sum = 0, offset;
void sum = 0;
int sum = 0; int len;
struct sum *sum = 0;
int sum = false;
int sum1, sum2;
int sum = size_t 0;
int sum = 0, max;
int sum, sum2 = 0;
int value = 0;
int sum; int ret;
int sum = = 0;
int sum; int result;
int sum; int res;
u_int sum;
int sum = 0 = 1;
int sum, sum2;
int sum = 0  0;
int sum = MAX(sum);
float sum = 0;
int sum = size;
int sum, last = 0;
int sum = 0; int s;
int sum = 0xff;
int i, sum;
int sum = 0, dp = 0;
int sum = *p1;
int sum, len = 0;
int sum = 0; int v;
int sum; int result = 0;
int sum = 256;
int sum = 8;
int sum = 0;;
int sum = 0, len = 0;
int sum = -1)
int sum = offset;
int sum = 0, result = 0;
int i; int sum;
int sum, len;
int ret = 0;
int sum = 0, end = 0;
int sum; int length = 0;
int sum __unused;
int sum = v;
int sum = __unused;
u_int i;
int sum, ret;
int dp, sum = 0;
int sum = int[];
int sum = sizeof(*sum);
int sum = 0, last = 0;
int sum; int s;
int sum = (int *) 0;
int sum = p1;
int sum = -p1[i];
int sum = 0, sum2 = 0;
int sum = 0, s = 0;
int sum = /* 0 */
int sum = 0, dp;
int sum; int dp;
int sum = 0; int n;
int sum = 0; int j;
int sum = 0, num = 0;
int sum = distance(p1, p2);
int sum; size_t sum;
int sum = MAX(sum, 0);
int sum = 0; int offset;
int sum = 0, ret = 0;
int sum = 0, ret;
int sum; int len;
int sum = EIF_MAX;
int sum = p1.length;
int sum; int num = 0;
int sum = 0; int count;
int sum; int len = 0;
size_t sum; int sum = 0;
int sum = 0; long i;
int sum; int retval;
int sum = 0 - p1;
int sum = sizeof(struct distance);
int sum; int s = 0;
int sum; int n = 0;
int sum = null; int i;
int sum = 0, p2 = 0;
int sum = 0; struct long distance[] *p2;
int sum = 0; int r1 = 0; int r2 = 0; int r3 = 0;
int sum = 0; int max = 0;
int sum = 0; /* FIXME: the sum is not in this function */
int sum = 0, p1 = 0;
int sum = 0; u_long i;
int sum = 0; int i = 0;
int sum = 0, res = 0;
int sum = 0; u_int32_t sum = 0;
int sum = 0; int ret;
int sum = 0, v;
int sum = 0; int ret = 0;
int sum = 0; /* This is really a function if it's the same as the 'int' of the result. */
int sum = 0; struct distance cnt *p2;
int sum = 0; /* * If this has a sum, we're * not using it yet */
int sum = 0, bm_sum;
int sum = 0; /* * Assume a variable has been computed */
int sum = 0; /* not ideal*/
int sum; int i; int j;
int sum = 0; /* * If this is the case where this symbol is the symbol, * then we've got zeros. */
int sum = 0; /* The total number of units */
int sum = 0; struct distance *p;
int sum = 0; /* XXX */
int sum = 0, int i;
int sum = 0, e = 0;
int sum = 0, tmp = 0;
int sum = 0; /* Initialize double dp */
int sum = 0; /* only the real difference for double distance. */
int sum = 0; int r;
int sum = 0, **args;
int sum = 0; int j = 0;
int sum = 0; int i = 0; int i  p1.length; i++;
int sum = 0; struct mb_interval *i;
int sum = 0; struct *p2;
int sum = 0; /* No further use */
int sum; int p2;
int sum = 0; int res = 0;
int sum = 0; int *res = 0;
int sum = 0; /* double distance*/
int sum = 0; int isl = 0;
int sum = 0; void *sum = 0;
int sum; int c;
int sum = 0, zero;
int sum = 0, max = 0, i;
int sum = 0;
int sum = &0<;
int sum = '0';
int sum = 0; int i = 0; int i <p1.length; i++;
int sum = '&0';
int sum = &0;
int sum = <0<;
int sum = &0&;
int sum = 0;
int sum = 0 0;
int sum = 0; int i = 0; int i p1.length; i++;
int sum = 0 <0;
int sum = 0 &0;
int sum = <0;
int sum = 0<;
int sum = 0; int i = 0; int i &p1.length; i++;
int sum = '<0';
int sum = <0&;
int sum = 0&;
