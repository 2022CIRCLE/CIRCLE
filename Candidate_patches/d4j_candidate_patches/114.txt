golden:
if (locale != null) { key = new Pair(key, locale);
inference:
if (locale!= null)
if (locale!= null)
if (locale)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale);
if (locale == null)  key = new Pair(key, locale);
if (locale!= '0')  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale);
key = new Pair(key, locale);
if (locale!= 0)  key = new Pair(key, locale);
if (!locale)  key = new Pair(key, locale);
if (Locale!= null)  key = new Pair(key, locale);
if(locale!= null)  key = new Pair(key, locale);

if (locale == null)
else if (locale!= null)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale, 0);
if (nsCRT::locale!= null)  key = new Pair(key, locale);
if (locale!= null)  Key key = new Pair(key, locale);
if (locale == null)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale, 0);
if(locale!= null)  key = new Pair(key, locale);
if (locale!= null)  Key key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key);
if (locale == null)  key = new Pair(key, locale);
if (locale!= -1)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale.get());
if (locale!= null)  key = new Pair(locale);
Key key = new Pair(key, locale);
if (locale && locale!= null)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, &locale);
if (locale!= null)  key = new Pair(key, timeZone);
if (locale)  key = new Pair(locale);
if (Locale!= null)  key = new Pair(key, Locale);
if(locale)  key = new Pair(key, locale);
if (locale == null)  Key key = new Pair(key, locale);
if (locale!= NUL)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key);
if (locale == 0)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale.get());
if (locale)  key = new Pair(key);
if (locale!= null)  key = new Pair(key.get(), locale);
if (locale!= null)  key = new Pair(key, &locale);
if (locale == '0')  key = new Pair(key, locale);
if (llocale!= null)  key = new Pair(key, llocale);
else if (locale!= null)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, timeZone);
if (locale!= null) key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale, null);
if (locale!= null)  key = new Pair(locale);
if (locale==null)  key = new Pair(key, locale);
if (locale!= (int)null)  key = new Pair(key, locale);
if (locale == null)
if (null!= locale)  key = new Pair(key, locale);
cDateTimeInstanceCache.put(key, locale);
if (locale!= null)  key = new Pair(key.get(), locale);
if (locale && locale!= null)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(&key, locale);
if (locale!= this)  key = new Pair(key, locale);
if (locale)  Key key = new Pair(key, locale);
if (*locale)  key = new Pair(*locale);
if (locale!= null)  key = new Pair(locale, locale);
if (locale!= null)  key = new Pair(key, locale, &locale);
if (locale) key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, Locale);
if (llocale!= null)  key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale);
if (_locale!= null)  key = new Pair(key, _locale);
if (locale!= null)  key = new Pair(key, locale, null);
else  if (locale!= null)  key = new Pair(key, locale);
if (null!= locale)  key = new Pair(null, locale);
if (locale!= '0') key = new Pair(key, locale);
if (locale!= None)  key = new Pair(key, locale);
if (locale!= nsCRT::locale)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(name, locale);
if (locale!= null)  key = new Pair(prefix, locale);
if (locale!= null)  key = new Pair(&key, locale);
if (location!= null)  key = new Pair(location, locale);
if (locale == null)  key = new Pair(key, locale, 0);
if (locale!= null)  key = new Pair(key, format);
if (*locale!= null)  key = new Pair(*locale);
if (locale!= locale)  key = new Pair(key, locale);
if (locale!= null)  Key* key = new Pair(key, locale);
if (locale == -1)  key = new Pair(key, locale);
if (locale)  key = new Pair(locale, locale);
if (nsCRT::locale!= null)  key = new Pair(key, locale);
if (Locale!= null)  key = new Pair(key, locale);
if (null!= locale)  key = new Pair(key, locale);
if ( locale!= null )  key = new Pair( key, locale );
if (locale)  key = new Pair(key.get(), locale);
if (locale!= null)  key = new Pair(key, context);
if (locale!= null)  key = new Pair(locale, key);
if (locale!= null)  key = new Pair(key, locale, &locale);
if (locale!= nsCRT::None)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair((int)key, locale);
if (locale.get()!= null)  key = new Pair(key, locale);
if (locale == null)  key = new Pair(key);
if (locale == null)  key = new Pair(key, timeZone);
if (cLocale!= null)  key = new Pair(cLocale, locale);
if (!locale)  key = new Pair(key, &locale);
if (locale!= null) key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale, true);
if (!locale)
if (!locale)  Key key = new Pair(key, locale);
if (locale == null)  cDateTimeInstanceCache.put(key, locale);
if (lange!= null)  key = new Pair(lange, locale);
if (locale)
if (locale)  key = new Pair(key, timeZone);
if (locale!= null)  key = new Pair(locale, locale);
if (locale==null)  key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key))
if (locale!= null)  cDateTimeInstanceCache.put(key, locale);
key = new Pair(key, locale); if (locale == null)
if (locale!= '.')  key = new Pair(key, locale);
else  key = new Pair(key, locale);
if (locale!= null)  Key* key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, 0);
if (locale!= '0')  key = new Pair(key, locale, 0);
if (locale!= '/')  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, Locale);
if (locale!= 0)  Key key = new Pair(key, locale);
if (locale!= null && locale)  key = new Pair(key, locale);
if (locale.get()!= null)  key = new Pair(key, locale.get());
if (locale!= null)  Key *key = new Pair(key, locale);
if (mLocale!= null)  key = new Pair(mLocale, locale);
if (locale.get()!= null)  key = new Pair(key, locale);
if (locale!= 0)  key = new Pair(key, locale, 0);
if (LOCALE!= null)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key);
if (locale!= null)  key = new Pair(locale, 0);
/* if (locale!= null)  key = new Pair(key, locale);
if (locale!= '0')  key = new Pair(key, '0');
if (locale!= null)  key = new Pair(key, locale, 1);
if (locale!= null)  key = new Pair((int)key, locale);
key = new Pair(new Integer(dateStyle), new Integer(timeStyle));
if (locale.get()!= null)  key = new Pair(key, locale.get());
if (locale!= null)  key = new Pair(key, locale, sizeof(locale));
if (locale!= nsCRT::null)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair((Integer)key, locale);
if (locale!= null && key = new Pair(key, locale))
if (locale!= null)  key = new Pair(key, locale, -1);
if (locale!= null)  key = new Pair(key, locale, 0);
if (locale!= null)  key = new Pair(key, locale, true);
if (locale!= null)  key = new Pair(key.get(), locale);
if (locale!= null)  key = new Pair(key, locale, false);
if (locale!= null)  Key key = new Pair(key, locale);
if (locale!= null)  key = new Pair(getter_Copies(key), locale);
if (locale!= null)  key = new Pair(key, &locale);
if (strlen(locale)!= 0)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale.get());
if (locale!= null)  key = new Pair(key, locale, sizeof(key));
if (locale!= null)  key = new Pair(locale, locale);
if (locale!= null)  key = new Pair((Integer*)key, locale);
if (locale!= null)  key = new Pair((Integer)key, locale);
/* if (locale!= null)  key = new Pair(key, locale); */
if (locale)  key = new Pair(key, locale);  FastDateFormat format;
if (locale!= null)  key = new Pair(getter_Copies(key));
if (locale!= null)  key = new Pair(key, locale, sizeof(locale));
if (locale!= null)  key = cDateTimeInstanceCache.get(key);
if (locale!= null)  key = new Pair(key, locale, false);
if (cDateTimeInstanceCache!= null)  key = new Pair(key, locale);
if (NS_SUCCEEDED(locale))  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(cDateTimeInstanceCache, locale);
if (gLocale!= null)  key = new Pair(gLocale, locale);
if (locale!= null)  key = new Pair(key, locale, sizeof(key));
if (locale!= null)  key = new Pair(key, Locale);
if (locale!= null)  key = new Pair(key, aKey);
if (locale!= null)  key = new Pair(key, locale);  FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null)  if (locale == null)  locale = Locale.getDefault();  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null)  key = new Pair(key, locale, getter_Copies(locale));
if (!locale)  key = new Pair(key, locale);  if (!gLocale)  gLocale = Locale.getDefault();
if (locale == null)  /* XXX we don't do this here */ if (locale)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair((char*)key, locale);
if (locale!= null)  key = new Pair(key, cDateTimeInstanceCache.get((long)locale));
if (!cDateTimeInstanceCache.has_key(key))  return cDateTimeInstanceCache.get(key);
if (!locale)  return null;  if (locale == null)
if (locale!= null)  key = new Pair(key, locale);  FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null)  if (locale == null)  locale = Locale.getDefault();  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);  catch (ClassCastException ex)  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null)  char * s; key = new Pair(key, locale);
if (locale!= nsCRT::strdup(locale))  key = new Pair(key, locale);
if (locale!= null)  key = new Pair((char *) locale);
if (locale!= null)  key = new Pair(key, cDateTimeInstanceCache.get(locale));
if (locale!= nsCRT::strdup("%s", key))  key = new Pair(key, cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(key)));))!= null) && (cDateTimeInstanceCache.get(key) == cDateTimeInstanceCache.get(key) == 0))) && (cDateTimeInstanceCache.get(key) == 0)))) && (cDateTimeInstanceCache.get(key) ==
if (! locale)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale);  FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null)  if (locale == null)  locale = Locale.getDefault();  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);  catch (ClassCastException ex)  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null)  key = new Pair(key, locale);  FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null)  if (locale == null)  locale = Locale.getDefault();  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);  catch (ClassCastException ex)  if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null)  key = new Pair(key, locale, formatter);
if (locale!= null)  key = new Pair((FastDateFormat) cDateTimeInstanceCache.get(key), locale);
if (locale == null)  if (locale!= null)  key = new Pair(key, locale);  FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null)  if (locale == null)  locale = Locale.getDefault();  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);  catch (ClassCastException ex)  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null)  key = new Pair(locale, key);
if (locale!= nsCRT::strdup("%s", locale))  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale);  FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null)  if (locale == null)  locale = Locale.getDefault();  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null)  if (locale!= null)  key = new Pair(key, locale);  FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null)  if (locale == null)  locale = Locale.getDefault();  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);  catch (ClassCastException ex)  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null)  switch (prefix)  case'': case'': /* ignore '*/ key = new Pair(key, locale); break; case'': key = new Pair(key, locale); break;
if (cDateTimeInstanceCache!= null)  key = new Pair(cDateTimeInstanceCache.get(key), cDateTimeInstanceCache.get(key));
if (locale!= nsCRT::strlen(locale))  key = new Pair(key, locale);
if (locale == null)  if (!comment)  */ if (strcmp(locale, "*"))  strcpy(locale, "*"); strcpy(locale, "*");  else  if (locale!= null)  key = new Pair(key, locale);
if (locale == null)  if (key)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale, getter_AddRefs(cDateTimeInstanceCache));
if (locale!= nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::locale!= nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::locale)  key = new Pair(key, locale, nsCRT::nsCRT::nsCRT::locale);
if (locale!= null)  key = new Pair(key, locale, true);
if (locale!= null)  key = new Pair(key, nsCRT::strdup(locale));
if (locale!= null)  key = new Pair(key, locale, sizeof(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), sizeof(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string);
if (!gInstance)  gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage))))  if (!gInstance.GetLanguage(&gInstance.GetLanguage()))  if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1)  if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1)  if (gInstance.GetLanguage() == -1)
if (locale == null)  if (cDateTimeInstanceCache.has_key(key, cDateTimeInstanceCache.key))  key = new Pair(key, locale);
if (locale!= null)  if (flags)  Key type; flags.get(flags); if (type == nsHTMLAtoms::locale)  key = new Pair(key, type, locale);   else  key = new Pair(key, type, locale);
if (locale!= null)  if (!mInstances) return mInstances;
if (locale == null)  /* * If we aren't locked, we must have the new Pair, * this is not used * because we're trying to add the new pair * to the database. */ if (sysctl(cDateTimeInstanceCache, key, &locale) == 0)  key = new Pair(key, locale);
if (locale!= null)  if (!cDateTimeInstanceCache.isEmpty())  Key cDateTimeInstanceCache = new Pair(key, locale);
if (locale!= null)  if (!noEmptyEmpty)  key = new Pair(key, locale);
if (!nsCRT::locale)  key = new Pair(key, locale);
if (locale!= nsCRT::strdup("locale"))  key = new Pair(key, locale);
if (locale == null)  KeyString keyStr; keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("local
if (!need_sc)  return -1;  if (locale!= null)  key = new Pair(key, locale);
if (locale == null)  char *locale = null;
if (locale == null)  if (locale == NS_DEFAULT_Locale)  return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);  else  if (locale == NS_DEFAULT_Locale)  return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!cDateTimeInstanceCache.has_key(key, locale))
if (locale!= null)  if (!mElement)  mElement = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale, cDateTimeInstanceCache.get(key));
if (!nsCRT::strlen(locale))  key = new Pair(nsCRT::strlen(key), locale);
if (locale!= null)  key = new Pair(key, locale, locale);
if (locale == null)  if (!mTimeZone)  mTimeZone = null;
if (locale!= null)  if (locale)  key = new Pair(key, locale);  FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null)  if (locale == null)  locale = Locale.getDefault();  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);  catch (ClassCastException ex)  break;
if (locale!= null)  key = new Pair(locale, cDateTimeInstanceCache.get(key));
if (locale == null)  switch (strlen(key))  case '0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= nsCRT::nsCRT::null)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale, &key.GetDate(timeStyle, timeZone));
if (locale == null)  if (!kResult)   /* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= null)  if (!cDateTimeInstanceCache.containsKey(key, locale))  return format;  if ((key = new Pair(key, locale)))
if (cDateTimeInstanceCache.has_key(key))  if (cDateTimeInstanceCache.has_key(key))  return (cDateTimeInstanceCache[key]);  if (locale!= null)  key = new Pair(key, locale);
if (locale!= null)  key = new Pair(key, locale);  FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null)  if (locale == null)  locale = Locale.getDefault();  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);  catch (ClassCastException ex)  if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0)  if (!strcmp(strcmp(strcmp(st
if (locale == null)  if (debug)  /* XXX */ if (!gFastDateFormat)  printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (!locale)  if (!sysDateTime) return -1; else  switch (locale)  case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (!nsCRT::strcasecmp("locale"))  key = new Pair(key, nsCRT::strcasecmp("locale"));
if (locale!= null)  if (!gEmptyLocale)  gEmptyLocale = new Pair(key, locale);
if (locale == nsCRT::locale)  key = new Pair(key, locale);
if (cLocale!= null)  key = new Pair(key, cLocale);
if (locale!= '0')  key = new Pair(key, locale);  FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0')  if (locale == '0')  locale = '0';  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null)  if (*cDateTimeInstanceCache)  key = new Pair(key, locale);
if (locale == null)  String pattern = formatter.toPattern(); if (type == INTEGER_VALID)  cDateTimeInstanceCache.put(key, format);  else  if (locale == null)  locale = Locale.getDefault();  try  SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);  catch (ClassCastException ex)  throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale.get());
if (locale!= this) key = new Pair(key, locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (locale) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) if (debug) /* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) <key = new Pair(key, locale, -1);
if (locale!= 0) <key = new Pair(key, locale, 0);
if (locale!= null) &if (locale) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); <if (locale!= null) key = new Pair(key, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) &if (debug) </* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale == null) &if (debug) /* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale == null) <if (debug) &/* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= nsCRT::nsCRT::null) key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); <if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale, sizeof(locale));
if (locale!= null) <if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale == null) if (debug) &/* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= '0') &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(&key, locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (locale) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <Key *key = new Pair(key, locale);
if (locale!= '0') key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, &locale);
if (locale == null) <if (!comment) */ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); <else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) <if (!comment) <*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if(locale!= null) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (!comment) <*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (!locale) &key = new Pair(key, locale); &if (!gLocale) <gLocale = Locale.getDefault();
if (locale == null) <if (key) key = new Pair(key, locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); &else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, format);
if (locale!= null) &key = new Pair(key, locale, null);
if(locale!= null) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (!comment) <*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale, 1);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale==null) key = new Pair(key, locale);
if (!locale) <return null; &if (locale == null)
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &if (!cDateTimeInstanceCache.containsKey(key, locale)) &return format; if ((key = new Pair(key, locale)))
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &Key *key = new Pair(key, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) key = new Pair(locale);
if (llocale!= null) <key = new Pair(key, llocale);
if (locale!= '0') &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) key = new Pair(key, locale, &locale);
if (locale!= null) <key = new Pair(locale, key);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= '&0') key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); &if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale!= 0) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair((FastDateFormat) cDateTimeInstanceCache.get(key), locale);
if (locale!= null) if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) &key = new Pair(key, format);
if (locale!= null) if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale == null) <if (debug) /* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &if (!comment) */ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (locale) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) &if (!mTimeZone) mTimeZone = null;
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= nsCRT::null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale, 0);
if (locale == null) if (!comment) */ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale == null) &if (!kResult) /* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (Locale!= null) key = new Pair(key, locale);
if (locale!= null) if (!noEmptyEmpty) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &/* XXX we don't do this here */ if (locale) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (!locale) Key key = new Pair(key, locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (!comment) <*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) if (!noEmptyEmpty) &key = new Pair(key, locale);
if (locale == null) if (debug) &/* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale == null) <if (!kResult) &&/* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (locale) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '&0') &key = new Pair(key, locale);
if (locale!= nsCRT::strlen(locale)) <key = new Pair(key, locale);
if (!locale) if (!sysDateTime) return -1; else <switch (locale) <case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (Locale!= null) <key = new Pair(key, locale);
if (locale!= null) &if (locale) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
&if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &if (locale) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (_locale!= null) <key = new Pair(key, _locale);
if (locale!= null) key = new Pair((Integer)key, locale);
if (locale!= null) <if (!cDateTimeInstanceCache.containsKey(key, locale)) &return format; &if ((key = new Pair(key, locale)))
if (locale!= null) <key = new Pair(key, cDateTimeInstanceCache.get(locale));
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale == null) if (!comment) */ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) if (!comment) &*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (Locale!= null) &key = new Pair(key, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
/* if (locale!= null) key = new Pair(key, locale);
if (locale == '0') key = new Pair(key, locale);
if (!locale) if (!sysDateTime) return -1; else &switch (locale) case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (!need_sc) return -1; <if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) if (locale) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); &if (locale!= null) &key = new Pair(key, locale);
if (locale!= 0) Key key = new Pair(key, locale);
if (locale!= '&0') <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!locale) &if (!sysDateTime) return -1; else <switch (locale) &case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) <if (!mElement) mElement = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, Locale);
if (locale!= null) <Key* key = new Pair(key, locale);
else <if (locale!= null) &key = new Pair(key, locale);
if (null!= locale) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (nsCRT::locale!= null) key = new Pair(key, locale);
if (locale!= '<0') &key = new Pair(key, '0');
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '<0') key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale) &key = new Pair(key);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); &else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) if (!sysDateTime) return -1; else switch (locale) &case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) &case '&0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= '&0') &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) <Key key = new Pair(key, locale);
if (locale!= NUL) key = new Pair(key, locale);
if (locale!= null) if (locale) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) switch (strlen(key)) <case '&0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) if (!kResult) &</* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == -1) key = new Pair(key, locale);
if (locale!= null) <Key* key = new Pair(key, locale);
if (LOCALE!= null) key = new Pair(key, locale);
if (locale == null) <key = new Pair(key, locale);
if (locale == null) &if (debug) /* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= null) &key = new Pair(key, locale);
if (locale!= '0') &key = new Pair(key, '0');
if (locale!= nsCRT::locale) &key = new Pair(key, locale);
if (locale == null) &if (!comment) <*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); <else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale, true);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
else if (locale!= null) <key = new Pair(key, locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale.get()!= null) &key = new Pair(key, locale.get());
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (!comment) */ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); &if (locale!= null) key = new Pair(key, locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) key = new Pair(prefix, locale);
if (locale!= null) <if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) &key = new Pair(key, locale.get());
if (locale == null) if (debug) /* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale == null) <switch (strlen(key)) case '0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= '&0') &key = new Pair(key, locale);
if (locale == null) &switch (strlen(key)) case '&0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
else if (locale!= null) &key = new Pair(key, locale);
if (locale!= '<0') key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (locale) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) if (!comment) */ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key.get(), locale);
if ( locale!= null ) key = new Pair( key, locale );
if (locale == null) if (!comment) <*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <if (locale) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= nsCRT::strdup("%s", key)) &key = new Pair(key, cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(key)));))!= null) && (cDateTimeInstanceCache.get(key) == cDateTimeInstanceCache.get(key) == 0))) && (cDateTimeInstanceCache.get(key) == 0)))) && (cDateTimeInstanceCache.get(key) ==
if (*locale!= null) key = new Pair(*locale);
if (locale!= 0) &Key key = new Pair(key, locale);
if (locale == null) <if (cDateTimeInstanceCache.has_key(key, cDateTimeInstanceCache.key)) &key = new Pair(key, locale);
if (locale!= null) if (!cDateTimeInstanceCache.containsKey(key, locale)) <return format; &if ((key = new Pair(key, locale)))
if (locale!= '&0') <key = new Pair(key, locale, 0);
if (locale == null) <if (!comment) */ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <if (!cDateTimeInstanceCache.containsKey(key, locale)) &return format; if ((key = new Pair(key, locale)))
if (locale!= '&0') key = new Pair(key, locale, 0);
if (locale == '<0') &key = new Pair(key, locale);
if (locale == null) <switch (strlen(key)) case '&0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(key, &locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) &if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale) <key = new Pair(locale, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if(locale!= null) key = new Pair(key, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &switch (strlen(key)) <case '&0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) <if (locale) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= '<0') &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (cDateTimeInstanceCache.has_key(key, cDateTimeInstanceCache.key)) <key = new Pair(key, locale);
if (locale!= '0') <key = new Pair(key, '0');
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(&key, locale);
if (!locale) <key = new Pair(key, locale);
if (!locale) &key = new Pair(key, &locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); if (locale!= null) <key = new Pair(key, locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) if (*cDateTimeInstanceCache) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) &key = new Pair(key.get(), locale);
if (locale!= '0') <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); <else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (!comment) <*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale!= '&0') <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &if (!cDateTimeInstanceCache.isEmpty()) &Key cDateTimeInstanceCache = new Pair(key, locale);
if (!locale) &Key key = new Pair(key, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale==null) <key = new Pair(key, locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); &if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) return null; if (locale == null)
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) &key = new Pair(key, locale, 1);
if (locale == 0) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <switch (strlen(key)) <case '<0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) if (cDateTimeInstanceCache.has_key(key, cDateTimeInstanceCache.key)) &key = new Pair(key, locale);
if (locale!= '<0') <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '&0') <key = new Pair(key, '&0');
if (locale!= null) <key = new Pair(key, Locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) <key = new Pair(cDateTimeInstanceCache, locale);
if (locale == null) <if (!comment) &*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale == null) &/* * If we aren't locked, we must have the new Pair, * this is not used * because we're trying to add the new pair * to the database. */ if (sysctl(cDateTimeInstanceCache, key, &locale) == 0) &key = new Pair(key, locale);
if (locale!= null) &if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (!need_sc) <return -1; <if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale.get());
if (locale!= null) &if (locale) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <if (locale) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) &if (!kResult) &/* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= null) &if (locale) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '.') key = new Pair(key, locale);
if (locale!= null) &if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale == '&0') &key = new Pair(key, locale);
if (locale == null) &if (!comment) &*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= '&0') key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (null!= locale) key = new Pair(null, locale);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= 0) key = new Pair(key, locale, 0);
if (locale!= null) &key = new Pair((int)key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (!comment) <*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (!locale) &return null; &if (locale == null)
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if(locale) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, Locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!locale) <if (!sysDateTime) return -1; else switch (locale) <case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (!locale) &key = new Pair(key, locale); <if (!gLocale) gLocale = Locale.getDefault();
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); &if (locale!= null) &key = new Pair(key, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); <else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(locale, key);
if (locale!= null) &if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == -1) <key = new Pair(key, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) <if (locale) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '&0') &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); <if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &if (!cDateTimeInstanceCache.containsKey(key, locale)) return format; &if ((key = new Pair(key, locale)))
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (!kResult) <</* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= null) <Key key = new Pair(key, locale);
if (locale!= null) &if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale, true);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) cDateTimeInstanceCache.put(key, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); <else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (Locale!= null) key = new Pair(key, Locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= nsCRT::locale) <key = new Pair(key, locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= '<0') key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <if (!noEmptyEmpty) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) <key = new Pair(locale, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (gLocale!= null) key = new Pair(gLocale, locale);
if (locale)
if (locale == null) <if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); <if (locale!= null) <key = new Pair(key, locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); <if (locale!= null) &key = new Pair(key, locale);
if (!locale) <if (!sysDateTime) return -1; else switch (locale) &case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) &if (!cDateTimeInstanceCache.containsKey(key, locale)) &return format; <if ((key = new Pair(key, locale)))
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(locale, cDateTimeInstanceCache.get(key));
if (locale!= '<0') key = new Pair(key, '<0');
if (locale!= null) &key = new Pair(key, locale, cDateTimeInstanceCache.get(key));
if (locale == null) if (*cDateTimeInstanceCache) key = new Pair(key, locale);
if (locale!= null) if (!cDateTimeInstanceCache.isEmpty()) <Key cDateTimeInstanceCache = new Pair(key, locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (mLocale!= null) <key = new Pair(mLocale, locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (debug) </* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= null) if (locale) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); &else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) Key key = new Pair(key, locale);
if (location!= null) <key = new Pair(location, locale);
if (locale == null) key = new Pair(key, locale);
if (locale!= '0') &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= '<0') <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, context);
if (locale == null) &if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) key = new Pair(key, locale, -1);
if (locale!= null) if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) &Key* key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &if (!cDateTimeInstanceCache.containsKey(key, locale)) &return format; &if ((key = new Pair(key, locale)))
if (locale!= null) key = new Pair(key, locale, cDateTimeInstanceCache.get(key));
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); &if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) key = new Pair(&key, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) if (!cDateTimeInstanceCache.containsKey(key, locale)) <return format; <if ((key = new Pair(key, locale)))
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) Key key = new Pair(key, locale);
if (locale!= null) <if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) key = new Pair(key, locale, &locale);
if (locale!= null) if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale) &key = new Pair(locale);
if (locale!= null) &key = new Pair(key.get(), locale);
if (locale!= null) &key = new Pair(locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <key = new Pair(key, locale);
if (locale!= '0') &key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, cDateTimeInstanceCache.get(locale));
if (locale==null) key = new Pair(key, locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if ( locale!= null ) <key = new Pair( key, locale );
if(locale) &key = new Pair(key, locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &if (locale) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) <if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (locale) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) return null; <if (locale == null)
if (locale && locale!= null) &key = new Pair(key, locale);
if (!locale) key = new Pair(key, locale); &if (!gLocale) &gLocale = Locale.getDefault();
if (locale!= '&0') <key = new Pair(key, '<0');
if (!locale) <key = new Pair(key, locale); if (!gLocale) gLocale = Locale.getDefault();
if (locale == null) &if (debug) /* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= null) &key = new Pair(locale, key);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); <if (locale!= null) key = new Pair(key, locale);
if (!locale) &if (!sysDateTime) return -1; else switch (locale) <case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <cDateTimeInstanceCache.put(key, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '&0') key = new Pair(key, locale);
if (!locale) return null; &if (locale == null)
if (locale!= null) <key = new Pair(key, locale, true);
if (locale!= '0') key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); <else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '<0') <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (null!= locale) key = new Pair(key, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) &key = new Pair(key, locale, true);
if (locale!= nsCRT::strdup("%s", locale)) &key = new Pair(key, locale);
if (locale) &key = new Pair(key, locale); FastDateFormat format;
if (locale!= null) <if (locale) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); if (locale!= null) key = new Pair(key, locale);
if (locale!= '&0') &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); <else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); <else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale.get());
if (locale!= null) key = new Pair((Integer*)key, locale);
if (cDateTimeInstanceCache.has_key(key))
if (locale!= null) <key = new Pair(key, locale.get());
if (locale!= null) &key = new Pair(key, aKey);
if (locale == null) &if (!comment) &*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= '<0') <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cLocale!= null) <key = new Pair(cLocale, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) &if (locale) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) if (*cDateTimeInstanceCache) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (debug) </* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= '&0') <key = new Pair(key, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale) &key = new Pair(key, timeZone);
if (locale == null) if (debug) /* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) &if (locale) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) if (debug) </* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale == null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair((FastDateFormat) cDateTimeInstanceCache.get(key), locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) cDateTimeInstanceCache.put(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, Locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) &key = new Pair(key, locale); if (!gLocale) <gLocale = Locale.getDefault();
if (locale!= '0') key = new Pair(key, locale, 0);
if (locale!= '0') <key = new Pair(key, '&0');
if (locale == null) <if (debug) &/* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale == null) <switch (strlen(key)) &case '0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (debug) &/* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
/* if (locale!= null) <key = new Pair(key, locale); */
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, cDateTimeInstanceCache.get((long)locale));
if (locale == null) if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale.get());
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); <if (locale!= null) key = new Pair(key, locale);
if (locale) &key = new Pair(key.get(), locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) <if (!mTimeZone) mTimeZone = null;
if (locale == null) <switch (strlen(key)) <case '&0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) <if (debug) /* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale) &Key key = new Pair(key, locale);
if (locale == null) switch (prefix) case'': case'': /* ignore '*/ key = new Pair(key, locale); break; case'': key = new Pair(key, locale); break;
if (strlen(locale)!= 0) <key = new Pair(key, locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); &if (locale!= null) key = new Pair(key, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(locale, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair((Integer)key, locale);
if (locale == null) /* * If we aren't locked, we must have the new Pair, * this is not used * because we're trying to add the new pair * to the database. */ if (sysctl(cDateTimeInstanceCache, key, &locale) == 0) &key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= '0') key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cLocale!= null) <key = new Pair(key, cLocale);
if (locale == null) if (debug) </* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (!need_sc) <return -1; <if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) key = new Pair(key);
if (locale == null) <if (!comment) */ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale) key = new Pair(key.get(), locale);
if (locale!= '0') &key = new Pair(key, '&0');
if (locale == null) &if (debug) /* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) key = new Pair(key, timeZone);
if (locale == null) &if (!comment) <*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= '&0') &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) if (locale) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, timeZone);
if (locale!= null) <Key key = new Pair(key, locale);
if (!cDateTimeInstanceCache.has_key(key)) <return cDateTimeInstanceCache.get(key);
if (locale!= null) &if (locale) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(locale, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) key = new Pair(key, locale, &key.GetDate(timeStyle, timeZone));
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); <if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (debug) &/* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale == null) <if (!comment) */ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (locale) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale, 0);
if (locale!= null) <if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= '&0') key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); <else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= '&0') key = new Pair(key, '&0');
if (locale == null) &switch (strlen(key)) <case '&0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale) &key = new Pair(key, locale); <FastDateFormat format;
if (!need_sc) &return -1; <if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= '0') <key = new Pair(key, '<0');
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key);
if (locale!= 0) &key = new Pair(key, locale, 0);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); &if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &Key* key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair(key, locale, formatter);
if (locale!= null) &key = new Pair((Integer*)key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair((int)key, locale);
if (locale!= '0') <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache!= null) <key = new Pair(key, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '&0') <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &switch (prefix) <case'': case'': /* ignore '*/ key = new Pair(key, locale); break; case'': key = new Pair(key, locale); break;
if (locale!= null) &if (!cDateTimeInstanceCache.isEmpty()) <Key cDateTimeInstanceCache = new Pair(key, locale);
if (locale == null) &if (!kResult) <</* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= '0') <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!need_sc) return -1; if (locale!= null) <key = new Pair(key, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!need_sc) return -1; &if (locale!= null) <key = new Pair(key, locale);
if (lange!= null) <key = new Pair(lange, locale);
if (locale!= null) &if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); <if (locale!= null) <key = new Pair(key, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) &if (debug) &/* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <char * s; key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &key = new Pair(key);
if (locale == nsCRT::locale) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (debug) </* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) &key = new Pair(key, timeZone);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) &case '0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (!locale) if (!sysDateTime) return -1; else switch (locale) case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale == null) &if (debug) &/* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) if (!gEmptyLocale) &gEmptyLocale = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (debug) &/* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale == null) if (!comment) */ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &if (!cDateTimeInstanceCache.containsKey(key, locale)) <return format; &if ((key = new Pair(key, locale)))
if (locale!= nsCRT::nsCRT::null) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale, false);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) if (!mInstances) return mInstances;
if (locale!= null) &key = new Pair(key, locale, null);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (!kResult) &</* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); &if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(locale, key);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale) <key = new Pair(key);
if (locale!= null) <if (!gEmptyLocale) <gEmptyLocale = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= (int)null) key = new Pair(key, locale);
if (!locale) &key = new Pair(key, locale); if (!gLocale) &gLocale = Locale.getDefault();
if (locale == null) <if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &if (locale) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '0') &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); &if (locale!= null) <key = new Pair(key, locale);
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) &if (!comment) &*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale, 0);
if (locale!= null) <key = new Pair(key, &locale);
if (locale!= null) key = new Pair(key, locale, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale.get());
if (locale == null) <if (!kResult) /* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale, &key.GetDate(timeStyle, timeZone));
if (locale!= null) if (!cDateTimeInstanceCache.containsKey(key, locale)) &return format; if ((key = new Pair(key, locale)))
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (locale) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <key = new Pair(key);
if (locale!= this) <key = new Pair(key, locale);
if (locale) <key = new Pair(key, locale); FastDateFormat format;
if (locale == null) if (!kResult) <&/* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); &if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) if (!comment) <*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); <if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <switch (strlen(key)) <case '<0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(key, locale, null);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= '0') &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <switch (strlen(key)) &case '&0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (!locale) key = new Pair(key, locale); &if (!gLocale) gLocale = Locale.getDefault();
if (locale == null) &if (debug) </* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) <if (!sysDateTime) return -1; else &switch (locale) case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) &key = new Pair(key, locale, true);
if (locale!= null) &if (locale) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= '0') &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); &else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair((Integer)key, locale);
if (locale!= null) &key = new Pair(key, cDateTimeInstanceCache.get((long)locale));
if (locale!= null) &if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) &if (!gEmptyLocale) gEmptyLocale = new Pair(key, locale);
if (locale!= '0') key = new Pair(key, '&0');
if (locale!= null) if (!mElement) <mElement = new Pair(key, locale);
if (locale == null) switch (strlen(key)) &case '&0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale.get()!= null) <key = new Pair(key, locale.get());
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(prefix, locale);
if (locale!= null) if (!gEmptyLocale) gEmptyLocale = new Pair(key, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) <if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (Locale!= null) <key = new Pair(key, Locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); <else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) Key* key = new Pair(key, locale);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) <if (!sysDateTime) return -1; else switch (locale) case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale == null) &switch (prefix) case'': case'': /* ignore '*/ key = new Pair(key, locale); break; case'': key = new Pair(key, locale); break;
if (locale!= null) if (locale) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (gLocale!= null) &key = new Pair(gLocale, locale);
if (locale == null) switch (strlen(key)) &case '<0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) <if (*cDateTimeInstanceCache) &key = new Pair(key, locale);
if (locale!= nsCRT::nsCRT::null) &key = new Pair(key, locale);
if (locale!= null) if (locale) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); if (locale!= null) <key = new Pair(key, locale);
if (locale == null) if (debug) </* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= nsCRT::null) &key = new Pair(key, locale);
if (locale!= null) &if (locale) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) &if (debug) &/* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale, getter_AddRefs(cDateTimeInstanceCache));
if (locale!= null) &key = new Pair(key, locale, sizeof(key));
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale == null) &if (debug) </* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); &else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
/* if (locale!= null) &key = new Pair(key, locale); */
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) <if (debug) &/* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) if (locale) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale, sizeof(locale));
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) &Key key = new Pair(key, locale);
if (locale == null) <switch (strlen(key)) &case '<0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (!gEmptyLocale) gEmptyLocale = new Pair(key, locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (!comment) &*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(locale, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, format);
if (locale == null) <if (!comment) <*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <switch (strlen(key)) &case '<0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) &if (!comment) <*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) key = new Pair(key, locale); <if (!gLocale) gLocale = Locale.getDefault();
if (locale!= null) <if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (!need_sc) return -1; <if (locale!= null) key = new Pair(key, locale);
if (locale == null) &switch (strlen(key)) &case '0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) <if (key) <key = new Pair(key, locale);
if (locale!= '<0') key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (!comment) &*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) <if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (!need_sc) <return -1; <if (locale!= null) <key = new Pair(key, locale);
if (locale == null) if (!comment) */ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '0') key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '<0') <key = new Pair(key, '&0');
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= '/') key = new Pair(key, locale);
if (locale == null) <if (cDateTimeInstanceCache.has_key(key, cDateTimeInstanceCache.key)) key = new Pair(key, locale);
if (locale == null) &if (!comment) &*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale.get());
if (locale) key = new Pair(locale, locale);
if (locale!= null) &key = new Pair(key, Locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if(locale!= null) &key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale == null) <if (debug) /* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &/* * If we aren't locked, we must have the new Pair, * this is not used * because we're trying to add the new pair * to the database. */ if (sysctl(cDateTimeInstanceCache, key, &locale) == 0) <key = new Pair(key, locale);
if (gLocale!= null) <key = new Pair(gLocale, locale);
if (locale && locale!= null) <key = new Pair(key, locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) <if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale!= null) if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) &if (!noEmptyEmpty) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (locale) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <if (!mElement) &mElement = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (!comment) */ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale!= nsCRT::locale) key = new Pair(key, locale);
if (!nsCRT::strlen(locale)) &key = new Pair(nsCRT::strlen(key), locale);
if (locale!= null) <key = new Pair(key, locale, locale);
if (locale == null) &switch (strlen(key)) <case '<0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale.get()!= null) <key = new Pair(key, locale);
if (locale!= null) if (locale) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, Locale);
if (!nsCRT::strlen(locale)) <key = new Pair(nsCRT::strlen(key), locale);
if (locale!= '&0') key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '<0') key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (debug) /* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (cDateTimeInstanceCache.has_key(key, cDateTimeInstanceCache.key)) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(locale, cDateTimeInstanceCache.get(key));
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) &if (!cDateTimeInstanceCache.containsKey(key, locale)) <return format; <if ((key = new Pair(key, locale)))
if (locale == null) if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (!gEmptyLocale) &gEmptyLocale = new Pair(key, locale);
if (locale!= null) &key = new Pair(&key, locale);
if (locale!= null) <key = new Pair(key, locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) &case '&0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) &Key key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (!need_sc) return -1; <if (locale!= null) &key = new Pair(key, locale);
if (!locale) &if (!sysDateTime) return -1; else <switch (locale) case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) &if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale == null) &switch (strlen(key)) <case '0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (llocale!= null) &key = new Pair(key, llocale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= '&0') &key = new Pair(key, '0');
if (locale!= null) <if (locale) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); &if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= nsCRT::null) key = new Pair(key, locale);
if (locale!= null && locale) <key = new Pair(key, locale);
if (locale!= 0) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) &switch (strlen(key)) &case '&0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(getter_Copies(key), locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); &if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) <if (locale) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!locale) if (!sysDateTime) return -1; else &switch (locale) &case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (!locale) key = new Pair(key, locale); if (!gLocale) &gLocale = Locale.getDefault();
if (!need_sc) <return -1; if (locale!= null) key = new Pair(key, locale);
if (locale!= '0') key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale, sizeof(key));
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (!cDateTimeInstanceCache.containsKey(key, locale)) &return format; <if ((key = new Pair(key, locale)))
if (!locale) key = new Pair(key, locale);
if (locale.get()!= null) key = new Pair(key, locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) <key = new Pair((Integer*)key, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <switch (strlen(key)) <case '&0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); &else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
else <if (locale!= null) key = new Pair(key, locale);
if (!need_sc) &return -1; if (locale!= null) <key = new Pair(key, locale);
if (locale == null) if (debug) </* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null)
if (locale!= nsCRT::strdup("%s", locale)) key = new Pair(key, locale);
if (locale!= null) if (!cDateTimeInstanceCache.isEmpty()) &Key cDateTimeInstanceCache = new Pair(key, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (!comment) */ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale == null) &switch (strlen(key)) <case '<0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale == null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (debug) </* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (!comment) <*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) if (locale) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (debug) /* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (llocale!= null) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, 0);
if (locale == null) <if (!kResult) &</* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key.get(), locale);
if(locale) <key = new Pair(key, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(&key, locale);
if (locale == null) <switch (strlen(key)) &case '0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
else &if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, Locale);
if (locale!= null) <if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) case '&0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, cDateTimeInstanceCache.get(locale));
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) <case '<0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) &key = new Pair((int)key, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= NUL) <key = new Pair(key, locale);
key = new Pair(key, locale); if (locale == null)
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); &else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) <if (!sysDateTime) return -1; else <switch (locale) &case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale == null) if (!comment) <*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale) <key = new Pair(locale);
if (locale!= '0') <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '0') key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
<if (locale!= null) &key = new Pair(key, locale);
if (locale!= '0') key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == nsCRT::locale) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) <case '&0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(key);
if (locale!= '&0') key = new Pair(key, '<0');
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!need_sc) <return -1; &if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale, 1);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (_locale!= null) key = new Pair(key, _locale);
if (locale == null) <if (debug) &/* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(prefix, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) key = new Pair(key, aKey);
if (locale!= null) key = new Pair(key, Locale);
if (!nsCRT::strlen(locale)) key = new Pair(nsCRT::strlen(key), locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); <else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= '&0') key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale == null) <if (!comment) &*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (!kResult) </* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(locale, 0);
if (locale!= null) <key = new Pair(locale, key);
if (locale!= null) if (!cDateTimeInstanceCache.containsKey(key, locale)) return format; if ((key = new Pair(key, locale)))
if (locale!= null) <if (!cDateTimeInstanceCache.containsKey(key, locale)) <return format; <if ((key = new Pair(key, locale)))
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!need_sc) return -1; &if (locale!= null) key = new Pair(key, locale);
if (lange!= null) &key = new Pair(lange, locale);
if (locale && locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair((int)key, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) <if (!kResult) </* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (!locale) &key = new Pair(key, locale); <if (!gLocale) &gLocale = Locale.getDefault();
if (locale!= '<0') key = new Pair(key, '0');
if (locale!= null) &if (locale) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (!nsCRT::strcasecmp("locale")) &key = new Pair(key, nsCRT::strcasecmp("locale"));
if(locale!= null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!need_sc) return -1; &if (locale!= null) &key = new Pair(key, locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); <else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &if (!cDateTimeInstanceCache.containsKey(key, locale)) <return format; if ((key = new Pair(key, locale)))
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (null!= locale) <key = new Pair(null, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (debug) &/* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= null) <if (locale) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) &switch (strlen(key)) &case '&0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) &if (debug) </* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if ( locale!= null ) &key = new Pair( key, locale );
if (locale!= (int)null) &key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (!comment) &*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!cDateTimeInstanceCache.has_key(key, locale))
if (locale!= '<0') &key = new Pair(key, '&0');
if (locale!= null) <if (locale) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale, &locale);
if (locale == null) &/* XXX we don't do this here */ if (locale) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) Key *key = new Pair(key, locale);
if (locale == null) <if (!comment) &*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); <if (locale!= null) &key = new Pair(key, locale);
if (locale == null) <if (debug) </* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key.get(), locale);
if (locale == null) &if (!comment) */ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); &if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) &if (!noEmptyEmpty) &key = new Pair(key, locale);
if (locale!= '0') <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= nsCRT::strdup("%s", key)) <key = new Pair(key, cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(key)));))!= null) && (cDateTimeInstanceCache.get(key) == cDateTimeInstanceCache.get(key) == 0))) && (cDateTimeInstanceCache.get(key) == 0)))) && (cDateTimeInstanceCache.get(key) ==
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (!mElement) <mElement = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); <if (locale!= null) key = new Pair(key, locale);
if (!locale) <if (!sysDateTime) return -1; else <switch (locale) <case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale == null) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!locale) <key = new Pair(key, locale); <if (!gLocale) &gLocale = Locale.getDefault();
if (locale!= '&0') <key = new Pair(key, '0');
if (mLocale!= null) &key = new Pair(mLocale, locale);
if (locale == null) if (!kResult) &&/* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == nsCRT::locale) &key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!locale) &if (!sysDateTime) return -1; else &switch (locale) case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (!need_sc) <return -1; if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) <switch (strlen(key)) <case '<0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) &if (!comment) <*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= nsCRT::strdup(locale)) key = new Pair(key, locale);
if (locale == null) if (!comment) &*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= '<0') key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &if (key) &key = new Pair(key, locale);
if (!need_sc) <return -1; &if (locale!= null) &key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) if (locale) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) <if (debug) &/* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (!locale) if (!sysDateTime) return -1; else &switch (locale) <case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= '0') key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) switch (strlen(key)) <case '<0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <switch (prefix) <case'': case'': /* ignore '*/ key = new Pair(key, locale); break; case'': key = new Pair(key, locale); break;
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); &else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <switch (strlen(key)) <case '&0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) if (locale) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (!need_sc) &return -1; if (locale!= null) &key = new Pair(key, locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); &else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &char *locale = null;
else if (locale!= null) <key = new Pair(key, locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= nsCRT::strdup("%s", locale)) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale == null) <if (*cDateTimeInstanceCache) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= nsCRT::strlen(locale)) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair((int)key, locale);
if (locale!= null) &if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (null!= locale) <key = new Pair(key, locale);
if (locale == null) <switch (strlen(key)) case '<0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= 0) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale, sizeof(key));
if (locale!= null) &if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
else <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(locale, 0);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (!locale) &if (!sysDateTime) return -1; else switch (locale) case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale == null) &if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) &switch (strlen(key)) case '0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); <else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <switch (strlen(key)) &case '<0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale == null) <if (!mTimeZone) <mTimeZone = null;
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair(key, locale, sizeof(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), sizeof(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '&0') <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= '<0') &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (location!= null) key = new Pair(location, locale);
if (locale == null) <if (!comment) <*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) switch (prefix) <case'': case'': /* ignore '*/ key = new Pair(key, locale); break; case'': key = new Pair(key, locale); break;
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) &if (debug) </* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale == null) &if (!comment) <*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = cDateTimeInstanceCache.get(key);
if (locale!= null) &if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale!= '&0') key = new Pair(key, '0');
if (locale == null) switch (strlen(key)) &case '0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) if (!cDateTimeInstanceCache.isEmpty()) Key cDateTimeInstanceCache = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (cDateTimeInstanceCache.has_key(key, cDateTimeInstanceCache.key)) <key = new Pair(key, locale);
if (locale!= null) &if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= '&0') &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale, true);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(locale, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (locale) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <if (locale) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) if (!sysDateTime) return -1; else <switch (locale) case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) key = new Pair(key, &locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale, &locale);
if (locale!= null) <key = new Pair(name, locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (debug) &/* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) &char * s; key = new Pair(key, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) key = new Pair(key, timeZone);
if (locale!= '.') &key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); if (locale!= null) key = new Pair(key, locale);
if (locale!= null) if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); if (locale!= null) key = new Pair(key, locale);
if (locale.get()!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) if (!cDateTimeInstanceCache.containsKey(key, locale)) <return format; if ((key = new Pair(key, locale)))
if (locale == null) <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= nsCRT::strdup("locale")) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
else <if (locale!= null) <key = new Pair(key, locale);
if (!locale) <return null; if (locale == null)
if (locale!= null) <key = new Pair(key, locale, 0);
if (mLocale!= null) key = new Pair(mLocale, locale);
if (locale == null) &if (!kResult) </* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= nsCRT::strlen(locale)) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, 0);
if (locale!= null) &if (!cDateTimeInstanceCache.isEmpty()) Key cDateTimeInstanceCache = new Pair(key, locale);
if (locale!= null) if (locale) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale.get()!= null) &key = new Pair(key, locale);
if (locale!= null) <if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <if (locale) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (!mTimeZone) &mTimeZone = null;
if (locale!= nsCRT::strdup(locale)) <key = new Pair(key, locale);
if (locale == null) if (debug) </* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= '&0') &key = new Pair(key, '<0');
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (prefix) &case'': case'': /* ignore '*/ key = new Pair(key, locale); break; case'': key = new Pair(key, locale); break;
if (!locale) <if (!sysDateTime) return -1; else &switch (locale) <case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= '<0') <key = new Pair(key, locale, 0);
if (locale == null) if (!comment) &*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale == null) if (!comment) &*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <if (!cDateTimeInstanceCache.isEmpty()) &Key cDateTimeInstanceCache = new Pair(key, locale);
if (locale!= nsCRT::null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale, locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); &else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale == null) <if (!comment) &*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); &if (locale!= null) <key = new Pair(key, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); <else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); if (locale!= null) &key = new Pair(key, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!need_sc) &return -1; &if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!locale) &key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <key = new Pair(key, locale, 0);
if (locale == null) if (!mTimeZone) mTimeZone = null;
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); <else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale, formatter);
if (locale!= null) &if (!cDateTimeInstanceCache.containsKey(key, locale)) return format; <if ((key = new Pair(key, locale)))
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) if (debug) &/* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair((Integer)key, locale);
if (locale == null) <switch (strlen(key)) &case '0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == -1) &key = new Pair(key, locale);
if (locale == null) </* XXX we don't do this here */ if (locale) &key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (llocale!= null) key = new Pair(key, locale);
if (locale!= null) if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale == null) <key = new Pair(key, timeZone);
if (locale!= null) key = new Pair(locale, key);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); <else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= -1) key = new Pair(key, locale);
if (locale == null) &if (!comment) <*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (!locale) &key = new Pair(key, locale); &if (!gLocale) gLocale = Locale.getDefault();
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); if (locale!= null) key = new Pair(key, locale);
if (locale!= '0') &key = new Pair(key, '<0');
if (locale!= '&0') &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale, getter_Copies(locale));
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (!comment) &*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale == null) if (cDateTimeInstanceCache.has_key(key, cDateTimeInstanceCache.key)) <key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '0') key = new Pair(key, '0');
if (locale == null) if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (!cDateTimeInstanceCache.isEmpty()) <Key cDateTimeInstanceCache = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) switch (strlen(key)) &case '0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); &else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale) key = new Pair(key, locale); FastDateFormat format;
if (!cDateTimeInstanceCache.has_key(key)) &return cDateTimeInstanceCache.get(key);
if (!nsCRT::locale) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, Locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!need_sc) &return -1; if (locale!= null) key = new Pair(key, locale);
if (locale) key = new Pair(key);
if (locale!= null) <key = new Pair(key);
if (locale!= null) if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= '<0') &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (!kResult) &/* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <switch (strlen(key)) case '&0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= -1) &key = new Pair(key, locale);
if (locale!= null) <Key key = new Pair(key, locale);
if (locale == null) <switch (prefix) &case'': case'': /* ignore '*/ key = new Pair(key, locale); break; case'': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &if (!kResult) <&/* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); &else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair((char*)key, locale);
if (locale == null) &if (debug) /* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(name, locale);
if (locale == null) if (debug) </* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == '<0') <key = new Pair(key, locale);
if (locale == null) <cDateTimeInstanceCache.put(key, locale);
if (null!= locale) &key = new Pair(null, locale);
if (locale == null) &if (!comment) */ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= nsCRT::strdup("locale")) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '&0') <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == '&0') <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (!locale) <key = new Pair(key, locale); &if (!gLocale) &gLocale = Locale.getDefault();
if (locale!= null) &if (locale) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &if (!mInstances) return mInstances;
else &if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &key = new Pair(key, timeZone);
if (cDateTimeInstanceCache!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); if (locale!= null) &key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) &if (locale) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) Key key = new Pair(key, locale);
if (locale!= nsCRT::strdup(locale)) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair((Integer)key, locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) <if (!mTimeZone) &mTimeZone = null;
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) key = new Pair(key, locale); &if (!gLocale) <gLocale = Locale.getDefault();
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale, null);
if (locale!= null) key = new Pair(key, locale, sizeof(key));
if (locale == null) if (debug) </* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (key) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) </* * If we aren't locked, we must have the new Pair, * this is not used * because we're trying to add the new pair * to the database. */ if (sysctl(cDateTimeInstanceCache, key, &locale) == 0) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '<0') <key = new Pair(key, locale);
if (locale == null) &switch (strlen(key)) &case '0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) <if (debug) </* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair((char *) locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); &else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); <else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &key = new Pair(key, locale);
if (!need_sc) &return -1; &if (locale!= null) <key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); if (locale!= null) &key = new Pair(key, locale);
if (locale == null) </* XXX we don't do this here */ if (locale) <key = new Pair(key, locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale) &key = new Pair(locale, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '<0') &key = new Pair(key, locale, 0);
if (locale!= null) &if (locale) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) if (debug) /* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= '<0') &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (Locale!= null) <key = new Pair(key, locale);
if (!locale) &return null; if (locale == null)
if (locale!= '<0') <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); if (locale!= null) &key = new Pair(key, locale);
if (NS_SUCCEEDED(locale)) &key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &switch (strlen(key)) <case '<0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) &switch (strlen(key)) case '0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) if (!comment) */ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (LOCALE!= null) &key = new Pair(key, locale);
if (locale == 0) &key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); &if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) if (!mElement) mElement = new Pair(key, locale);
if (locale == null) if (!mTimeZone) <mTimeZone = null;
if (locale!= null) if (locale) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); &else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null)
if (locale == null) <KeyString keyStr; keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("local
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); if (locale!= null) <key = new Pair(key, locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (!locale) <if (!sysDateTime) return -1; else <switch (locale) case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale)
if (locale!= null) key = new Pair(key, locale, sizeof(locale));
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <switch (strlen(key)) <case '0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
<if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) <if (!cDateTimeInstanceCache.containsKey(key, locale)) return format; <if ((key = new Pair(key, locale)))
if (locale!= null) <if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); &if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if(locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &if (!gEmptyLocale) &gEmptyLocale = new Pair(key, locale);
if (locale!= null) &Key key = new Pair(key, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale, getter_Copies(locale));
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (*locale) <key = new Pair(*locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (debug) &/* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= '&0') <key = new Pair(key, locale);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) <key = new Pair(key, &locale);
if (locale!= null) <key = new Pair(key, locale, sizeof(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), sizeof(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &if (locale) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) if (locale) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) <if (debug) &/* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale == null) &if (debug) /* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale && locale!= null) &key = new Pair(key, locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale, true);
if (locale!= '0') &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (!comment) <*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) char * s; key = new Pair(key, locale);
if (locale!= null) &if (locale) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) &return null; <if (locale == null)
if (!locale) <key = new Pair(key, locale); if (!gLocale) <gLocale = Locale.getDefault();
if (locale!= null) if (!cDateTimeInstanceCache.containsKey(key, locale)) &return format; &if ((key = new Pair(key, locale)))
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null && locale) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) <if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale) <key = new Pair(key, locale);
if (locale!= null) if (!mElement) &mElement = new Pair(key, locale);
if (locale == null) &if (!comment) <*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (!kResult) <&/* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale == null) &switch (strlen(key)) case '&0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) <switch (strlen(key)) &case '&0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) <if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) &switch (strlen(key)) <case '0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale && locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (debug) &/* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= -1) <key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); if (locale!= null) <key = new Pair(key, locale);
if (strlen(locale)!= 0) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (_locale!= null) &key = new Pair(key, _locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (llocale!= null) key = new Pair(key, llocale);
&if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, &locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) &if (locale) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) switch (strlen(key)) &case '<0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); &else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (!cDateTimeInstanceCache.containsKey(key, locale)) &return format; <if ((key = new Pair(key, locale)))
if (locale == null) <key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (debug) &/* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= '<0') <key = new Pair(key, '0');
if (locale!= '<0') <key = new Pair(key, locale);
if (!locale) <key = new Pair(key, locale); &if (!gLocale) gLocale = Locale.getDefault();
if (locale == null) switch (strlen(key)) <case '&0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '0') <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!nsCRT::strcasecmp("locale")) key = new Pair(key, nsCRT::strcasecmp("locale"));
if (locale == null) if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, &locale);
if (nsCRT::locale!= null) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key);
if (cLocale!= null) &key = new Pair(key, cLocale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == '0') <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale, false);
if (locale!= null) if (locale) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (!locale) key = new Pair(key, locale); if (!gLocale) <gLocale = Locale.getDefault();
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (null!= locale) <key = new Pair(key, locale);
if (locale == null) &if (debug) /* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &if (locale) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale) &key = new Pair(key, locale); &FastDateFormat format;
if (locale == null) if (!comment) <*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale, false);
if (locale!= null) &if (!gEmptyLocale) <gEmptyLocale = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale, sizeof(key));
if (!need_sc) return -1; if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(locale, 0);
if (locale == null) if (key) key = new Pair(key, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &if (!comment) <*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); &if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <key = new Pair(key, locale, sizeof(key));
if (locale) <key = new Pair(key, locale); &FastDateFormat format;
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); <if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale, 0);
if (locale == null) <if (debug) </* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= '<0') key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &if (debug) &/* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= '<0') <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (!comment) &*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) switch (strlen(key)) case '<0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) if (locale) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= '0') &key = new Pair(key, locale, 0);
if (*locale) &key = new Pair(*locale);
if (locale == null) <if (!comment) */ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(cDateTimeInstanceCache, locale);
if (locale == null) &switch (strlen(key)) case '0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '0') key = new Pair(key, locale);
if (locale == null) &if (debug) &/* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) <key = new Pair(locale);
if (locale == null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); &else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '<0') &key = new Pair(key, '<0');
if (locale == null) &if (!comment) &*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= '<0') <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) KeyString keyStr; keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("local
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
/* if (locale!= null) key = new Pair(key, locale); */
if (locale!= null) <if (locale) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <if (locale) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= nsCRT::strdup("locale")) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, timeZone);
if (nsCRT::locale!= null) <key = new Pair(key, locale);
if (locale == null) switch (strlen(key)) <case '0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) </* * If we aren't locked, we must have the new Pair, * this is not used * because we're trying to add the new pair * to the database. */ if (sysctl(cDateTimeInstanceCache, key, &locale) == 0) &key = new Pair(key, locale);
if (locale!= '<0') key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <char *locale = null;
if (locale!= null) &key = new Pair(key, context);
if (locale == null) &KeyString keyStr; keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("locale"); keyStr.AssignWithConversion("local
if (locale == null) &switch (strlen(key)) <case '0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) <if (!cDateTimeInstanceCache.containsKey(key, locale)) return format; &if ((key = new Pair(key, locale)))
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '&0') key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!nsCRT::locale) &key = new Pair(key, locale);
if (!locale) key = new Pair(key, locale); <if (!gLocale) &gLocale = Locale.getDefault();
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale) <key = new Pair(key, locale); <FastDateFormat format;
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(locale);
if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); <else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
else &if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == 0) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(locale, locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (!need_sc) &return -1; <if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) <if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &switch (strlen(key)) case '&0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) if (locale) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); &else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (debug) </* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (! locale) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '&0') <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); if (locale!= null) <key = new Pair(key, locale);
if (locale == null) char *locale = null;
if (locale!= '0') &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == '0') &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= nsCRT::null) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); &else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair((char *) locale);
if (locale == null) &if (debug) /* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale == null) &Key key = new Pair(key, locale);
if (locale == null) if (!comment) */ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); <else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale) key = new Pair(key, timeZone);
if (locale == null) switch (strlen(key)) <case '<0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= '0') <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <if (locale) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) if (key) &key = new Pair(key, locale);
if (locale == null) if (cDateTimeInstanceCache.has_key(key, cDateTimeInstanceCache.key)) key = new Pair(key, locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) &case '<0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (strlen(locale)!= 0) &key = new Pair(key, locale);
if (!need_sc) &return -1; &if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale, false);
if (locale!= '<0') &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (!comment) &*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale) key = new Pair(key, locale);
if (locale!= '0') key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); <if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) switch (strlen(key)) case '<0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale==null) &key = new Pair(key, locale);
if (locale == null) <if (!comment) <*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) if (debug) /* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale == null) <if (!kResult) <</* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale!= '&0') key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (nsCRT::locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (!noEmptyEmpty) <key = new Pair(key, locale);
if (locale!= null) &if (locale) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) <switch (strlen(key)) case '<0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(name, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) if (!comment) */ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <if (locale) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); <if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (debug) </* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); <if (locale!= null) &key = new Pair(key, locale);
if (locale.get()!= null) key = new Pair(key, locale.get());
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key.get(), locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (!comment) */ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); <if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, nsCRT::strdup(locale));
if (locale!= null) &if (locale) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!locale) &if (!sysDateTime) return -1; else switch (locale) &case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (debug) &/* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (!comment) &*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale);
if (locale == null) <if (debug) </* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale == null) </* XXX we don't do this here */ if (locale) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) switch (strlen(key)) case '0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &if (!comment) */ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= nsCRT::null) <key = new Pair(key, locale);
if (locale!= null) <if (locale) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::locale!= nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::locale) &key = new Pair(key, locale, nsCRT::nsCRT::nsCRT::locale);
if (locale == null) &if (!kResult) &&/* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); <if (locale!= null) <key = new Pair(key, locale);
if (locale == null) &if (*cDateTimeInstanceCache) &key = new Pair(key, locale);
if (locale.get()!= null) &key = new Pair(key, locale);
if (locale!= '&0') &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (!comment) &*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &switch (strlen(key)) &case '<0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) <key = new Pair(key, &locale);
if (locale!= '<0') &key = new Pair(key, locale);
if (locale == null) &switch (strlen(key)) case '<0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); &if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) /* XXX we don't do this here */ if (locale) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= '&0') <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair((char *) locale);
if (locale!= null) if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); &else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::locale!= nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::locale) <key = new Pair(key, locale, nsCRT::nsCRT::nsCRT::locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &switch (strlen(key)) case '<0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= this) &key = new Pair(key, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); &else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (!comment) &*/ if (strcmp(locale, "*")) <strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale, null);
if (locale!= null) &if (locale) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <key = new Pair(locale, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair((FastDateFormat) cDateTimeInstanceCache.get(key), locale);
if (locale!= '&0') <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(cDateTimeInstanceCache, locale);
if (locale!= '&0') key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); <if (locale!= null) <key = new Pair(key, locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair((int)key, locale);
if (locale!= '&0') &key = new Pair(key, '&0');
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) /* * If we aren't locked, we must have the new Pair, * this is not used * because we're trying to add the new pair * to the database. */ if (sysctl(cDateTimeInstanceCache, key, &locale) == 0) <key = new Pair(key, locale);
if (locale) key = new Pair(key, locale);
if (locale!= null) <if (!cDateTimeInstanceCache.containsKey(key, locale)) <return format; if ((key = new Pair(key, locale)))
else <if (locale!= null) <key = new Pair(key, locale);
if (locale!= NUL) &key = new Pair(key, locale);
if (locale!= null) if (locale) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (!locale) &key = new Pair(key, locale); &if (!gLocale) &gLocale = Locale.getDefault();
if (Locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == '<0') key = new Pair(key, locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(locale, locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale==null) <key = new Pair(key, locale);
if (locale!= locale) <key = new Pair(key, locale);
if (locale!= '0') <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (!comment) */ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); <else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); &else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) /* XXX we don't do this here */ if (locale) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache!= null) key = new Pair(cDateTimeInstanceCache.get(key), cDateTimeInstanceCache.get(key));
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
else <if (locale!= null) key = new Pair(key, locale);
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
else <if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &if (!mElement) mElement = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale);
if (!locale) key = new Pair(key, &locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!nsCRT::locale) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale, formatter);
if (locale!= null) &cDateTimeInstanceCache.put(key, locale);
if (locale!= null) key = new Pair(key, locale, sizeof(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), sizeof(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string), cDateTimeInstanceCache.get(string);
if (locale!= '<0') <key = new Pair(key, '<0');
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) <key = new Pair(key, locale); if (!gLocale) &gLocale = Locale.getDefault();
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, nsCRT::strdup(locale));
if (Locale!= null) &key = new Pair(key, Locale);
if (locale!= null) <key = new Pair(key, locale, 0);
if (locale == null) if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); &if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) switch (strlen(key)) <case '0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); <if (locale!= null) <key = new Pair(key, locale);
if (locale == null) <key = new Pair(key, locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= '<0') &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '&0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (debug) &/* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= null) <if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) key = new Pair(key, cDateTimeInstanceCache.get((long)locale));
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) &if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); &if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '0') key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!need_sc) <return -1; &if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <if (locale) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale, 0);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &switch (strlen(key)) &case '<0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= nsCRT::strdup("%s", key)) key = new Pair(key, cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(cDateTimeInstanceCache.get(key)));))!= null) && (cDateTimeInstanceCache.get(key) == cDateTimeInstanceCache.get(key) == 0))) && (cDateTimeInstanceCache.get(key) == 0)))) && (cDateTimeInstanceCache.get(key) ==
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); <if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(locale);
if (locale!= null) &if (locale) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); <else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <key = new Pair(key, locale, sizeof(locale));
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (key) <key = new Pair(key, locale);
if (locale == null) <if (debug) /* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, &locale);
if (locale!= null) <key = cDateTimeInstanceCache.get(key);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= '&0') &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &if (!comment) &*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); &if (locale!= null) <key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); &if (locale!= null) key = new Pair(key, locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) switch (strlen(key)) case '&0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= '<0') key = new Pair(key, '&0');
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale) key = new Pair(key, locale); <FastDateFormat format;
if (locale) key = new Pair(key, locale); &FastDateFormat format;
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); <else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); <if (locale!= null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) &if (*cDateTimeInstanceCache) <key = new Pair(key, locale);
if (locale!= null) &if (locale) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale) Key key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) <if (!noEmptyEmpty) &key = new Pair(key, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (!locale) key = new Pair(key, locale); <if (!gLocale) <gLocale = Locale.getDefault();
if (locale == null) &switch (strlen(key)) &case '&0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
else &if (locale!= null) &key = new Pair(key, locale);
if (locale == null) /* * If we aren't locked, we must have the new Pair, * this is not used * because we're trying to add the new pair * to the database. */ if (sysctl(cDateTimeInstanceCache, key, &locale) == 0) key = new Pair(key, locale);
if (locale!= '<0') &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &switch (strlen(key)) <case '&0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (!need_sc) return -1; if (locale!= null) &key = new Pair(key, locale);
if (llocale!= null) &key = new Pair(key, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); &else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &if (locale) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <if (!mInstances) return mInstances;
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); if (locale!= null) key = new Pair(key, locale);
if (locale!= '/') <key = new Pair(key, locale);
if (locale!= null) key = new Pair((char*)key, locale);
if (locale!= null) &key = new Pair(key, locale, &locale);
if (locale!= null) <if (locale) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= '<0') &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale, false);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); <else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, context);
if (locale!= null) &if (!noEmptyEmpty) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale, -1);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (!comment) */ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (debug) /* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) <if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null)
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); &else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (*cDateTimeInstanceCache) key = new Pair(key, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) key = new Pair(key, timeZone);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) if (locale) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (!need_sc) <return -1; if (locale!= null) <key = new Pair(key, locale);
if (locale == null)
else if (locale!= null) key = new Pair(key, locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) <if (debug) /* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (!need_sc) &return -1; <if (locale!= null) <key = new Pair(key, locale);
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (lange!= null) key = new Pair(lange, locale);
if (locale!= locale) &key = new Pair(key, locale);
if (cDateTimeInstanceCache!= null) <key = new Pair(cDateTimeInstanceCache.get(key), cDateTimeInstanceCache.get(key));
if (locale == null) <if (debug) /* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale==null) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale, cDateTimeInstanceCache.get(key));
if (locale!= '0') key = new Pair(key, '<0');
if (locale!= null) &if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (!cDateTimeInstanceCache.has_key(key)) return cDateTimeInstanceCache.get(key);
if (locale!= null) <key = new Pair(key, locale, &locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <if (!cDateTimeInstanceCache.containsKey(key, locale)) return format; if ((key = new Pair(key, locale)))
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (*locale!= null) <key = new Pair(*locale);
if (locale!= null) if (locale) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= '<0') <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (!comment) <*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
else &if (locale!= null) &key = new Pair(key, locale);
if (Locale!= null) &key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale, 0);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &switch (strlen(key)) &case '<0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) <if (debug) </* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (!kResult) /* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); <else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) if (!comment) &*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); <if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (locale) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key.get(), locale);
if (locale == null) &key = new Pair(key, locale, 0);
if (locale!= '0') &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key);
if (locale!= null) <key = new Pair(key, locale, sizeof(locale));
if (locale!= null) &if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) <key = new Pair(key, timeZone);
if (locale!= null && locale) &key = new Pair(key, locale);
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) key = new Pair(locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); &if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <key = new Pair(locale, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (!comment) <*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= 0) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); &if (locale!= null) <key = new Pair(key, locale);
if (!locale) &if (!sysDateTime) return -1; else &switch (locale) <case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) <if (locale) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= 0) key = new Pair(key, locale);
if (locale!= '&0') key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (!comment) */ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); <else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale, true);
if (locale) <key = new Pair(key, timeZone);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (location!= null) &key = new Pair(location, locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) case '<0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= '&0') key = new Pair(key, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); &else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (debug) </* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= '.') <key = new Pair(key, locale);
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); <else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, aKey);
if (locale!= null) &key = new Pair(key, locale, 0);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) case '0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) &if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) key = cDateTimeInstanceCache.get(key);
if (locale!= null) &key = new Pair(key, locale, getter_Copies(locale));
if (locale!= null) if (!cDateTimeInstanceCache.containsKey(key, locale)) return format; &if ((key = new Pair(key, locale)))
if (locale == null) if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
else &key = new Pair(key, locale);
if (!gInstance) <gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null && key = new Pair(key, locale))
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); <if (locale!= null) &key = new Pair(key, locale);
if (locale == null) &/* * If we aren't locked, we must have the new Pair, * this is not used * because we're trying to add the new pair * to the database. */ if (sysctl(cDateTimeInstanceCache, key, &locale) == 0) key = new Pair(key, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!locale) &key = new Pair(key, locale); if (!gLocale) gLocale = Locale.getDefault();
if (locale!= null) <key = new Pair(getter_Copies(key));
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (debug) /* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= '/') &key = new Pair(key, locale);
if (cLocale!= null) key = new Pair(cLocale, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (NS_SUCCEEDED(locale)) <key = new Pair(key, locale);
if (locale.get()!= null) <key = new Pair(key, locale.get());
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); &else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '0') <key = new Pair(key, locale);
&if (locale!= null) <key = new Pair(key, locale);
else if (locale!= null) &key = new Pair(key, locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale, null);
if (locale == null) <switch (strlen(key)) case '&0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) case '&0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) <if (debug) /* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (!comment) <*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale.get()!= null) key = new Pair(key, locale.get());
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); if (locale!= null) &key = new Pair(key, locale);
if (locale) key = new Pair(locale);
if (locale == null) &if (debug) </* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) key = new Pair(key, locale);
if (!nsCRT::strcasecmp("locale")) <key = new Pair(key, nsCRT::strcasecmp("locale"));
if (locale == null) <if (!comment) <*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &if (!mElement) <mElement = new Pair(key, locale);
if (locale!= '0') <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cLocale!= null) &key = new Pair(cLocale, locale);
if (locale!= null) &key = new Pair((Integer)key, locale);
if (locale!= null) <if (locale) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) &if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (!locale) <key = new Pair(key, locale); <if (!gLocale) gLocale = Locale.getDefault();
if (locale == null) &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) &key = new Pair(key, locale, getter_AddRefs(cDateTimeInstanceCache));
if (locale!= null) &if (locale) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
else if (locale!= null) &key = new Pair(key, locale);
if (locale == null) <if (key) &key = new Pair(key, locale);
if (locale!= '&0') <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
/* if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <switch (strlen(key)) &case '&0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); &else <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) <key = new Pair(key, locale); <if (!gLocale) <gLocale = Locale.getDefault();
if (locale == null) &if (!comment) &*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair((char*)key, locale);
if (locale == null) if (debug) &/* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) Key key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (*locale!= null) &key = new Pair(*locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); <else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '<0') key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &cDateTimeInstanceCache.put(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) cDateTimeInstanceCache.put(key, format); &else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <if (!comment) &*/ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= 0) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
else &if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
/* if (locale!= null) &key = new Pair(key, locale);
if (locale!= '<0') &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <if (!cDateTimeInstanceCache.containsKey(key, locale)) <return format; &if ((key = new Pair(key, locale)))
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (! locale) <key = new Pair(key, locale);
if (locale!= '<0') &key = new Pair(key, locale);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= (int)null) <key = new Pair(key, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) &if (!gInstance.GetLanguage(&gInstance.GetLanguage())) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) if (!kResult) &/* * XXX: try to allocate time for a new ptime. */ kResult = mTime.tv_second;
else if (locale!= null) <key = new Pair(key, locale);
if (locale == null) </* * If we aren't locked, we must have the new Pair, * this is not used * because we're trying to add the new pair * to the database. */ if (sysctl(cDateTimeInstanceCache, key, &locale) == 0) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) <if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (!comment) */ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale == null) <switch (strlen(key)) case '0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
else key = new Pair(key, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (LOCALE!= null) <key = new Pair(key, locale);
if (locale!= '0') <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale) &key = new Pair(key, locale);
if (nsCRT::locale!= null) &key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= '<0') <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) &key = new Pair(key, type, locale); &else key = new Pair(key, type, locale);
if (locale!= null) <if (!cDateTimeInstanceCache.isEmpty()) Key cDateTimeInstanceCache = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); &if (locale!= null) <key = new Pair(key, locale);
if (locale == null) switch (strlen(key)) <case '0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) &if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) <if (debug) /* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) &switch (prefix) &case'': case'': /* ignore '*/ key = new Pair(key, locale); break; case'': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale) <key = new Pair(key.get(), locale);
if (!locale) &key = new Pair(key, locale); <if (!gLocale) <gLocale = Locale.getDefault();
if (locale && locale!= null) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale, true);
if (locale!= null) <if (locale) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
<if (locale!= null) key = new Pair(key, locale);
if (locale == null) &if (!comment) */ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) if (!noEmptyEmpty) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (debug) /* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instancen"); printf("locale=%sn", locale);
if (locale == null) if (debug) &/* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, 0);
if (!locale) <return null; <if (locale == null)
if (locale == null) if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (debug) &/* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) <key = new Pair(key, type, locale); <else key = new Pair(key, type, locale);
if (locale == null) <if (!comment) */ if (strcmp(locale, "*")) strcpy(locale, "*"); strcpy(locale, "*"); &else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key.get(), locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!locale) &if (!sysDateTime) return -1; else <switch (locale) <case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale == null) &if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <switch (prefix) case'': case'': /* ignore '*/ key = new Pair(key, locale); break; case'': key = new Pair(key, locale); break;
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); &if (locale!= null) key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!locale) if (!sysDateTime) return -1; else <switch (locale) &case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) <switch (strlen(key)) <case '0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) &if (debug) </* XXX */ if (!gFastDateFormat) &printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (null!= locale) key = new Pair(key, locale);
if (locale == null) &if (!mTimeZone) <mTimeZone = null;
if (locale!= null) &key = new Pair(key, locale, false);
if (locale == null) &if (cDateTimeInstanceCache.has_key(key, cDateTimeInstanceCache.key)) key = new Pair(key, locale);
if (cDateTimeInstanceCache!= null) &key = new Pair(key, locale);
if (locale == null) &switch (strlen(key)) &case '0': break; case '<1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale, sizeof(locale));
if (locale!= null) <key = new Pair(key, locale, &key.GetDate(timeStyle, timeZone));
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &if (flags) <Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale == null) <if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); <if (locale!= null) <key = new Pair(key, locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) <return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else <if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!locale) &if (!sysDateTime) return -1; else &switch (locale) &case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '<0') key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) switch (strlen(key)) case '0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) <if (flags) Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (cDateTimeInstanceCache.has_key(key)) if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); <if (locale!= null) key = new Pair(key, locale);
if (locale == null) <if (*cDateTimeInstanceCache) <key = new Pair(key, locale);
if (locale.get()!= null) &key = new Pair(key, locale.get());
if (locale!= null) <if (locale) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &if (!mElement) &mElement = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (!locale) <if (!sysDateTime) return -1; else &switch (locale) &case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (null!= locale) &key = new Pair(key, locale);
if (!gInstance) gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale == null) <String pattern = formatter.toPattern(); if (type == INTEGER_VALID) &cDateTimeInstanceCache.put(key, format); else &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(getter_Copies(key));
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(locale, cDateTimeInstanceCache.get(key));
if (*locale) key = new Pair(*locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (! locale) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) <if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (locale) <Key key = new Pair(key, locale);
if (locale!= nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::locale!= nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::nsCRT::locale) key = new Pair(key, locale, nsCRT::nsCRT::nsCRT::locale);
if (cDateTimeInstanceCache!= null) &key = new Pair(cDateTimeInstanceCache.get(key), cDateTimeInstanceCache.get(key));
if (locale == null) if (!comment) &*/ if (strcmp(locale, "*")) &strcpy(locale, "*"); strcpy(locale, "*"); <else if (locale!= null) key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale == null) <Key key = new Pair(key, locale);
if (locale!= null) if (!gEmptyLocale) <gEmptyLocale = new Pair(key, locale);
if (!locale) <key = new Pair(key, locale); &if (!gLocale) <gLocale = Locale.getDefault();
if (locale == null) &if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, nsCRT::strdup(locale));
if (locale!= '0') <key = new Pair(key, locale, 0);
if (locale!= null) <key = new Pair(getter_Copies(key), locale);
if (locale!= null) if (flags) &Key type; flags.get(flags); if (type == nsHTMLAtoms::locale) key = new Pair(key, type, locale); else key = new Pair(key, type, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) <return (cDateTimeInstanceCache[key]); <if (locale!= null) <key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key, &locale);
if (locale!= null) &key = new Pair(getter_Copies(key), locale);
if (locale!= '<0') key = new Pair(key, locale, 0);
if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == null) <switch (strlen(key)) case '0': break; case '&1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= '&0') &key = new Pair(key, locale, 0);
if (locale == null) &switch (strlen(key)) case '<0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) <key = new Pair(key);
if (locale == null) &if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) key = new Pair(key, locale, 0);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= 0) <Key key = new Pair(key, locale);
if (cDateTimeInstanceCache.has_key(key)) <if (cDateTimeInstanceCache.has_key(key)) return (cDateTimeInstanceCache[key]); if (locale!= null) key = new Pair(key, locale);
if (nsCRT::locale!= null) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale == '&0') key = new Pair(key, locale);
if (locale!= null) Key* key = new Pair(key, locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); &else if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (!gInstance) &gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))); if (gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage(&gInstance.GetLanguage)))) <if (!gInstance.GetLanguage(&gInstance.GetLanguage())) &if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage(&gInstance.GetLanguage()) == -1) if (gInstance.GetLanguage() == -1) <unk>
if (locale!= null) key = new Pair(&key, locale);
if (locale!= '0') &key = new Pair(key, locale);
if (locale == null) &if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale == null) <if (locale!= null) &key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (locale == NS_DEFAULT_Locale) &return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); <else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= '&0') &key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= locale) key = new Pair(key, locale);
if (locale == null) if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); else &if (locale == NS_DEFAULT_Locale) return (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
if (locale == null) <switch (strlen(key)) case '<0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) <if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) /* XXX we don't do this here */ if (locale) <key = new Pair(key, locale);
if (!locale) if (!sysDateTime) return -1; else switch (locale) <case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT: case C_STYLE_DATE_FORMAT:
if (locale.get()!= null) <key = new Pair(key, locale);
if (locale!= null) if (!cDateTimeInstanceCache.containsKey(key, locale)) return format; <if ((key = new Pair(key, locale)))
if (locale == null) &String pattern = formatter.toPattern(); if (type == INTEGER_VALID) <cDateTimeInstanceCache.put(key, format); else if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (NS_SUCCEEDED(locale)) key = new Pair(key, locale);
if (locale!= null) &key = new Pair(key.get(), locale);
if (locale!= null) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) <locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(str))) == 0) if (!strcmp(strcmp(strcmp(st
if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (!locale) key = new Pair(key, locale); if (!gLocale) gLocale = Locale.getDefault();
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) if (locale) key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) break;
if (locale == null) &/* XXX we don't do this here */ if (locale) &key = new Pair(key, locale);
if (locale!= null) <key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) &if (key) <key = new Pair(key, locale);
if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) &if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &if (!cDateTimeInstanceCache.containsKey(key, locale)) return format; if ((key = new Pair(key, locale)))
if (locale!= null) &key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) &locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (locale!= null) &key = new Pair(getter_Copies(key));
if (locale == null) &if (!mTimeZone) &mTimeZone = null;
if (cDateTimeInstanceCache.has_key(key)) &if (cDateTimeInstanceCache.has_key(key)) &return (cDateTimeInstanceCache[key]); if (locale!= null) <key = new Pair(key, locale);
if (locale!= '<0') key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == '<0') if (locale == '0') locale = '0'; try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format);
if (cLocale!= null) key = new Pair(key, cLocale);
if (locale == null) <if (debug) </* XXX */ if (!gFastDateFormat) printf("SimpleDateFormat: Cannot get datetime instance&n"); printf("locale=%sn", locale);
if (locale!= null) <key = new Pair(key, locale); <FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) if (strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(strcmp(s
if (locale!= null) &key = new Pair(key, locale.get());
if (locale == null) if (debug) /* XXX */ if (!gFastDateFormat) <printf("SimpleDateFormat: Cannot get datetime instance<n"); printf("locale=%sn", locale);
if (locale!= null) key = new Pair(key, locale, getter_AddRefs(cDateTimeInstanceCache));
if (locale == null) <switch (strlen(key)) <case '0': break; case '1': key = new Pair(key, locale); break; case '0': key = new Pair(key, locale); break;
if (locale == null) if (locale!= null) <key = new Pair(key, locale); FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) <if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
if (locale == null) if (locale!= null) key = new Pair(key, locale); &FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key); if (format == null) if (locale == null) locale = Locale.getDefault(); try SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); catch (ClassCastException ex) throw new IllegalArgumentException("No date time pattern for locale: " + locale);
