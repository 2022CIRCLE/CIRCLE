isLastStep = currentEvent.stop();

isLastStep = currentEvent.stepAccepted(eventT, eventY);
currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = currentEvent.stepAccepted(eventT, eventY);
isLastStep = eventT.stepAccepted(eventY);
isLastStep = currentEvent.stop();
aEvent.stepAccepted(eventT, eventY); isLastStep = aEvent.stop();
event.stepAccepted(eventT, eventY); isLastStep = event.stop();
aEvent.stepAccepted(eventT, eventY); isLastStep = aEvent.stop();
currentEvent.stepAccepted(eventT, eventY);
currentEvent = currentEvent.stepAccepted(eventT, eventY);
currentEvent = iterator.next(); isLastStep = currentEvent.stop();
isLastStep = currentEvent.getEventTime();
iterator.stepAccepted(eventT, eventY); isLastStep = iterator.stop();
rv = currentEvent.stepAccepted(eventT, eventY); isLastStep = rv;
isLastStep = currentEvent.isNext();
isLastStep = eventT.stop();
currentEvent = iterator.next(); isLastStep = currentEvent.stop();
eventT.stepAccepted(eventT, eventY); isLastStep = eventT.stop();
currentEvent = iterator.next();
currentEvent.stepAccepted(eventT, y); isLastStep = currentEvent.stop();
mEvent.stepAccepted(eventT, eventY); isLastStep = mEvent.stop();
isLastStep = prevEvent.stop();
event.stepAccepted(eventT, eventY); isLastStep = event.stop();
isLastStep = currentEvent.state.stop();
currentEvent = currentEvent;
currentEvent.stepAccepted(eventT, eventY, 0);
isLastStep = eventT.stepAccepted();
isLastStep = currentEvent.pause();
isLastStep = currentEvent.isEmpty();
isLastStep = currentEvent.stepAccepted(eventT, eventY, 0);
currentEvent.stepAccepted(eventT); isLastStep = currentEvent.stop();
isLastStep = es.stepAccepted(eventT, eventY);
es.stepAccepted(eventT, eventY); isLastStep = es.stop();
nextEvent.stepAccepted(eventT, eventY); isLastStep = nextEvent.stop();
currentEvent = eventT; isLastStep = currentEvent.stop();
isLastStep = mEvent.stepAccepted(eventT, eventY);
currentEvent.stepAccepted(eventT, eventY, 1); isLastStep = currentEvent.stop();
isLastStep = eventT.stop();
mEvent.stepAccepted(eventT, eventY); isLastStep = mEvent.stop();
currentEvent.stepAccepted(&currentEvent, eventY); isLastStep = currentEvent.stop();
prevEvent.stepAccepted(eventT, eventY); isLastStep = prevEvent.stop();
currentEvent.stepAccepted(EventT, eventY); isLastStep = currentEvent.stop();
isLastStep = event.stepAccepted(eventT, eventY);
isLastStep = currentEvent.isStopped();
isLastStep = &currentEvent.stepAccepted(eventT, eventY);
eventT = currentEvent.stepAccepted(eventT, eventY); isLastStep = eventT.stop();
evt.stepAccepted(eventT, eventY); isLastStep = evt.stop();
isLastStep = CurrentEvent.stop();
currentEvent.stepAccepted(&eventT, eventY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY);
currentEvent.stepAccepted(eventT, eventY, &currentEvent);
if (isLastStep) currentEvent.stepAccepted(eventT, eventY);
isLastStep = ev.stepAccepted(eventT, eventY);
currentEvent = currentEvent; isLastStep = currentEvent.stop();
event = currentEvent.stepAccepted(eventT, eventY); isLastStep = event.stop();
currentEvent.stepAccepted(eventT, eventY, isLastStep);
isLastStep = currentEvent.isCanceled();
mState.stepAccepted(eventT, eventY); isLastStep = mState.stop();
currentEvents.stepAccepted(eventT, eventY); isLastStep = currentEvents.stop();
theEvent.stepAccepted(eventT, eventY); isLastStep = theEvent.stop();
currentEvent.stepAccepted(eventT, eY); isLastStep = currentEvent.stop();
state.stepAccepted(eventT, eventY); isLastStep = state.stop();
currentEvent.stepAccepted (eventT, eventY); isLastStep = currentEvent.stop ();
newEvent.stepAccepted(eventT, eventY); isLastStep = newEvent.stop();
isLastStep = event.stop();
currentEvent.stepAccepted( eventT, eventY ); isLastStep = currentEvent.stop();
isLastStep = isLastStep.stop();
newEvent.stepAccepted(eventT, eventY); isLastStep = newEvent.stop();
status = currentEvent.stepAccepted(eventT, eventY); isLastStep = status.stop();
eventT.stepAccepted(eventY); isLastStep = eventT.stop();
isLastStep = aEvent.stop();
isLastStep = currentEvent.isDestroying();
theEvent.stepAccepted(eventT, eventY); isLastStep = theEvent.stop();
isLastStep = &currentEvent.stop();
isLastStep = currentEvent.getCurrentTime();
int currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = 0;
isLastStep = currentEvent.stepAccepted(eventT);
ev.stepAccepted(eventT, eventY); isLastStep = ev.stop();
return currentEvent.stepAccepted(eventT, eventY);
eventT = currentEvent.stepAccepted(eventT, eventY); isLastStep = eventT.stop();
const currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = prevEvent.stepAccepted(eventT, eventY);
currentEvent.stepAccepted(eventT);
isLastStep = currentEvent.getTime();
curEvent.stepAccepted(eventT, eventY); isLastStep = curEvent.stop();
currentEvent.stepAccepted(eventT, eventY, currentEvent.stop());
isLastStep = interpolator.stop();
isLastStep = prevEvent.stepAccepted(eventT, eventY);
isLastStep = currentEvent.stopped;
currentEvent.stepAccepted(eventT); isLastStep = currentEvent.stop();
isLastStep = state.stop();
isLastStep = previousEvent.stop();
isLastStep = event.stop();
currentEvent = eventT;
lastEvent.stepAccepted(eventT, eventY); isLastStep = lastEvent.stop();
isLastStep = currentEvent.stepAccepted();
isLastStep = CurrentEvent.stepAccepted(eventT, eventY);
isLastStep = &currentEvent.stepAccepted(eventT, eventY);
isLastStep = interpolator.stepAccepted(eventT, eventY);
prevEvent.stepAccepted(eventT, eventY); isLastStep = prevEvent.stop();
currentEvent.stepAccepted(eventT, y); isLastStep = currentEvent.stop();
ret = currentEvent.stepAccepted(eventT, eventY); isLastStep = ret;
isLastStep = events.stepAccepted(eventT, eventY);
nextEvent.stepAccepted(eventT, eventY); isLastStep = nextEvent.stop();
currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = lastEvent.stop();
isLastStep = aEvent.stepAccepted(eventT, eventY);
result = currentEvent.stepAccepted(eventT, eventY); isLastStep = result.stop();
event = currentEvent.stepAccepted(eventT, eventY); isLastStep = event.stop();
&currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = nsEventStateManager::stepAccepted(eventT, eventY);
(void) currentEvent.stepAccepted(eventT, eventY);
currentEvent.stepAccepted(ev, eventY); isLastStep = currentEvent.stop();
isLastStep = aEvent.stop();
currentEvent.stepAccepted(eventT, eventY, 0);
currentEvent_stepAccepted(eventT, eventY); isLastStep = currentEvent_stop();
isLastStep = ev.stepAccepted(eventT, eventY);
isLastStep = currentEvent.isDead();
currentEvent = eventT; isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventX); isLastStep = currentEvent.stop();
isLastStep = currentEvent.getCurrentTime().stepAccepted(eventT, eventY);
hasLastStep = currentEvent.stop();
interpolator.stepAccepted(eventT, eventY); isLastStep = interpolator.stop();
currentEvent.stepAccepted(eventT, eventY, true);
isLastStep = currentEvent.getStopped();
isLastStep = currentEvent.isCancelled();
isLastStep = currentEvent.isStop();
else isLastStep = currentEvent.stop();
isLastStep = iterator.next();
currentEvent.stepAccepted(eventX, eventY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stopped;
isLastStep = isLastStep.stop();
isLastStep = mEvent.stop();
currentEvent.stepAccepted(eventT, eventY+1); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, 1); isLastStep = currentEvent.stop();
isLastStep = eventT.stepAccepted(eventT, eventY);
isLastStep = currentEvent.getNext();
currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.pause();
rv = currentEvent.stepAccepted(eventT, eventY); isLastStep = rv;
currentEvent.stepAccepted( eventT, eventY ); isLastStep = currentEvent.stop( );
es0.stepAccepted(eventT, eventY); isLastStep = es0.stop();
currentEvent = currentEvent.stop();
currentEvent.stepInitialized(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = events.stop();
isLastStep = prevEvent.stop();
ret = currentEvent.stepAccepted(eventT, eventY);
isLastStep = currentEvent.stepAccepted(eventT, eventY, &currentEvent);
currentEvent.stepAccepted(eventT, eventY, false);
isLastStep = currentEvent.getStop();
isLastStep = currentEvent.isAsync();
isLastStep = curEvent.stop();
currentEvent.stepAccepted(&eventT, eventY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eY); isLastStep = currentEvent.stop();
isLastStep = currentEvent.isInitialized();
int isLastStep = currentEvent.stop();
isLastStep = currentEvent.getGlobalCurrentTime();
currentEvent.stepAccepted(aEventT, eventY); isLastStep = currentEvent.stop();
isLastStep = currentEvent.wait();
isLastStep = currentEvent.next();
isLastStep = rv;
currentEvent.stepAccepted(state, eventT, eventY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, isLastStep);
currentEvent.stepAccepted(eventT, eventY, &currentEvent.stop);
currentEvent = currentEvent.stepAccepted(eventT, eventY);
isLastStep = eventT;
isLastStep = currentEvent.stepAccepted(eventT, eventY, null);
currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.state.stop();
currentEvent.stepAccepted(evt, eventY); isLastStep = currentEvent.stop();
isLastStep =!currentEvent.stop();
isLastStep = currentEvent.Stop();
isLastStep = currentEvent.getDelay();
currentEvent = currentEvent; isLastStep = currentEvent.stop();
rv = currentEvent.stepAccepted(eventT, eventY);
isLastStep = currentEvent.stop(); currentEvent.stepAccepted(eventT, eventY);
currentEvent.stepAccepted(evT, eventY); isLastStep = currentEvent.stop();
currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, null);
status = currentEvent.stepAccepted(eventT, eventY);
currentEvent.stepAccepted(eventT, eventY, 1);
isLastStep = (currentEvent.stepAccepted(eventT, eventY)).stop();
currentEvent.stepAccepted(eventT, eventY, currentEvent.stop());
currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
eventT = currentEvent.stepAccepted(eventT, eventY);
isLastStep = currentEvent.stepAccepted(eventT, eventY, 0);
isLastStep = currentEvent.stepAccepted(eventT, eY);
isLastStep = currentEvent.stepAccepted(eventT, eventY, false);
break;
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
isLastStep = (currentEvent.stepAccepted(eventT, eventY)  2);
if (state.evaluateStep(interpolator))  if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();  else  if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, (const char *)currentEvent.stop());
currentEvent = currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
ret = currentEvent.stepAccepted(eventT, eventY); isLastStep = ret.stop();
if (!state.events.isEmpty())  isLastStep = eventT;
if (eventT)  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY))  if (state.evaluateStep(interpolator))  if (!occuringEvents.isEmpty())  isLastStep = currentEvent.stop();
if (currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent.isDestroying())  /* currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent)  if (state.evaluateStep(interpolator))  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, &eventY); isLastStep = currentEvent.stop();
currentEvent = currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = (currentEvent.stepAccepted(eventT, eventY)).stopped;
currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stepAccepted();
if (!state.getPreviousTime() &&!state.isInitialized) isLastStep = state.getPreviousTime();
currentEvent.stepAccepted(eventT, eventY, false); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, lastSibling);
fc.stepAccepted(eventT, eventY); isLastStep = fc.stop();
isLastStep = currentEvent.stepAccepted(eventT, eventY, eventT);
if (currentEvent.stepAccepted(eventT, eventY))  isLastStep = currentEvent.stop();  else  isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, 0); isLastStep = currentEvent.stop();
mEvent = currentEvent.stepAccepted(eventT, eventY); isLastStep = mEvent.stop();
/* * Only step up to the currentEvent.stepAccepted and we have the event time to deallocate. */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); /* * XXX */
if (!isLastStep) isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, &currentEvent.stepOfEvent) == 0; isLastStep = currentEvent.stop();
isLastStep = (eventT.stepAccepted()  0)? currentEvent.stop() : currentEvent.stepAccepted(eventT, eventY);
es0.eventState.stepAccepted(eventT, eventY); isLastStep = es0.eventState.stop();
currentEvent.stepAccepted(eventT, eventY, sizeof(currentEvent.stepAccepted)); isLastStep = currentEvent.stop();
if (!currentEvent.eventCancelled)  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
nsEventState currentEvent.stepAccepted(eventT, eventY); isLastStep = nsEventState_stop();
if (!currentEvent.stop()) isLastStep = currentEvent.stop(); else if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, &currentEvent.time); isLastStep = currentEvent.stop();
if (currentEvent!= null)  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.isOccurred()) isLastStep = eventT.stepAccepted(eventY);
if (eventT == -1)  isLastStep = eventT.stepAccepted(eventT, eventY);  else  isLastStep = eventT.stop();
currentEvent.stepAccepted(eventT, eventY, true); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, es1, es2); isLastStep = currentEvent.stop();
if (eventT && currentEvent.stepAccepted(eventT, eventY))  isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, -1); isLastStep = currentEvent.stop();
isLastStep = currentEvent.isAuto();
currentEvent.stepAccepted(eventT, eventY, &currentEvent.getNext()); isLastStep = currentEvent.stop();
if (eventT == -1)  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  else  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = currentEvent.isRepeated();
currentEvent.stepAccepted(eventT, eventY, tMs); isLastStep = currentEvent.stop();
isLastStep = currentEvent.getStopTime();
currentEvent.stepAccepted(eventT, eventY, sizeof(currentEvent)); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY))  isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, currentEvent.isAvailable());
currentEvent.stepAccepted(eventT, eventY, &currentEvent.stepCached); isLastStep = currentEvent.stepCached.stop();
currentEvent.stepAccepted(eventT, eventY, state.currentEvent);
nsEventState es0 = eventT; isLastStep = nsEventState.stop();
isLastStep = ev.stop();
retval.stepAccepted(eventT, eventY); isLastStep = retval.stop();
if (currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= es0)  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  else  isLastStep = es0.getEventTime();
if (isLastStep) currentEvent.stepAccepted(eventT, eventY); else isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, &currentEvent); isLastStep = currentEvent.stop();
if (state.isEventState()) isLastStep = 0; else  isLastStep = currentEvent.stop();
/* XXX if we're doing a new event, use a 0x100 */ if (!state.eventAccepted(eventT, eventY))  return 0;
isLastStep =! currentEvent.isStarted();
if (currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, &currentEvent.dma) == 0;
currentEvent.stepAccepted(eventT, eventY, tEnd);
if (currentEvent.stepAccepted(eventT, eventY))  isLastStep = currentEvent.stop();  else  if (interpolator.isValid())  if (!interpolator.isPrevious())  state.reinitializeBegin(interpolator);  currentEvent.restart();  else  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, &currentEvent.isNext()); isLastStep = currentEvent.stop();
if (eventT) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT  0)  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, eventTime);
rv = currentEvent.stepAccepted(eventT, eventY); if (NS_FAILED(rv))  /* * Try to save the current EVENT time. */ currentEvent.stepCurrentEvent(); isLastStep = currentEvent.stop();
/* XXX */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  else  isLastStep = 0;
currentEvent.stepAccepted(eventT, eY); isLastStep = currentEvent.getGlobalCurrentTime();
currentEvent.stepAccepted(eventT, eventY, true); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, currentEvent.getGlobalCurrentTime());
if (!currentEvent.isEmpty()) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = nsEventTime now = currentEvent.stepAccepted(eventT, eventY);
currentEvent.stepAccepted(eventT, y, isLastStep);
isLastStep = currentEvent.stepAccepted(eventT, eventY, &currentEvent.isCanceled);
es0.stepAccepted(eventT, eventY); isLastStep = es0.stepAccepted(es0.eventTime, eventY);
if (currentEvent.stepAccepted(eventT, eventY)!= -1)  isLastStep = currentEvent.stop();
snd_event.stepAccepted(eventT, eventY); isLastStep = snd_event.stop();
if (currentEvent!= 0)  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  else  isLastStep = -1;
if (currentEvent.stepAccepted(eventT, eventY)!= 0) isLastStep = currentEvent.stop(); else isLastStep = -1;
currentEvent.stepAccepted(eventT, eventY, 0); isLastStep = currentEvent.stop();
isLastStep = currentEvent.stepAccepted(eventT, eventY, (prevEvent &)NEXT);
if (state.isCancelled())  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
nsAutoString currentEvent(eventT, eventY); isLastStep = nsAutoString(currentEvent.stop());
isLastStep = currentEvent.stepAccepted(eventT, eventY, &currentEvent.size());
isLastStep = currentEvent.stepAccepted(eventT, eventY, &currentEvent.time);
currentEvent.stepAccepted(eventT, evY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, -1); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, &currentEvent); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, &currentEvent.tLength());
isLastStep = ev;
currentEvent.stepAccepted(eventT, eventY, currentEvent.isStart()); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, -1);
mEvent = currentEvent;
isLastStep = eventT == eventY? 0 : currentEvent.stepAccepted(eventT, eventY);
if (!currentEvent.isNext()) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, &currentEvent.stepT); isLastStep = currentEvent.stop();
/* skip this step */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = es0.es1.stepAccepted(eventT, eventY);
currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.isDestroying();
isLastStep = currentEvent.stepAccepted(eventT, eventY, eventT.getUnicode());
currentEvent.stepAccepted(eventT, eventY, tEnd); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY, getter_AddRefs(currentEvent));
currentEvent.stepAccepted(eventT, eventY, &currentEvent.getEventTime()); isLastStep = currentEvent.stop();
if ((eventT.stepAccepted(eventT, eventY))!= 0) isLastStep = currentEvent.stop();
/* isLastStep = currentEvent.stop(); */
if (state.evaluateStep(interpolator))  isLastStep = currentEvent.stop();  else  isLastStep = currentEvent.stop();
if (!currentEvent)  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  else  isLastStep = 0;
isLastStep = 0; currentEvent = currentEvent;
if (currentEvent.stepAccepted(eventT, eventY)) <if (state.evaluateStep(interpolator)) <if (!occuringEvents.isEmpty()) isLastStep = currentEvent.stop();
if (eventT == -1) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <isLastStep = eventT.stepAccepted(eventT, eventY); &else isLastStep = eventT.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
isLastStep = (eventT.stepAccepted() 0)? currentEvent.stop() : currentEvent.stepAccepted(eventT, eventY);
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
/* XXX */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else isLastStep = 0;
/* XXX */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else isLastStep = 0;
if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
if (currentEvent!= 0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else isLastStep = -1;
&if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)!= -1) <isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
if (eventT == -1) isLastStep = eventT.stepAccepted(eventT, eventY); &else <isLastStep = eventT.stop();
if (currentEvent!= es0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &isLastStep = es0.getEventTime();
if (state.evaluateStep(interpolator)) <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <if (state.evaluateStep(interpolator)) <if (!occuringEvents.isEmpty()) &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (!currentEvent) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &isLastStep = 0;
&if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &if (state.evaluateStep(interpolator)) if (!occuringEvents.isEmpty()) <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &if (state.evaluateStep(interpolator)) <if (!occuringEvents.isEmpty()) isLastStep = currentEvent.stop();
/* XXX if we're doing a new event, use a 0x100 */ if (!state.eventAccepted(eventT, eventY)) <return 0;
if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
if (currentEvent!= null) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent!= es0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &isLastStep = es0.getEventTime();
if (currentEvent!= es0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else isLastStep = es0.getEventTime();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT <0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <if (state.evaluateStep(interpolator)) <if (!occuringEvents.isEmpty()) <isLastStep = currentEvent.stop();
if (eventT == -1) isLastStep = eventT.stepAccepted(eventT, eventY); &else &isLastStep = eventT.stop();
if (eventT 0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (!currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else <if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT && currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent!= 0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <isLastStep = -1;
if (eventT == -1) isLastStep = eventT.stepAccepted(eventT, eventY); else &isLastStep = eventT.stop();
if (eventT == -1) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <if (state.evaluateStep(interpolator)) if (!occuringEvents.isEmpty()) &isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else <if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <isLastStep = eventT.stepAccepted(eventT, eventY); else isLastStep = eventT.stop();
if (state.evaluateStep(interpolator)) if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else &if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
if (!currentEvent) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else isLastStep = 0;
if (eventT == -1) isLastStep = eventT.stepAccepted(eventT, eventY); else <isLastStep = eventT.stop();
<if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (currentEvent!= es0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <isLastStep = es0.getEventTime();
if (state.evaluateStep(interpolator)) <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else &if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
/* XXX */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <isLastStep = 0;
if (eventT == -1) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else &if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else &if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (!currentEvent) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else &if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else &if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else <if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (eventT == -1) &isLastStep = eventT.stepAccepted(eventT, eventY); else <isLastStep = eventT.stop();
if (eventT &0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else <if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (eventT == -1) isLastStep = eventT.stepAccepted(eventT, eventY); <else isLastStep = eventT.stop();
if (!currentEvent) &if (state.evaluateStep(interpolator)) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT 0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else &if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= null) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <isLastStep = 0;
isLastStep = (currentEvent.stepAccepted(eventT, eventY) &2);
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else &if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else <if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= 0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else isLastStep = -1;
if (state.evaluateStep(interpolator)) if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (!currentEvent) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else isLastStep = 0;
if (currentEvent!= 0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else isLastStep = -1;
if (eventT && currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else &if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) if (state.evaluateStep(interpolator)) if (!occuringEvents.isEmpty()) &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &if (state.evaluateStep(interpolator)) if (!occuringEvents.isEmpty()) isLastStep = currentEvent.stop();
if (eventT == -1) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
if (eventT == -1) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (eventT == -1) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
if (currentEvent!= 0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <isLastStep = -1;
if (currentEvent!= es0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <isLastStep = es0.getEventTime();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (eventT == -1) &isLastStep = eventT.stepAccepted(eventT, eventY); <else <isLastStep = eventT.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else &if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else &if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (!currentEvent) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &isLastStep = 0;
if (state.evaluateStep(interpolator)) <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (eventT == -1) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
if (currentEvent!= 0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else isLastStep = -1;
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
isLastStep = (eventT.stepAccepted() <0)? currentEvent.stop() : currentEvent.stepAccepted(eventT, eventY);
if (!state.events.isEmpty()) isLastStep = eventT;
&if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
if (!currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &isLastStep = 0;
&if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
if (eventT == -1) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent.isDestroying()) &/* currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else &if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <if (state.evaluateStep(interpolator)) if (!occuringEvents.isEmpty()) <isLastStep = currentEvent.stop();
if (currentEvent!= 0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <isLastStep = -1;
if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
if (!currentEvent.eventCancelled) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
/* XXX */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &isLastStep = 0;
if (state.isCancelled()) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
/* XXX */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <isLastStep = 0;
if (currentEvent!= es0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &isLastStep = es0.getEventTime();
if (state.evaluateStep(interpolator)) &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <if (state.evaluateStep(interpolator)) &if (!occuringEvents.isEmpty()) &isLastStep = currentEvent.stop();
if (!currentEvent) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else <if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (eventT == -1) isLastStep = eventT.stepAccepted(eventT, eventY); <else <isLastStep = eventT.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else &if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <isLastStep = eventT.stepAccepted(eventT, eventY); else &isLastStep = eventT.stop();
<if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
if (!currentEvent) if (state.evaluateStep(interpolator)) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= 0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <isLastStep = -1;
if (eventT <0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= 0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &isLastStep = -1;
if (eventT == -1) isLastStep = eventT.stepAccepted(eventT, eventY); else isLastStep = eventT.stop();
if (state.isEventState()) isLastStep = 0; else isLastStep = currentEvent.stop();
if (eventT == -1) isLastStep = eventT.stepAccepted(eventT, eventY); <else &isLastStep = eventT.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else <if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= 0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else isLastStep = -1;
if (currentEvent!= 0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &isLastStep = -1;
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else <if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &isLastStep = 0;
if (!currentEvent) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <isLastStep = 0;
<if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
if (!currentEvent) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <isLastStep = 0;
/* XXX if we're doing a new event, use a 0x100 */ if (!state.eventAccepted(eventT, eventY)) return 0;
/* XXX */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &isLastStep = 0;
if (state.isCancelled()) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
if (!currentEvent) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &isLastStep = 0;
if (eventT == -1) <isLastStep = eventT.stepAccepted(eventT, eventY); <else &isLastStep = eventT.stop();
if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (eventT 0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
if (eventT <0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else isLastStep = 0;
if (currentEvent!= es0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else isLastStep = es0.getEventTime();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!state.events.isEmpty()) &isLastStep = eventT;
<if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
if (!currentEvent) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) if (state.evaluateStep(interpolator)) if (!occuringEvents.isEmpty()) <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)!= -1) isLastStep = currentEvent.stop();
if (currentEvent!= es0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else isLastStep = es0.getEventTime();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else <if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <isLastStep = eventT.stepAccepted(eventT, eventY); &else &isLastStep = eventT.stop();
if (!currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else <if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent!= 0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <isLastStep = -1;
if (currentEvent!= 0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <isLastStep = -1;
if (!currentEvent) if (state.evaluateStep(interpolator)) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= es0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &isLastStep = es0.getEventTime();
if (eventT == -1) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <isLastStep = eventT.stepAccepted(eventT, eventY); else <isLastStep = eventT.stop();
if (state.isEventState()) isLastStep = 0; else <isLastStep = currentEvent.stop();
if (currentEvent!= es0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &isLastStep = es0.getEventTime();
if (eventT == -1) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else <if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) &isLastStep = eventT.stepAccepted(eventT, eventY); &else &isLastStep = eventT.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else &if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else <if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
isLastStep = (currentEvent.stepAccepted(eventT, eventY) <2);
currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else <if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <isLastStep = eventT.stepAccepted(eventT, eventY); <else <isLastStep = eventT.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else &if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
if (eventT == -1) &isLastStep = eventT.stepAccepted(eventT, eventY); else isLastStep = eventT.stop();
if (eventT == -1) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) &isLastStep = eventT.stepAccepted(eventT, eventY); <else &isLastStep = eventT.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (!currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &isLastStep = 0;
isLastStep = (currentEvent.stepAccepted(eventT, eventY) 2);
if (eventT == -1) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
if (currentEvent!= es0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &isLastStep = es0.getEventTime();
&if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
if (currentEvent!= 0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else isLastStep = -1;
&if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
if (eventT == -1) <isLastStep = eventT.stepAccepted(eventT, eventY); &else <isLastStep = eventT.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &if (state.evaluateStep(interpolator)) <if (!occuringEvents.isEmpty()) <isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (eventT == -1) <isLastStep = eventT.stepAccepted(eventT, eventY); <else isLastStep = eventT.stop();
if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
<currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= es0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <isLastStep = es0.getEventTime();
if (eventT == -1) &isLastStep = eventT.stepAccepted(eventT, eventY); <else isLastStep = eventT.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else <if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
/* XXX */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) if (state.evaluateStep(interpolator)) &if (!occuringEvents.isEmpty()) <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else &if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else <if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else <if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
if (!currentEvent) <if (state.evaluateStep(interpolator)) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (currentEvent!= 0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &isLastStep = -1;
if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (currentEvent!= 0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else isLastStep = -1;
rv = currentEvent.stepAccepted(eventT, eventY); if (NS_FAILED(rv)) </* * Try to save the current EVENT time. */ currentEvent.stepCurrentEvent(); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
if (eventT) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &if (state.evaluateStep(interpolator)) &if (!occuringEvents.isEmpty()) &isLastStep = currentEvent.stop();
isLastStep = (eventT.stepAccepted() &0)? currentEvent.stop() : currentEvent.stepAccepted(eventT, eventY);
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) if (state.evaluateStep(interpolator)) if (!occuringEvents.isEmpty()) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
if (currentEvent!= 0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <isLastStep = -1;
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &if (state.evaluateStep(interpolator)) &if (!occuringEvents.isEmpty()) <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &if (state.evaluateStep(interpolator)) if (!occuringEvents.isEmpty()) &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <if (state.evaluateStep(interpolator)) if (!occuringEvents.isEmpty()) isLastStep = currentEvent.stop();
if (!currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else <if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
if (currentEvent!= es0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else isLastStep = es0.getEventTime();
if (currentEvent.stepAccepted(eventT, eventY)) <if (state.evaluateStep(interpolator)) &if (!occuringEvents.isEmpty()) <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else <if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &isLastStep = 0;
if (eventT) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) if (state.evaluateStep(interpolator)) <if (!occuringEvents.isEmpty()) <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else &if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
rv = currentEvent.stepAccepted(eventT, eventY); if (NS_FAILED(rv)) /* * Try to save the current EVENT time. */ currentEvent.stepCurrentEvent(); isLastStep = currentEvent.stop();
if (!currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <isLastStep = 0;
if (!currentEvent) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <isLastStep = 0;
if (!currentEvent) if (state.evaluateStep(interpolator)) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else isLastStep = currentEvent.stop();
if (eventT == -1) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent.isDestroying()) </* currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else <if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else &if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.isCancelled()) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
/* XXX if we're doing a new event, use a 0x100 */ if (!state.eventAccepted(eventT, eventY)) &return 0;
if (currentEvent.stepAccepted(eventT, eventY)) &if (state.evaluateStep(interpolator)) &if (!occuringEvents.isEmpty()) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
if (currentEvent!= es0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &isLastStep = es0.getEventTime();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else &if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= es0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else isLastStep = es0.getEventTime();
if (currentEvent!= es0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <isLastStep = es0.getEventTime();
if (currentEvent!= es0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <isLastStep = es0.getEventTime();
if (!currentEvent) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &isLastStep = 0;
if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else &if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= 0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <isLastStep = -1;
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
if (!currentEvent) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <isLastStep = 0;
if (!currentEvent.eventCancelled) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= es0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else isLastStep = es0.getEventTime();
if (eventT == -1) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
if (!currentEvent.eventCancelled) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else <if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (eventT == -1) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else <if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
currentEvent.stepAccepted(eventT, y); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
if (eventT == -1) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else &if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else isLastStep = 0;
if (state.evaluateStep(interpolator)) &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent!= 0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &isLastStep = -1;
if (currentEvent!= es0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else isLastStep = es0.getEventTime();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else <if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= 0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &isLastStep = -1;
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else <if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= 0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &isLastStep = -1;
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else <if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (!currentEvent) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); <else if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else <if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else &if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent) <if (state.evaluateStep(interpolator)) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else &if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
/* XXX */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else &if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
if (eventT == -1) &isLastStep = eventT.stepAccepted(eventT, eventY); &else isLastStep = eventT.stop();
if (eventT && currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); &else if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else <if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= 0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else &isLastStep = -1;
if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) if (state.evaluateStep(interpolator)) &if (!occuringEvents.isEmpty()) isLastStep = currentEvent.stop();
if (currentEvent!= es0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &isLastStep = es0.getEventTime();
if (currentEvent!= es0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <isLastStep = es0.getEventTime();
if (!currentEvent) <if (state.evaluateStep(interpolator)) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (currentEvent!= es0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <isLastStep = es0.getEventTime();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else &if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (currentEvent!= es0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else isLastStep = es0.getEventTime();
isLastStep = currentEvent.stop();
if (!state.events.isEmpty()) <isLastStep = eventT;
if (currentEvent!= 0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else <isLastStep = -1;
if (currentEvent!= es0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <isLastStep = es0.getEventTime();
<if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else &if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else &if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); else <isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); else &isLastStep = currentEvent.stop();
if (currentEvent!= null) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); <else isLastStep = currentEvent.stop();
if (currentEvent!= es0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else <isLastStep = es0.getEventTime();
if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <if (state.evaluateStep(interpolator)) &if (!occuringEvents.isEmpty()) isLastStep = currentEvent.stop();
if (eventT == -1) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) <isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
if (!currentEvent.isDestroying()) /* currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
/* XXX */ currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else isLastStep = 0;
<if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); <else <isLastStep = currentEvent.stop();
if (currentEvent!= 0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &isLastStep = -1;
if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); &else &isLastStep = currentEvent.stop();
if (eventT == -1) isLastStep = eventT.stepAccepted(eventT, eventY); &else isLastStep = eventT.stop();
if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); else isLastStep = currentEvent.stop();
if (eventT == -1) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT &0) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &if (state.evaluateStep(interpolator)) <if (!occuringEvents.isEmpty()) &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); <else &isLastStep = currentEvent.stop();
rv = currentEvent.stepAccepted(eventT, eventY); if (NS_FAILED(rv)) &/* * Try to save the current EVENT time. */ currentEvent.stepCurrentEvent(); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)!= -1) &isLastStep = currentEvent.stop();
if (!currentEvent) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else <isLastStep = 0;
if (currentEvent.stepAccepted(eventT, eventY)) if (state.evaluateStep(interpolator)) <if (!occuringEvents.isEmpty()) &isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else &if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) <isLastStep = currentEvent.stop(); else if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= 0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else isLastStep = -1;
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else <if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (!currentEvent) &if (state.evaluateStep(interpolator)) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
<if (state.evaluateStep(interpolator)) isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
if (!currentEvent) &if (state.evaluateStep(interpolator)) currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= es0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else &isLastStep = es0.getEventTime();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else if (interpolator.isValid()) if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT &0) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); else if (interpolator.isValid()) <if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent!= es0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); <else isLastStep = es0.getEventTime();
if (state.isEventState()) isLastStep = 0; else &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) if (state.evaluateStep(interpolator)) &if (!occuringEvents.isEmpty()) &isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); <else if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) &isLastStep = eventT.stepAccepted(eventT, eventY); &else <isLastStep = eventT.stop();
if (currentEvent.stepAccepted(eventT, eventY)) if (state.evaluateStep(interpolator)) <if (!occuringEvents.isEmpty()) isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) &isLastStep = currentEvent.stop(); &else if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); else <if (interpolator.isValid()) &if (!interpolator.isPrevious()) state.reinitializeBegin(interpolator); currentEvent.restart(); else currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (eventT == -1) &isLastStep = eventT.stepAccepted(eventT, eventY); else &isLastStep = eventT.stop();
if (currentEvent!= 0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); else &isLastStep = -1;
if (eventT) &currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();
if (state.evaluateStep(interpolator)) if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop(); &else if (currentEvent.stepAccepted(eventT, eventY)) isLastStep = currentEvent.stop();
&if (state.evaluateStep(interpolator)) &isLastStep = currentEvent.stop(); &else <isLastStep = currentEvent.stop();
if (currentEvent!= 0) <currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); &else isLastStep = -1;
