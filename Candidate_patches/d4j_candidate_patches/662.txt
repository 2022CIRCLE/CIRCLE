golden:
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
inference:
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return CreateComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), 0);
return createComplex(real + rhs.getReal(), rhs.getImaginary());
return createComplex(rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.GetReal(), imaginary + rhs.GetImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary);
return createComplex(real + rhs.getReal());
return createComplex(real + rhs.Real(), imaginary + rhs.Imaginary());
return new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), null);
return createComplex (real + rhs.getReal(), imaginary + rhs.getImaginary());
return buildComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return addComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return (real + rhs.getReal(), imaginary + rhs.getImaginary());
return makeComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real, imaginary);
return createComplex(real + rhs.real, imaginary + rhs.real);
result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
return createComplex(real + aReal, imaginary + aImaginary);
return (createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()));
return add(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.GetReal(), imaginary + rhs.GetImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), false);
return createComplex(real + rhs.getReal(), imaginary + (int)rhs.getImaginary());
return createComplex(real + getReal(), imaginary + getImaginary());
return createComplex(real + rhs.real, imaginary + rhs.imaginary);
return createComplex(real);
return createComplex(real + rhs.getReal(), virtual + rhs.getImaginary());
return getComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return findComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + (rhs.getReal() + 1), imaginary + (rhs.getImaginary() + 1));

return createComplex(rhs.getReal(), rhs.getImaginary());
return setComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + RHS.getReal(), imaginary + RHS.getImaginary());
return (Complex) createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.Real(), imaginary + rhs.GetImaginary());
return createComplex(real + rhs.real, imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), true);
return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.realReal, imaginary + rhs.realImaginary);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary().get());
return createComplex(real, imaginary + rhs.getImaginary());
return createComplex(real + rhs.realReal, imaginary + rhs.imaginary);
return createComplex(real + *rhs.getReal(), imaginary + *rhs.getImaginary());
return createComplex(real + rhs.real(), imaginary + rhs.real());
return createComplex(real + rhs);
return createComplex(real + rhs.real, imaginary + rhs.real);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), null);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), 1);
return createComplex(real + nrhs.getReal(), imaginary + nrhs.getImaginary());
return createComplex(real + rhs.getReal() + 1, imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), rhs.getImaginary(), 0);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary() + 1);
return createComplex(real + rhs.getReal(), real + rhs.getImaginary());
result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real, imaginary, rhs.getImaginary());
return createComplex((real + rhs.getReal()), imaginary + rhs.getImaginary());
return createComplex(rhs.real + rhs.getReal(), rhs.getImaginary());
return createComplex(Real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.mReal, imaginary + rhs.mImaginary);
return createComplex(real + rhs.getReal() + 1);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), 0, 0);
return createComplex(real + rhs.getReal(), imaginary + rhs.GetImaginary());
return createComplex();
return createComplex(real, imaginary + rhs.getReal());
return newcomplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), this);
(void) createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(rhs, real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + &rhs.getReal(), imaginary + &rhs.getImaginary());
return createComplex(real + &rhs.getReal(), imaginary + rhs.getImaginary());
return comp.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary - rhs.getImaginary());
return rhs.add(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal() + rhs.getImaginary());
return super.add(real + rhs.getReal(), imaginary + rhs.getImaginary());
return newComplex (real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + res.getReal(), imaginary + res.getImaginary());
return result;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), -1);
return createComplex(real + rhs.getReal()+1, imaginary + rhs.getImaginary()+1);
return createComplex(arena + rhs.getReal(), imaginary + rhs.getImaginary());
return compileComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), 0);
return createComplex(real + rhs.getReal(), imaginary + 0);
return createComplex(real + rhs.Real, imaginary + rhs.Imaginary);
return createComplex(real + RHS.getReal(), imaginary + RHS.getImaginary());
return composite(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary() - 1);
return ret;
return createComplex(real + rhs.real.getReal(), imaginary + rhs.real.getImaginary());
return createComplex(real + rhs.getUnicode(), imaginary + rhs.getImaginary());
return createComplex(real + ref, imaginary + ref);
return createComplex(real.getReal(), imaginary.getImaginary());
return NS_OK;
return createComplex(real + rhs.getReal().x, imaginary + rhs.getImaginary().y);
return createComplex(real + rhs.getReal(), imaginary + *rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + getter_AddRefs(rhs));
return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.realReal(), imaginary + rhs.realImaginary());
return createComplex(real + RHS.getReal(), imaginary + rHS.getImaginary());
return createComplex(real + (rhs.getReal() + rhs.getImaginary()));
return real + rhs.getReal();
return createComplex(real + rhs.realReal(), imaginary + rhs.imaginary);
return createComplex(real + 0, imaginary + rhs.getImaginary());
return rhs;
return createComplex(real + rhs.getReal(), rhs.getImaginary(), rhs);
return createComplex(real + rhs.getReal(), imaginary + &rhs.getImaginary());
return createComplex(real + rhs.getReal(), false);
return rhs.add(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + Rhs.getReal(), imaginary + Rhs.getImaginary());
return createComplex(real + rhs.getReal() + 1, imaginary + rhs.getImaginary() + 1);
break;
return createComplex(rhs.getReal(), imaginary);
return createComplex(real) + rhs.getReal();
return createComplex(real + len, imaginary + len);
return createComplex(real + hs.getReal(), imaginary + hs.getImaginary());
return newComplex(rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(rhs.real + rhs.getReal(), rhs.imaginary);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), false);
return createComplex(real + rhs.getReal(), imaginary) + rhs.getImaginary();
return createComplex(real + newReal, imaginary + newImaginary);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary();
return createComplex(real + rhs.getReal(), rhs.getImaginary(), null);
return createComplex(real + rhs.real, imaginary + rhs.Imaginary);
return createComplex((real + rhs.getReal()), (real + rhs.getImaginary()));
return createComplex (real + rhs.getReal (), imaginary + rhs.getImaginary ());
return createComplex(real.get(), imaginary.get());
return createComplex(real + rhs.real, imaginary + rhs.getImaginary());
return createComplex(real + rhs.createReal(), imaginary + rhs.createImaginary());
return createComplex(real + rhs.real(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), rhs.getImaginary(), false);
return createComplex(real + rhs.getReal(), imaginary + (void *)rhs.getImaginary());
return createComplex(rhs);
return createComplex(real + nrhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary() + 0);
return res;
return createComplex(real + rhs.GetReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), &real);
return createComplex(real + rhs.getReal(), imaginary + 1);
return createComplex(real + res, imaginary + res);
return createComplex(real++, imaginary++);
return createComplex(real + rhs.getReal(), imaginary + rhs.getContainer());
return createComplex(real + rhs.getReal(), imaginary + getter_Copies(rhs));
return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), 0);
return createComplex(real + rhs.getReal(), (void *) imaginary + rhs.getImaginary());
createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + (u_long)rhs.getImaginary());
return createComplex(real + rhs.getReal(), (int)rhs.getImaginary());
return createComplex(real + rhs.getReal();
return createComplex(real + rhs.getReal()+1, imaginary + rhs.getImaginary());
return createComplex(real, imaginary, rhs.getReal());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), v);
return createComplex(real + (rhs.getReal() || rhs.getImaginary()));
return createComplex(rhs, imaginary + rhs.getReal());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), 0, null);
return createComplex(real + rhs.getImage(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), 0);
return createComplex(real + rhs.getReal(), imaginary || rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), dummy);
return createComplex(real + rhs.Real(), rhs.Imaginary());
return createComplex(real + rhs.getReal(), imaginary + null);
return createComplex(real + rhs.Real(), imaginary + rhs.Imaginary());
return createComplex(real + rhs.getReal(), imaginary + RHS.getImaginary());
return rhs.getComplex();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), count);
return createComplex(real + 1);
return createComplex(real + rhs.realReal(), imaginary + rhs.realImaginary);
return createComplex(real + rhs.getReal() - 1);
return aComplex;
return createComplex(real + rhs.getReal(), imaginary + rhs;
return 0;
return mComplex;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), 2);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), nil);
return createComplex(real+1, imaginary+1);
return createComplex(real + rhs.getReal(), rhs.getImaginary(), true);
return createComplex(real + res);
return createComplex(real + rhs.Real(), imaginary + rhs.Real());
return createComplex(real + rhs.getReal() - 1, imaginary + rhs.getImaginary());
complex = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return complex;
comp = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return comp;
if (real == null)  rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());  else  rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());  return rhs;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getVarTerm);
if (!isCase()) return 0; return nsCRT::CRT::ComplexAdd(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), true);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), mComplexes.Count() - 1);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getParent());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), null);
if (!IsFrame()) return rhs.getReal(); if (!IsInline()) return rhs.getImaginary(); if (real + rhs.getReal())  rhs.removeElement(real + rhs.getReal());  return rhs.getImaginary();
if (real)  nsCRT::free(real); return new Complex(rhs.getReal(), imaginary);  return new Complex(rhs.getImaginary());
if (real == 0)  if (nextToTwips)  return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());  else  return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());  return nextToTwips;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), false);
return mComplex.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getFunc());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getFragment());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), ioLong);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), (*real + rhs.getReal()));
if (real)  int i; int j; char* p; int i; for (i = 0; i  rhs.getReal(); i++)  if (!((real == 0) && (i == 0))) return (real == 0))  int err;  *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext()));  else  *i = rhs.getNext(); return (rhs.getNext());  return (rhs.getNext())? rhs.getNext() : rhs.getNext();  return (rhs.getNext());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), 0, false);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs);
if (rhs.getReal() == 0) return 0; return 0;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), &real + rhs.getEnumerator());
if (rhs.ioctl_flags & ILAST_UNIQUE_NONE)  int newIndex; rhs.ioctl_flags |= ILAST_UNIQUE_NONE; newIndex = rhs.ioctl_flags;  return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), newIndex);
rhs.real += rhs.getReal(); rhs.imaginary += rhs.getImaginary(); return rhs.real;
return nsComplex::CreateComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs.resize(); return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) return 0; if (rhs.getReal() == rhs.getImaginary()) return 0; if (rhs.getImaginary() == rhs.getInt()) return 1; return 0;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), &cvsPool);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getPixelofs());
return aCreateComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), &nu);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), (unsigned long)rhs.getIntValue());
return nsComplex::createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
/* * Call the nsComplex object into the new Complex object */ rhs.mComplexObject = null; return rhs.getComplexObject();
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getComplexId());
if (!rhs) return null; /* * For the gdk logic, the * special functions are * called by the * special functions * (this is a gdk code) to do, so we don't rely on this function. */ if ((real + rhs.getReal()) == 0)  rhs.restoreFrame(&real); return (rhs.getImaginary()) == 0;  return (rhs.getFrame()) == 0;
if (real)  rhs.removeReal(real + rhs.getReal(), imaginary + rhs.getImaginary());  return rhs;
rhs.RealPtr = (real + rhs.getReal()); if (rhs.ImaginaryPtr == null)  /* * Add rhs to the number of pixels, and the number of pixels is a number of pixels. */ rhs.RealPtr = rhs.Real; rhs.RealPtr = rhs.Real;  return rhs;
rhs = rhs.getReal(); if (real)  rhs.CreateComplex(real, imaginary); return rhs;   return rhs;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getDeepSeq());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getUnicode());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getStartNumber());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getStartOffset());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return ret;
if (real == rhs.getReal()) return (real + rhs.getReal()); return (real + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getEnumerateXPainting());
return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), &rhs.getIsNull());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), &rhs);
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret  0)  return ret;  if ((real + rhs.getReal()) > 0)  if (real + rhs.getImaginary())  return ret;   ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret  0)  return ret;  return ret;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getProperty(Integer.MAX_VALUE), rhs.getAssignment(Integer.MAX_VALUE), rhs.getContent(Integer.MAX_VALUE));
if (rhs.request == mCurrentComplex)  res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res)  res = res;  return res;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getReal());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getExtraInfo());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), &rhs.getComplexObject());
if (!IsInComplex())  return 0;  if (rhs)  return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0)  if (real  0)  printf("Complex add: No object to addn"); return rhs;  else  if (real > 0)  printf("Complex add: %dn", imaginary + rhs.getImaginary());   else  printf("Complex add: %dn", imaginary + rhs.getImaginary());  return rhs;  return rhs;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), &rhs.getReal());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), &advanced);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), (void *)0);
if (rhs.getCrNumReales() >= 0)  return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());  else  return 0;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getImage());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getElementType());
if (rhs)  rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN;  else  rhs.compact_flags |= COMP_DEVICE_LEN;  return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real)  return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());  else  return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) return 0; return rhs;
rhs.next = rhs.getReal(); rhs.next = imaginary; return createComplex(rhs.getReal(), rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getExternalSpace());
rhs = recursiveComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs)  return (rhs.recursiveComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()));
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), 0, &rhs);
if (rhs.getImage())  if (real + rhs.getReal())  /* XXX */ rhs.getImage() = rhs.getImage(); return 0;  else  /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!real)  /* We have no RealReal; */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());  return 0;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), (int) rhs.getReal(), (int) rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getFunctions());
if (real == 0) return null; if (rhs)  char *aReal = 0; else  char *aReal = 0;  else  char *aImaginary = 0;  return (null == aReal)? aReal : aImaginary;
return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary)  rhs.Real = real + rhs.getReal();  else  rhs.Real = imaginary + rhs.getImaginary();  return rhs.Complex();
rhs = cdi.getCurrentComplex(); return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), ncbi);
if ((rhs.hasReal()) || (real + rhs.getReal()) == 0) return null; if (rhs.hasImaginary())  *rhs = (*rhs) *rhs;  return rhs;
if ((rhs = null) && (rhs.real == null))  nsAutoString s = rhs.real; if (s)  nsAutoString s; s = rhs.s = s; s = s;  if (s == null)  s = s;  else  rhs.s = s; rhs.s = s; rhs.s = s;  if (s == null)  rhs.s = s; rhs.s = s;   return rhs.s;   return rhs.s = rhs.s;
nsAutoString rhs(null); nsresult result; nsCOMPtrnsIComplex> com = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (NS_FAILED(result))  delete rhs; return result;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), iDistance);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), (int) rhs.getInt());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), mComplex);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), getter_AddRefs(real));
rhs.real = rhs.getReal(); rhs.imaginary = rhs.getImaginary(); return rhs.createComplex(real + rhs.real, rhs.imaginary);
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getNativeCount());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), (u_int32_t *)rhs);
rhs = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (!rhs.getReal())  rhs = new rhs;  return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!real + rhs.getReal()) return rhs.getImaginary(); return 0;
rhs.getReal() = rhs.getReal(); rhs.getImaginary() = rhs.getImaginary(); return rhs.getComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!(real == rhs.getReal()) &&!( imaginary == rhs.getImaginary()))  return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs)  if (!(real & 0x2) && (real + rhs.getReal())) return 0;   return rhs;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getLength());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getCurrentComplex());
rhs.relative = real + rhs.getReal(); rhs.relative = imaginary + rhs.getImaginary(); if (rhs.getPixelofs(real))  rhs.getPixelofs(real); rhs.getPixelofs(imaginary); return rhs.relative;  return rhs;
rhs = newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret == 0)  return ret;  return ret;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getPropertyName());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getTarget());
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), rhs.getComplexes());
nsresult result; if (rhs.getReal()  0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary()  0)  result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());   else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());  return result;
return retval;
if (real == 0)  if ((!real || imaginary))  /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs))  /* We have a set of imaginary objects */ if (rhs)  /* The actual objects have to be manipulated. */  else  /* * A list of integers to add to the result. */ if (rhs)  /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs;  else  /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */    if ((rhs = rhs.getReal()) == 0)  rhs =
if (real == rhs.getReal())  return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());  return 0;
if (real) <int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) <return ret; <if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.request == mCurrentComplex) &res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) <res = res; &return res;
if ((real + rhs.getReal()) == 0) <if (real <0) &printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) return null; if (rhs) <char *aReal = 0; else char *aReal = 0; &else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) return null; if (rhs) &char *aReal = 0; else char *aReal = 0; &else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (rhs.request == mCurrentComplex) &res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) res = res; <return res;
if (!IsInComplex()) &return 0; <if (rhs) &return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsAutoString rhs(null); nsresult result; nsCOMPtr<nsIComplex> com = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (NS_FAILED(result)) delete rhs; return result;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
nsAutoString rhs(null); nsresult result; nsCOMPtrnsIComplex> com = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (NS_FAILED(result)) &delete rhs; return result;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real) &int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (!IsInComplex()) <return 0; if (rhs) return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs.RealPtr = (real + rhs.getReal()); if (rhs.ImaginaryPtr == null) </* * Add rhs to the number of pixels, and the number of pixels is a number of pixels. */ rhs.RealPtr = rhs.Real; rhs.RealPtr = rhs.Real; <return rhs;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; <if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) <return ret; if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (!IsInComplex()) &return 0; &if (rhs) <return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!real) /* We have no RealReal; */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return 0;
if (real == 0) return null; if (rhs) char *aReal = 0; else &char *aReal = 0; &else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real) &int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret == 0) return ret; <return ret;
if (real) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.ioctl_flags & ILAST_UNIQUE_NONE) &int newIndex; rhs.ioctl_flags |= ILAST_UNIQUE_NONE; newIndex = rhs.ioctl_flags; <return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), newIndex);
rhs.relative = real + rhs.getReal(); rhs.relative = imaginary + rhs.getImaginary(); if (rhs.getPixelofs(real)) <rhs.getPixelofs(real); rhs.getPixelofs(imaginary); return rhs.relative; return rhs;
if (real == 0) return null; if (rhs) &char *aReal = 0; else char *aReal = 0; <else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if ((real + rhs.getReal()) == 0) &if (real 0) <printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) return null; if (rhs) <char *aReal = 0; else &char *aReal = 0; else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else <rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!IsFrame()) return rhs.getReal(); if (!IsInline()) return rhs.getImaginary(); if (real + rhs.getReal()) &rhs.removeElement(real + rhs.getReal()); return rhs.getImaginary();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) &return ret; <if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (real) &int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == 0) <if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) &return ret; <if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getImage()) if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!real) </* We have no RealReal; */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return 0;
if (real) rhs.removeReal(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (!IsInComplex()) <return 0; &if (rhs) return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) <if (real <0) &printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; <if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (!rhs.getReal()) <rhs = new rhs; <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = recursiveComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) &return (rhs.recursiveComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()));
if (rhs.ioctl_flags & ILAST_UNIQUE_NONE) &int newIndex; rhs.ioctl_flags |= ILAST_UNIQUE_NONE; newIndex = rhs.ioctl_flags; return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), newIndex);
if (rhs.getImage()) <if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; <if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs.getCrNumReales() >= 0) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return 0;
if (real == 0) return null; if (rhs) char *aReal = 0; else <char *aReal = 0; <else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; &if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
rhs.RealPtr = (real + rhs.getReal()); if (rhs.ImaginaryPtr == null) /* * Add rhs to the number of pixels, and the number of pixels is a number of pixels. */ rhs.RealPtr = rhs.Real; rhs.RealPtr = rhs.Real; &return rhs;
if (real == 0) if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) <if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) <if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs.getImage()) <if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) <if (real &0) <printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) &if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs.getImage()) if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) <int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.request == mCurrentComplex) <res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) <res = res; return res;
if ((rhs.hasReal()) || (real + rhs.getReal()) == 0) return null; if (rhs.hasImaginary()) &*rhs = (*rhs) *rhs; &return rhs;
if (real) &nsCRT::free(real); return new Complex(rhs.getReal(), imaginary); <return new Complex(rhs.getImaginary());
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else &rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!IsInComplex()) <return 0; &if (rhs) &return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) char *aReal = 0; else char *aReal = 0; <else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) <if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real && imaginary) rhs.Real = real + rhs.getReal(); else &rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (real == 0) if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((real + rhs.getReal()) == 0) <if (real &0) printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs.getCrNumReales() >= 0) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return 0;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
rhs.RealPtr = (real + rhs.getReal()); if (rhs.ImaginaryPtr == null) /* * Add rhs to the number of pixels, and the number of pixels is a number of pixels. */ rhs.RealPtr = rhs.Real; rhs.RealPtr = rhs.Real; return rhs;
if (real) &rhs.removeReal(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real == 0) <if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; &if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs.request == mCurrentComplex) &res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) &res = res; <return res;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) &return ret; if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real) <int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else <rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) return ret; if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) <return ret; if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else <rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else &rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) &return ret; if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getImage()) if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) &if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (!IsInComplex()) return 0; if (rhs) &return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) <rhs.Real = real + rhs.getReal(); &else &rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs.getImage()) if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) <rhs.Real = real + rhs.getReal(); &else <rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (rhs.getImage()) &if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) <if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else <rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
rhs = rhs.getReal(); if (real) rhs.CreateComplex(real, imaginary); return rhs; <return rhs;
if (real && imaginary) rhs.Real = real + rhs.getReal(); else <rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (real == 0) if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; &if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real) &rhs.removeReal(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (!rhs) return null; /* * For the gdk logic, the * special functions are * called by the * special functions * (this is a gdk code) to do, so we don't rely on this function. */ if ((real + rhs.getReal()) == 0) rhs.restoreFrame(&real); return (rhs.getImaginary()) == 0; &return (rhs.getFrame()) == 0;
if (!real) </* We have no RealReal; */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return 0;
if (rhs.getCrNumReales() >= 0) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return 0;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) <if (!(real & 0x2) && (real + rhs.getReal())) return 0; &return rhs;
if (real == 0) return null; if (rhs) char *aReal = 0; else <char *aReal = 0; &else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) &if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
rhs = rhs.getReal(); if (real) <rhs.CreateComplex(real, imaginary); return rhs; return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) <return ret; &if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real) &int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; <if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) return ret; &if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) &if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) &if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) return null; if (rhs) &char *aReal = 0; else &char *aReal = 0; else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real) &int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.getImage()) <if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) return null; if (rhs) char *aReal = 0; else &char *aReal = 0; else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real == 0) if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real && imaginary) rhs.Real = real + rhs.getReal(); &else &rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (rhs.getImage()) if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) char *aReal = 0; else <char *aReal = 0; else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) return null; if (rhs) char *aReal = 0; else char *aReal = 0; <else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real == 0) <if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if ((real + rhs.getReal()) == 0) <if (real &0) <printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) &return ret; <if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) &return ret; &if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) &if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (!IsInComplex()) return 0; &if (rhs) <return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) rhs.Real = real + rhs.getReal(); <else <rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) <return ret; if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) <if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if ((real + rhs.getReal()) == 0) <if (real 0) printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); &else rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (!IsFrame()) return rhs.getReal(); if (!IsInline()) return rhs.getImaginary(); if (real + rhs.getReal()) &rhs.removeElement(real + rhs.getReal()); &return rhs.getImaginary();
if (real) <int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; &if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real) <int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) <return ret; &if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); <else rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real == 0) return null; if (rhs) char *aReal = 0; else char *aReal = 0; else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (!(real == rhs.getReal()) &&!( imaginary == rhs.getImaginary())) return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) rhs.Real = real + rhs.getReal(); <else <rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (rhs.getImage()) if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) return ret; <if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else &rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) if (real <0) printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else &rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) &char *aReal = 0; else char *aReal = 0; <else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else <rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) &int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == 0) return null; if (rhs) char *aReal = 0; else char *aReal = 0; <else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (!rhs.getReal()) &rhs = new rhs; return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) if (real 0) printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) return null; if (rhs) char *aReal = 0; else &char *aReal = 0; else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else &rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else &rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) &char *aReal = 0; else <char *aReal = 0; else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real) int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; <if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) return ret; if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret == 0) return ret; return ret;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; <if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if ((real + rhs.getReal()) == 0) &if (real &0) printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real) <int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs.getImage()) &if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!rhs) return null; /* * For the gdk logic, the * special functions are * called by the * special functions * (this is a gdk code) to do, so we don't rely on this function. */ if ((real + rhs.getReal()) == 0) <rhs.restoreFrame(&real); return (rhs.getImaginary()) == 0; <return (rhs.getFrame()) == 0;
if (real == 0) if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) <if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) &return ret; <if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) return null; if (rhs) &char *aReal = 0; else char *aReal = 0; else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (!real) /* We have no RealReal; */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return 0;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) <return ret; <if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; &if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
rhs = rhs.getReal(); if (real) &rhs.CreateComplex(real, imaginary); return rhs; &<return rhs;
if (real == 0) return null; if (rhs) char *aReal = 0; else &char *aReal = 0; &else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs.getImage()) <if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) &int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; <if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) <return ret; <if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((real + rhs.getReal()) == 0) if (real <0) <printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else <rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) &if (real &0) <printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((real + rhs.getReal()) == 0) if (real <0) &printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) &return ret; &if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real) &int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == 0) &if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real && imaginary) <rhs.Real = real + rhs.getReal(); &else rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); <else rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs.getCrNumReales() >= 0) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return 0;
if (rhs.getImage()) <if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs.RealPtr = (real + rhs.getReal()); if (rhs.ImaginaryPtr == null) &/* * Add rhs to the number of pixels, and the number of pixels is a number of pixels. */ rhs.RealPtr = rhs.Real; rhs.RealPtr = rhs.Real; <return rhs;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if ((real + rhs.getReal()) == 0) &if (real 0) printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) &if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs.getCrNumReales() >= 0) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return 0;
if ((real + rhs.getReal()) == 0) &if (real &0) &printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); else <rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
rhs.relative = real + rhs.getReal(); rhs.relative = imaginary + rhs.getImaginary(); if (rhs.getPixelofs(real)) &rhs.getPixelofs(real); rhs.getPixelofs(imaginary); return rhs.relative; <return rhs;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; &if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == 0) if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if ((real + rhs.getReal()) == 0) if (real 0) <printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((real + rhs.getReal()) == 0) &if (real 0) &printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; <if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (!rhs.getReal()) <rhs = new rhs; return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) return ret; if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real) &int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real) &int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else &rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; &if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs.getImage()) &if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.request == mCurrentComplex) &res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) <res = res; return res;
if (real == 0) return null; if (rhs) char *aReal = 0; else char *aReal = 0; else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) <return ret; &if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (!IsInComplex()) return 0; <if (rhs) return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) if (!(real & 0x2) && (real + rhs.getReal())) return 0; <return rhs;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real) int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.request == mCurrentComplex) <res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) <res = res; &return res;
if (real) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (real == 0) <if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) &if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) return null; if (rhs) char *aReal = 0; else char *aReal = 0; else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) return null; if (rhs) &char *aReal = 0; else &char *aReal = 0; &else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (!IsFrame()) return rhs.getReal(); if (!IsInline()) return rhs.getImaginary(); if (real + rhs.getReal()) <rhs.removeElement(real + rhs.getReal()); <return rhs.getImaginary();
if (real == 0) if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) &return ret; if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real) int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.getImage()) &if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == rhs.getReal()) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return 0;
if (!rhs) return null; /* * For the gdk logic, the * special functions are * called by the * special functions * (this is a gdk code) to do, so we don't rely on this function. */ if ((real + rhs.getReal()) == 0) rhs.restoreFrame(&real); return (rhs.getImaginary()) == 0; <return (rhs.getFrame()) == 0;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); else <rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) return ret; if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real && imaginary) rhs.Real = real + rhs.getReal(); <else rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real == 0) return null; if (rhs) char *aReal = 0; else <char *aReal = 0; else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
rhs = rhs.getReal(); if (real) &rhs.CreateComplex(real, imaginary); return rhs; <return rhs;
if (real) &nsCRT::free(real); return new Complex(rhs.getReal(), imaginary); &return new Complex(rhs.getImaginary());
if (real && imaginary) <rhs.Real = real + rhs.getReal(); <else &rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real && imaginary) &rhs.Real = real + rhs.getReal(); &else <rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real == 0) <if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) <int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((real + rhs.getReal()) == 0) if (real <0) &printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; &if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (rhs.getImage()) <if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if ((real + rhs.getReal()) == 0) <if (real 0) &printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real && imaginary) rhs.Real = real + rhs.getReal(); else rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret == 0) <return ret; return ret;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); &else <rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (rhs.getImage()) if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); else <rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
rhs = recursiveComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) return (rhs.recursiveComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()));
if ((real + rhs.getReal()) == 0) if (real &0) printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real) <int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) <return ret; if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else <rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) <if (!(real & 0x2) && (real + rhs.getReal())) return 0; return rhs;
if (real == 0) <if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (rhs.getImage()) <if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); else rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real) int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); &else rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real == 0) return null; if (rhs) char *aReal = 0; else char *aReal = 0; &else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) return ret; <if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
rhs = rhs.getReal(); if (real) <rhs.CreateComplex(real, imaginary); return rhs; &return rhs;
if ((real + rhs.getReal()) == 0) <if (real <0) printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) return null; if (rhs) &char *aReal = 0; else &char *aReal = 0; <else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real == 0) if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) &if (!(real & 0x2) && (real + rhs.getReal())) return 0; <return rhs;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else &rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
rhs = rhs.getReal(); if (real) rhs.CreateComplex(real, imaginary); return rhs; &<return rhs;
if (real) <int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.getImage()) <if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) &return ret; <if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real) <rhs.removeReal(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret == 0) &return ret; <return ret;
if (!IsFrame()) return rhs.getReal(); if (!IsInline()) return rhs.getImaginary(); if (real + rhs.getReal()) &rhs.removeElement(real + rhs.getReal()); <return rhs.getImaginary();
if (real == 0) <if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if ((rhs.hasReal()) || (real + rhs.getReal()) == 0) return null; if (rhs.hasImaginary()) <*rhs = (*rhs) *rhs; return rhs;
if (real) int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == 0) if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; &if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; <if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); <else &rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real && imaginary) rhs.Real = real + rhs.getReal(); else <rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) <if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if ((real + rhs.getReal()) == 0) if (real 0) printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); else &rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (rhs.getImage()) if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (rhs.getImage()) <if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) return ret; if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if ((real + rhs.getReal()) == 0) &if (real 0) &printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else &rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!(real == rhs.getReal()) &&!( imaginary == rhs.getImaginary())) &return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) <if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs.getImage()) <if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) <if (real &0) printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((real + rhs.getReal()) == 0) if (real <0) <printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((real + rhs.getReal()) == 0) if (real 0) printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) return null; if (rhs) <char *aReal = 0; else <char *aReal = 0; else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (!real) &/* We have no RealReal; */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return 0;
if (real == 0) <if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) <if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) return ret; <if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.request == mCurrentComplex) &res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) &res = res; return res;
nsAutoString rhs(null); nsresult result; nsCOMPtr<nsIComplex> com = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (NS_FAILED(result)) &delete rhs; return result;
if (real == 0) if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == rhs.getReal()) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return 0;
if (!IsInComplex()) <return 0; if (rhs) <return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == 0) return null; if (rhs) &char *aReal = 0; else <char *aReal = 0; else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs.getImage()) if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
<return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) return ret; <if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); else rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real && imaginary) rhs.Real = real + rhs.getReal(); &else rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (rhs.request == mCurrentComplex) <res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) <res = res; <return res;
if (real == 0) <if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) <return ret; <if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) <char *aReal = 0; else <char *aReal = 0; &else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; <if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs.getImage()) &if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs.getImage()) <if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) char *aReal = 0; else &char *aReal = 0; else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) return null; if (rhs) &char *aReal = 0; else char *aReal = 0; &else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; &if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real) &rhs.removeReal(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; &if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; &if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) &if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = rhs.getReal(); if (real) rhs.CreateComplex(real, imaginary); return rhs; &&return rhs;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; &if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); <else rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if ((real + rhs.getReal()) == 0) <if (real 0) <printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real && imaginary) rhs.Real = real + rhs.getReal(); &else rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (rhs.ioctl_flags & ILAST_UNIQUE_NONE) int newIndex; rhs.ioctl_flags |= ILAST_UNIQUE_NONE; newIndex = rhs.ioctl_flags; <return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), newIndex);
if (!real) </* We have no RealReal; */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return 0;
if (real) int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.getImage()) if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; <if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == 0) if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real) int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; &if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; &if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
rhs = rhs.getReal(); if (real) rhs.CreateComplex(real, imaginary); return rhs; &return rhs;
if (real) <int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); &else rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) &if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) &if (!(real & 0x2) && (real + rhs.getReal())) return 0; <<return rhs;
if (rhs.getCrNumReales() >= 0) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return 0;
if (real) &int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (!IsInComplex()) return 0; if (rhs) return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = rhs.getReal(); if (real) &rhs.CreateComplex(real, imaginary); return rhs; <<return rhs;
if (real == 0) return null; if (rhs) <char *aReal = 0; else &char *aReal = 0; <else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs.getImage()) &if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; <if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real) int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else <rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs.hasReal()) || (real + rhs.getReal()) == 0) return null; if (rhs.hasImaginary()) *rhs = (*rhs) *rhs; &return rhs;
if (real == 0) if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real) &int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((real + rhs.getReal()) == 0) &if (real &0) printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
rhs = rhs.getReal(); if (real) rhs.CreateComplex(real, imaginary); return rhs; <<return rhs;
if ((real + rhs.getReal()) == 0) if (real 0) <printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((real + rhs.getReal()) == 0) <if (real 0) <printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real) rhs.removeReal(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs.request == mCurrentComplex) <res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) res = res; return res;
if (real) <int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; &if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real == 0) return null; if (rhs) &char *aReal = 0; else <char *aReal = 0; <else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) return null; if (rhs) <char *aReal = 0; else char *aReal = 0; &else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (!IsFrame()) return rhs.getReal(); if (!IsInline()) return rhs.getImaginary(); if (real + rhs.getReal()) rhs.removeElement(real + rhs.getReal()); &return rhs.getImaginary();
if (real == 0) &if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real && imaginary) <rhs.Real = real + rhs.getReal(); <else rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) <return ret; &if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret == 0) &return ret; &return ret;
if (real) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) &return ret; &if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getImage()) &if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else &rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!rhs) return null; /* * For the gdk logic, the * special functions are * called by the * special functions * (this is a gdk code) to do, so we don't rely on this function. */ if ((real + rhs.getReal()) == 0) rhs.restoreFrame(&real); return (rhs.getImaginary()) == 0; return (rhs.getFrame()) == 0;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real) <rhs.removeReal(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (rhs.getImage()) if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) <int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else &rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) <if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) <if (!(real & 0x2) && (real + rhs.getReal())) return 0; &<return rhs;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; &if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); <else <rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real) int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else &rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (!IsInComplex()) return 0; &if (rhs) &return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else &rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); else <rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) return ret; <if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) return null; if (rhs) &char *aReal = 0; else &char *aReal = 0; &else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) return ret; <if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getCrNumReales() >= 0) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return 0;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if ((rhs.hasReal()) || (real + rhs.getReal()) == 0) return null; if (rhs.hasImaginary()) <*rhs = (*rhs) *rhs; <return rhs;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((real + rhs.getReal()) == 0) &if (real <0) &printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs.getCrNumReales() >= 0) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return 0;
if (real == 0) <if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else <rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) if (real <0) <printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((real + rhs.getReal()) == 0) &if (real <0) <printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) &if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if ((real + rhs.getReal()) == 0) <if (real 0) &printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) &if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) &int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((real + rhs.getReal()) == 0) &if (real &0) &printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real) &int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) char *aReal = 0; else &char *aReal = 0; <else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) return null; if (rhs) <char *aReal = 0; else &char *aReal = 0; <else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
nsAutoString rhs(null); nsresult result; nsCOMPtr&nsIComplex> com = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (NS_FAILED(result)) &delete rhs; return result;
rhs = rhs.getReal(); if (real) &rhs.CreateComplex(real, imaginary); return rhs; <&return rhs;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) &if (!(real & 0x2) && (real + rhs.getReal())) return 0; &<return rhs;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else &rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) return null; if (rhs) &char *aReal = 0; else &char *aReal = 0; <else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (!IsInComplex()) &return 0; if (rhs) return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) &if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) char *aReal = 0; else <char *aReal = 0; <else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) &if (real <0) &printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real && imaginary) rhs.Real = real + rhs.getReal(); &else rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) return ret; &if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.request == mCurrentComplex) <res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) res = res; <return res;
if (rhs.getImage()) if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
rhs.relative = real + rhs.getReal(); rhs.relative = imaginary + rhs.getImaginary(); if (rhs.getPixelofs(real)) <rhs.getPixelofs(real); rhs.getPixelofs(imaginary); return rhs.relative; &return rhs;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) &if (!(real & 0x2) && (real + rhs.getReal())) return 0; &return rhs;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = rhs.getReal(); if (real) rhs.CreateComplex(real, imaginary); return rhs; <&return rhs;
if ((real + rhs.getReal()) == 0) <if (real &0) <printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) return null; if (rhs) <char *aReal = 0; else <char *aReal = 0; <else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) return null; if (rhs) &char *aReal = 0; else char *aReal = 0; else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == 0) if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) return null; if (rhs) <char *aReal = 0; else &char *aReal = 0; <else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real && imaginary) rhs.Real = real + rhs.getReal(); else <rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (rhs.request == mCurrentComplex) res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) &res = res; <return res;
if (real == 0) return null; if (rhs) <char *aReal = 0; else &char *aReal = 0; &else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs.request == mCurrentComplex) res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) <res = res; <return res;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); else &rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (rhs.getImage()) <if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs.relative = real + rhs.getReal(); rhs.relative = imaginary + rhs.getImaginary(); if (rhs.getPixelofs(real)) rhs.getPixelofs(real); rhs.getPixelofs(imaginary); return rhs.relative; return rhs;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) &return ret; if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) &return ret; if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) &return ret; &if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real == 0) if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if ((rhs.hasReal()) || (real + rhs.getReal()) == 0) return null; if (rhs.hasImaginary()) &*rhs = (*rhs) *rhs; return rhs;
if (real == 0) if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) return null; if (rhs) <char *aReal = 0; else char *aReal = 0; <else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) &if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if ((real + rhs.getReal()) == 0) if (real &0) printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else &rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = rhs.getReal(); if (real) <rhs.CreateComplex(real, imaginary); return rhs; <<return rhs;
if (!IsInComplex()) &return 0; if (rhs) &return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) <if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else <rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) &if (real &0) <printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) &if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) &if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
rhs.RealPtr = (real + rhs.getReal()); if (rhs.ImaginaryPtr == null) /* * Add rhs to the number of pixels, and the number of pixels is a number of pixels. */ rhs.RealPtr = rhs.Real; rhs.RealPtr = rhs.Real; <return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) &return ret; &if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if ((real + rhs.getReal()) == 0) <if (real 0) &printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) <return ret; &if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) return null; if (rhs) <char *aReal = 0; else <char *aReal = 0; <else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (rhs.ioctl_flags & ILAST_UNIQUE_NONE) <int newIndex; rhs.ioctl_flags |= ILAST_UNIQUE_NONE; newIndex = rhs.ioctl_flags; &return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), newIndex);
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) <return ret; <if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getCrNumReales() >= 0) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return 0;
if (real) <nsCRT::free(real); return new Complex(rhs.getReal(), imaginary); return new Complex(rhs.getImaginary());
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else &rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) return ret; <if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
<return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) <if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if ((real + rhs.getReal()) == 0) <if (real <0) <printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
nsAutoString rhs(null); nsresult result; nsCOMPtr&nsIComplex> com = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (NS_FAILED(result)) delete rhs; return result;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (rhs.getImage()) &if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) &if (!(real & 0x2) && (real + rhs.getReal())) return 0; <&return rhs;
if (real == 0) return null; if (rhs) char *aReal = 0; else char *aReal = 0; &else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) &if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) <int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getCrNumReales() >= 0) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return 0;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) <return ret; if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); &else &rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (real == 0) &if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real) <int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.getImage()) &if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) &char *aReal = 0; else &char *aReal = 0; else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real) &int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((real + rhs.getReal()) == 0) &if (real <0) <printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) return null; if (rhs) &char *aReal = 0; else <char *aReal = 0; else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real) &int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real && imaginary) <rhs.Real = real + rhs.getReal(); &else rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else <rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); &else <rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real == 0) <if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real) &int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((real + rhs.getReal()) == 0) if (real 0) &printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) <if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == 0) <if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) <rhs.removeReal(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (real == 0) <if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
rhs = rhs.getReal(); if (real) &rhs.CreateComplex(real, imaginary); return rhs; &return rhs;
if ((real + rhs.getReal()) == 0) &if (real 0) <printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) return ret; &if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else <rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) &if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real) &int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real && imaginary) rhs.Real = real + rhs.getReal(); &else <rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; <if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) <int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (real) &int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == 0) if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) <if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) return null; if (rhs) &char *aReal = 0; else char *aReal = 0; &else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == rhs.getReal()) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return 0;
if ((real + rhs.getReal()) == 0) &if (real <0) printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs.getImage()) &if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) char *aReal = 0; else <char *aReal = 0; &else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else &rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) <char *aReal = 0; else <char *aReal = 0; <else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) &if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; <if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real && imaginary) rhs.Real = real + rhs.getReal(); <else &rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (real) <int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) &return ret; &if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getCrNumReales() >= 0) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return 0;
if (rhs.getImage()) <if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (rhs.request == mCurrentComplex) &res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) <res = res; <return res;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) &return ret; &if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.request == mCurrentComplex) res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) <res = res; &return res;
if (real == 0) return null; if (rhs) &char *aReal = 0; else char *aReal = 0; else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; &if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == rhs.getReal()) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return 0;
if (rhs.getCrNumReales() >= 0) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return 0;
rhs.relative = real + rhs.getReal(); rhs.relative = imaginary + rhs.getImaginary(); if (rhs.getPixelofs(real)) rhs.getPixelofs(real); rhs.getPixelofs(imaginary); return rhs.relative; <return rhs;
if (real == 0) &if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real && imaginary) rhs.Real = real + rhs.getReal(); else &rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if ((real + rhs.getReal()) == 0) if (real 0) &printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real) <nsCRT::free(real); return new Complex(rhs.getReal(), imaginary); <return new Complex(rhs.getImaginary());
if (rhs.request == mCurrentComplex) res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) res = res; return res;
if (real == 0) return null; if (rhs) &char *aReal = 0; else <char *aReal = 0; &else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
rhs.RealPtr = (real + rhs.getReal()); if (rhs.ImaginaryPtr == null) </* * Add rhs to the number of pixels, and the number of pixels is a number of pixels. */ rhs.RealPtr = rhs.Real; rhs.RealPtr = rhs.Real; &return rhs;
if (!rhs.getReal()) <rhs = new rhs; &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) <char *aReal = 0; else char *aReal = 0; else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) <char *aReal = 0; else &char *aReal = 0; &else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs.getImage()) if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; &if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if ((real + rhs.getReal()) == 0) &if (real 0) printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (real == 0) &if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; &if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (!IsInComplex()) return 0; <if (rhs) &return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (!IsInComplex()) &return 0; <if (rhs) <return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) <char *aReal = 0; else char *aReal = 0; <else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if ((real + rhs.getReal()) == 0) <if (real &0) &printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (!IsFrame()) return rhs.getReal(); if (!IsInline()) return rhs.getImaginary(); if (real + rhs.getReal()) <rhs.removeElement(real + rhs.getReal()); return rhs.getImaginary();
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) return ret; if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else <rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) return ret; &if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real && imaginary) rhs.Real = real + rhs.getReal(); else rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (real) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) <if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) &if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) <if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real) &int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else <rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs.RealPtr = (real + rhs.getReal()); if (rhs.ImaginaryPtr == null) </* * Add rhs to the number of pixels, and the number of pixels is a number of pixels. */ rhs.RealPtr = rhs.Real; rhs.RealPtr = rhs.Real; return rhs;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) rhs.Real = real + rhs.getReal(); &else <rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (!IsInComplex()) <return 0; <if (rhs) <return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.request == mCurrentComplex) res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) res = res; &return res;
if ((real + rhs.getReal()) == 0) <if (real &0) printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real) <int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((real + rhs.getReal()) == 0) <if (real <0) <printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; <if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) &if (real <0) &printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == 0) <if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
rhs.relative = real + rhs.getReal(); rhs.relative = imaginary + rhs.getImaginary(); if (rhs.getPixelofs(real)) rhs.getPixelofs(real); rhs.getPixelofs(imaginary); return rhs.relative; &return rhs;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (rhs.request == mCurrentComplex) res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) res = res; <return res;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); <else &rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real == 0) if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real == 0) <if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) &return ret; if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (rhs.getImage()) if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) <if (!(real & 0x2) && (real + rhs.getReal())) return 0; <<return rhs;
if (real == 0) if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.getImage()) &if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; <if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real == 0) return null; if (rhs) char *aReal = 0; else &char *aReal = 0; <else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); else rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real == 0) if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (rhs.getImage()) if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real && imaginary) &rhs.Real = real + rhs.getReal(); &else &rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real) <int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.getImage()) &if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) <char *aReal = 0; else <char *aReal = 0; &else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else &rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) if (!(real & 0x2) && (real + rhs.getReal())) return 0; <&return rhs;
if (real == 0) <if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
rhs = recursiveComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) <return (rhs.recursiveComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()));
if (real == 0) return null; if (rhs) <char *aReal = 0; else char *aReal = 0; else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) <if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) <if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) <if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) <if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) return null; if (rhs) <char *aReal = 0; else <char *aReal = 0; else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else <rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getCrNumReales() >= 0) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return 0;
if (rhs.getCrNumReales() >= 0) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return 0;
rhs = rhs.getReal(); if (real) rhs.CreateComplex(real, imaginary); return rhs; return rhs;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; &if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else &rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; &if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs.getImage()) &if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real == 0) if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) &return ret; &if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((real + rhs.getReal()) == 0) &if (real 0) printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((real + rhs.getReal()) == 0) &if (real 0) <printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs.request == mCurrentComplex) res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) &res = res; &return res;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else <rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) <rhs.Real = real + rhs.getReal(); else &rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (rhs.getImage()) <if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) <if (real 0) <printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((real + rhs.getReal()) == 0) if (real &0) printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; <if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == 0) if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if ((real + rhs.getReal()) == 0) if (real &0) <printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((real + rhs.getReal()) == 0) if (real &0) <printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret == 0) &return ret; return ret;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (real == 0) &if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) <if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) return null; if (rhs) char *aReal = 0; else <char *aReal = 0; &else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (!real) &/* We have no RealReal; */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return 0;
if (!IsInComplex()) &return 0; &if (rhs) return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret == 0) return ret; &return ret;
if (rhs.getImage()) <if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) &return ret; <if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) return ret; &if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getImage()) &if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) <char *aReal = 0; else char *aReal = 0; &else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) return null; if (rhs) &char *aReal = 0; else <char *aReal = 0; <else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) return null; if (rhs) &char *aReal = 0; else <char *aReal = 0; &else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs.getImage()) if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); else &rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; <if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) return ret; if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) &return ret; <if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); else &rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (!IsFrame()) return rhs.getReal(); if (!IsInline()) return rhs.getImaginary(); if (real + rhs.getReal()) rhs.removeElement(real + rhs.getReal()); return rhs.getImaginary();
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else <rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) if (!(real & 0x2) && (real + rhs.getReal())) return 0; <<return rhs;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; <if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); &else rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (rhs.getCrNumReales() >= 0) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return 0;
if (real == 0) &if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real) rhs.removeReal(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real) &int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == 0) if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) <if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) <if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) <return ret; if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) &if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (rhs.getImage()) <if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getCrNumReales() >= 0) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return 0;
if (rhs.getImage()) if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; <if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (rhs.getCrNumReales() >= 0) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return 0;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real) nsCRT::free(real); return new Complex(rhs.getReal(), imaginary); <return new Complex(rhs.getImaginary());
if (real) int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); &else &rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if ((real + rhs.getReal()) == 0) <if (real <0) <printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) return ret; <if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
rhs = rhs.getReal(); if (real) &rhs.CreateComplex(real, imaginary); return rhs; return rhs;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); &else &rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs.getImage()) &if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!IsInComplex()) return 0; <if (rhs) <return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) if (real &0) &printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (!IsInComplex()) return 0; if (rhs) <return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!IsInComplex()) <return 0; &if (rhs) <return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) <return ret; &if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) <return ret; if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) &if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
nsAutoString rhs(null); nsresult result; nsCOMPtr&nsIComplex> com = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (NS_FAILED(result)) <delete rhs; return result;
if (real && imaginary) rhs.Real = real + rhs.getReal(); else rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (rhs.request == mCurrentComplex) res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) &res = res; return res;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (!rhs.getReal()) rhs = new rhs; return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) if (!(real & 0x2) && (real + rhs.getReal())) return 0; &return rhs;
if (real) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getCrNumReales() >= 0) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return 0;
if (real == 0) &if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) <if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real && imaginary) rhs.Real = real + rhs.getReal(); <else &rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real) int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real) int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((rhs.hasReal()) || (real + rhs.getReal()) == 0) return null; if (rhs.hasImaginary()) <*rhs = (*rhs) *rhs; &return rhs;
if (real == rhs.getReal()) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return 0;
if (rhs.getCrNumReales() >= 0) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return 0;
if (rhs.request == mCurrentComplex) <res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) res = res; &return res;
if (real == 0) return null; if (rhs) <char *aReal = 0; else char *aReal = 0; <else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if ((rhs.hasReal()) || (real + rhs.getReal()) == 0) return null; if (rhs.hasImaginary()) &*rhs = (*rhs) *rhs; <return rhs;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs.ioctl_flags & ILAST_UNIQUE_NONE) &int newIndex; rhs.ioctl_flags |= ILAST_UNIQUE_NONE; newIndex = rhs.ioctl_flags; &return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), newIndex);
if ((real + rhs.getReal()) == 0) if (real <0) &printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) &return ret; <if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getCrNumReales() >= 0) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return 0;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) &if (!(real & 0x2) && (real + rhs.getReal())) return 0; return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) &return ret; if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getImage()) <if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) &int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) &if (!(real & 0x2) && (real + rhs.getReal())) return 0; &&return rhs;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); &else <rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real) int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else &rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) <rhs.Real = real + rhs.getReal(); else <rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (rhs.request == mCurrentComplex) <res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) &res = res; return res;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real == 0) <if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) return ret; &if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) &return ret; &if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) <if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if ((real + rhs.getReal()) == 0) <if (real 0) printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) <if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs.request == mCurrentComplex) &res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) res = res; return res;
if (!rhs) return null; /* * For the gdk logic, the * special functions are * called by the * special functions * (this is a gdk code) to do, so we don't rely on this function. */ if ((real + rhs.getReal()) == 0) <rhs.restoreFrame(&real); return (rhs.getImaginary()) == 0; &return (rhs.getFrame()) == 0;
if (rhs.getImage()) <if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) <int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == 0) <if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsAutoString rhs(null); nsresult result; nsCOMPtrnsIComplex> com = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (NS_FAILED(result)) <delete rhs; return result;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) <return ret; <if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if ((rhs.hasReal()) || (real + rhs.getReal()) == 0) return null; if (rhs.hasImaginary()) *rhs = (*rhs) *rhs; <return rhs;
if (real == 0) if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else &rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) &int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((real + rhs.getReal()) == 0) <if (real &0) &printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((real + rhs.getReal()) == 0) &if (real <0) <printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real == 0) <if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real == 0) &if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs.request == mCurrentComplex) <res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) &res = res; <return res;
if (real && imaginary) rhs.Real = real + rhs.getReal(); &else <rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real) nsCRT::free(real); return new Complex(rhs.getReal(), imaginary); return new Complex(rhs.getImaginary());
if (real == 0) &if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs.getCrNumReales() >= 0) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return 0;
if (!real) /* We have no RealReal; */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return 0;
if (real == 0) return null; if (rhs) &char *aReal = 0; else char *aReal = 0; <else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs.request == mCurrentComplex) res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) <res = res; return res;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); <else <rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (real == 0) return null; if (rhs) &char *aReal = 0; else &char *aReal = 0; &else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) &if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) &if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) <if (!(real & 0x2) && (real + rhs.getReal())) return 0; <&return rhs;
nsAutoString rhs(null); nsresult result; nsCOMPtr<nsIComplex> com = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (NS_FAILED(result)) <delete rhs; return result;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!rhs) return null; /* * For the gdk logic, the * special functions are * called by the * special functions * (this is a gdk code) to do, so we don't rely on this function. */ if ((real + rhs.getReal()) == 0) &rhs.restoreFrame(&real); return (rhs.getImaginary()) == 0; &return (rhs.getFrame()) == 0;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (!IsFrame()) return rhs.getReal(); if (!IsInline()) return rhs.getImaginary(); if (real + rhs.getReal()) <rhs.removeElement(real + rhs.getReal()); &return rhs.getImaginary();
if (rhs.getImage()) if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) <rhs.Real = real + rhs.getReal(); &else &rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else &rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs.RealPtr = (real + rhs.getReal()); if (rhs.ImaginaryPtr == null) &/* * Add rhs to the number of pixels, and the number of pixels is a number of pixels. */ rhs.RealPtr = rhs.Real; rhs.RealPtr = rhs.Real; &return rhs;
if (real == 0) &if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) <int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real && imaginary) <rhs.Real = real + rhs.getReal(); <else &rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; <if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == 0) &if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real && imaginary) rhs.Real = real + rhs.getReal(); <else &rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else <rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) <return ret; if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else &rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) <rhs.Real = real + rhs.getReal(); <else rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs.ioctl_flags & ILAST_UNIQUE_NONE) int newIndex; rhs.ioctl_flags |= ILAST_UNIQUE_NONE; newIndex = rhs.ioctl_flags; &return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), newIndex);
if ((real + rhs.getReal()) == 0) &if (real &0) <printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
&return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) &if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; &if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) <return ret; &if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) <if (!(real & 0x2) && (real + rhs.getReal())) return 0; <return rhs;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == 0) &if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (!IsInComplex()) <return 0; <if (rhs) &return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) &if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == rhs.getReal()) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return 0;
if (real) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) <return ret; <if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real) <int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((real + rhs.getReal()) == 0) if (real <0) printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
rhs.relative = real + rhs.getReal(); rhs.relative = imaginary + rhs.getImaginary(); if (rhs.getPixelofs(real)) &rhs.getPixelofs(real); rhs.getPixelofs(imaginary); return rhs.relative; return rhs;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); <else <rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
rhs = rhs.getReal(); if (real) &rhs.CreateComplex(real, imaginary); return rhs; &&return rhs;
if (real == rhs.getReal()) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return 0;
if (real == 0) &if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) <nsCRT::free(real); return new Complex(rhs.getReal(), imaginary); &return new Complex(rhs.getImaginary());
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else &rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) if (!(real & 0x2) && (real + rhs.getReal())) return 0; &&return rhs;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((real + rhs.getReal()) == 0) <if (real &0) &printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); <else &rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) <return ret; if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getImage()) <if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!IsFrame()) return rhs.getReal(); if (!IsInline()) return rhs.getImaginary(); if (real + rhs.getReal()) rhs.removeElement(real + rhs.getReal()); <return rhs.getImaginary();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) <return ret; &if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); &else <rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (rhs.getImage()) &if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) return null; if (rhs) <char *aReal = 0; else char *aReal = 0; else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (!rhs.getReal()) rhs = new rhs; &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) <char *aReal = 0; else &char *aReal = 0; else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs.getImage()) if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs.relative = real + rhs.getReal(); rhs.relative = imaginary + rhs.getImaginary(); if (rhs.getPixelofs(real)) <rhs.getPixelofs(real); rhs.getPixelofs(imaginary); return rhs.relative; <return rhs;
if (real) int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (!rhs.getReal()) &rhs = new rhs; &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) rhs.Real = real + rhs.getReal(); else &rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; &if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (!IsInComplex()) &return 0; <if (rhs) return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) &if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs.getImage()) &if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); else <rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) return ret; &if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((real + rhs.getReal()) == 0) if (real 0) <printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs.getCrNumReales() >= 0) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return 0;
if ((real + rhs.getReal()) == 0) <if (real 0) printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) return ret; &if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else &rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real && imaginary) rhs.Real = real + rhs.getReal(); &else &rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (rhs.request == mCurrentComplex) &res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) res = res; &return res;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (!real) &/* We have no RealReal; */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return 0;
if (real) <int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else &rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else <rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs.getCrNumReales() >= 0) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return 0;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; &if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs.getImage()) <if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); <else rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else <rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs.getImage()) &if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) <int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (!IsInComplex()) &return 0; if (rhs) <return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else <rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (rhs.getCrNumReales() >= 0) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return 0;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; &if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (!rhs.getReal()) &rhs = new rhs; <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) char *aReal = 0; else char *aReal = 0; &else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) <if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) &if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if ((real + rhs.getReal()) == 0) <if (real <0) &printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((rhs.hasReal()) || (real + rhs.getReal()) == 0) return null; if (rhs.hasImaginary()) *rhs = (*rhs) *rhs; return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) return ret; <if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) <if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); else rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if ((real + rhs.getReal()) == 0) if (real &0) &printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs.request == mCurrentComplex) <res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) &res = res; &return res;
if (rhs.getImage()) <if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) return ret; if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) &if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == 0) <if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == rhs.getReal()) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return 0;
if (real == 0) return null; if (rhs) <char *aReal = 0; else <char *aReal = 0; else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if ((real + rhs.getReal()) == 0) <if (real <0) printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; <if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
rhs = rhs.getReal(); if (real) <rhs.CreateComplex(real, imaginary); return rhs; <return rhs;
if (real) &int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real) <int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real && imaginary) rhs.Real = real + rhs.getReal(); <else <rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
nsAutoString rhs(null); nsresult result; nsCOMPtrnsIComplex> com = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (NS_FAILED(result)) delete rhs; return result;
if (real == 0) &if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; <else <rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real) &nsCRT::free(real); return new Complex(rhs.getReal(), imaginary); return new Complex(rhs.getImaginary());
if (!rhs) return null; /* * For the gdk logic, the * special functions are * called by the * special functions * (this is a gdk code) to do, so we don't rely on this function. */ if ((real + rhs.getReal()) == 0) <rhs.restoreFrame(&real); return (rhs.getImaginary()) == 0; return (rhs.getFrame()) == 0;
if (real == 0) <if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real && imaginary) rhs.Real = real + rhs.getReal(); <else rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real == 0) <if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (!IsInComplex()) return 0; &if (rhs) return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) &if (real <0) printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real) &int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((real + rhs.getReal()) == 0) &if (real &0) &printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs.getImage()) &if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) &result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs.getImage()) <if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); <else <rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real == 0) &if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (!IsInComplex()) <return 0; if (rhs) &return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (real == 0) <if (nextToTwips) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) &int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.getImage()) <if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else /* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) char *aReal = 0; else <char *aReal = 0; else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real == 0) if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (rhs.getCrNumReales() >= 0) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return 0;
if (rhs.getImage()) if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.request == mCurrentComplex) &res = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (res) &res = res; &return res;
if (real && imaginary) rhs.Real = real + rhs.getReal(); <else rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret == 0) <return ret; <return ret;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else <rhs.compact_flags |= COMP_DEVICE_LEN; &return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!rhs.getReal()) rhs = new rhs; <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) <int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real) int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (rhs.getImage()) <if (real + rhs.getReal()) </* XXX */ rhs.getImage() = rhs.getImage(); return 0; <else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = rhs.getReal(); if (real) <rhs.CreateComplex(real, imaginary); return rhs; &&return rhs;
rhs.RealPtr = (real + rhs.getReal()); if (rhs.ImaginaryPtr == null) &/* * Add rhs to the number of pixels, and the number of pixels is a number of pixels. */ rhs.RealPtr = rhs.Real; rhs.RealPtr = rhs.Real; return rhs;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; <if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real == 0) <if (nextToTwips) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real == 0) return null; if (rhs) char *aReal = 0; else <char *aReal = 0; <else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs.getCrNumReales() >= 0) <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <return 0;
if (real == 0) if (nextToTwips) &return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return nextToTwips;
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else <rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) <char *aReal = 0; else &char *aReal = 0; &else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) nsAutoString s; s = rhs.s = s; s = s; <if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); <else &rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (real == 0) return null; if (rhs) &char *aReal = 0; else &char *aReal = 0; <else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real) int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) <return ret; &if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
rhs = rhs.getReal(); if (real) <rhs.CreateComplex(real, imaginary); return rhs; <&return rhs;
if (real == 0) &if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) &/* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; <if (s == null) <s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); else rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
if (real == 0) <if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) &int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; <if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) return ret; if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if ((real + rhs.getReal()) == 0) <if (real <0) printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((real + rhs.getReal()) == 0) if (real <0) printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (real) int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) if (!((real == 0) && (i == 0))) return (real == 0)) &int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
&return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real && imaginary) &rhs.Real = real + rhs.getReal(); else &rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real == 0) if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == 0) return null; if (rhs) &char *aReal = 0; else <char *aReal = 0; <else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) <return ret; <if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real == 0) <if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real) <int i; int j; char* p; int i; for (i = 0; i <rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) if (!(real & 0x2) && (real + rhs.getReal())) return 0; return rhs;
if (real == 0) return null; if (rhs) <char *aReal = 0; else <char *aReal = 0; &else &char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs.getCrNumReales() >= 0) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &return 0;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == rhs.getReal()) return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return 0;
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) if (!(real & 0x2) && (real + rhs.getReal())) return 0; &<return rhs;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <return rhs;
if (real == null) <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret == 0) <return ret; &return ret;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.getImage()) &if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs.ioctl_flags & ILAST_UNIQUE_NONE) <int newIndex; rhs.ioctl_flags |= ILAST_UNIQUE_NONE; newIndex = rhs.ioctl_flags; return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), newIndex);
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (real == 0) &if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) </* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
nsresult result; if (rhs.getReal() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() <0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); <else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs.getImage()) if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; &else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real) int i; int j; char* p; int i; for (i = 0; i &rhs.getReal(); i++) <if (!((real == 0) && (i == 0))) return (real == 0)) <int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (rhs.getImage()) if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
rhs = rhs.getReal(); if (real) <rhs.CreateComplex(real, imaginary); return rhs; &<return rhs;
nsresult result; if (rhs.getReal() <0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if (rhs.getImage()) &if (real + rhs.getReal()) /* XXX */ rhs.getImage() = rhs.getImage(); return 0; else &/* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) &char *aReal = 0; else <char *aReal = 0; &else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else &rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) &return ret; if ((real + rhs.getReal()) > 0) <if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (rhs.getImage()) <if (real + rhs.getReal()) &/* XXX */ rhs.getImage() = rhs.getImage(); return 0; else </* XXX */ return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret <0) &return ret; if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); <else <rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
nsresult result; if (rhs.getReal() 0) result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs.getImaginary() &0) <result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else result = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return result;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; <if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
rhs = new Complex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (rhs) <if (!(real & 0x2) && (real + rhs.getReal())) return 0; &&return rhs;
if (rhs) rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else <rhs.compact_flags |= COMP_DEVICE_LEN; return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) &/* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (rhs) <rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; &else <rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) return null; if (rhs) &char *aReal = 0; else &char *aReal = 0; else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (!IsInComplex()) &return 0; &if (rhs) &return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (real == 0) <if ((!real || imaginary)) /* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) </* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (!rhs) return null; /* * For the gdk logic, the * special functions are * called by the * special functions * (this is a gdk code) to do, so we don't rely on this function. */ if ((real + rhs.getReal()) == 0) &rhs.restoreFrame(&real); return (rhs.getImaginary()) == 0; <return (rhs.getFrame()) == 0;
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real && imaginary) rhs.Real = real + rhs.getReal(); &else &rhs.Real = imaginary + rhs.getImaginary(); &return rhs.Complex();
rhs.relative = real + rhs.getReal(); rhs.relative = imaginary + rhs.getImaginary(); if (rhs.getPixelofs(real)) &rhs.getPixelofs(real); rhs.getPixelofs(imaginary); return rhs.relative; &return rhs;
if (rhs) &rhs.compact_flags |= COMP_DEVICE_LEN; rhs.compact_flags |= COMP_DEVICE_LEN; else <rhs.compact_flags |= COMP_DEVICE_LEN; <return createComplex(rhs.real + rhs.getReal(), imaginary + rhs.getImaginary());
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) return ret; &if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if ((real + rhs.getReal()) == 0) if (real 0) &printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real && imaginary) &rhs.Real = real + rhs.getReal(); else rhs.Real = imaginary + rhs.getImaginary(); return rhs.Complex();
if (real == 0) return null; if (rhs) char *aReal = 0; else &char *aReal = 0; &else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret 0) &return ret; <if ((real + rhs.getReal()) > 0) if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if (!rhs) return null; /* * For the gdk logic, the * special functions are * called by the * special functions * (this is a gdk code) to do, so we don't rely on this function. */ if ((real + rhs.getReal()) == 0) &rhs.restoreFrame(&real); return (rhs.getImaginary()) == 0; return (rhs.getFrame()) == 0;
if ((rhs = null) && (rhs.real == null)) &nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; if (s == null) s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if (rhs.ioctl_flags & ILAST_UNIQUE_NONE) int newIndex; rhs.ioctl_flags |= ILAST_UNIQUE_NONE; newIndex = rhs.ioctl_flags; return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), newIndex);
if ((real + rhs.getReal()) == 0) &if (real <0) printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (rhs.ioctl_flags & ILAST_UNIQUE_NONE) <int newIndex; rhs.ioctl_flags |= ILAST_UNIQUE_NONE; newIndex = rhs.ioctl_flags; <return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary(), newIndex);
if (real) nsCRT::free(real); return new Complex(rhs.getReal(), imaginary); &return new Complex(rhs.getImaginary());
if (real == 0) return null; if (rhs) char *aReal = 0; else &char *aReal = 0; <else <char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if (real && imaginary) <rhs.Real = real + rhs.getReal(); <else <rhs.Real = imaginary + rhs.getImaginary(); <return rhs.Complex();
if (real == null) &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else <rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); return rhs;
if (real == 0) <if ((!real || imaginary)) </* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
if (real == null) rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); else &rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); &return rhs;
if (real == 0) &if ((!real || imaginary)) &/* We have no real object to add to if we have a set of imaginary objects */ if ((real == 0) && (rhs)) /* We have a set of imaginary objects */ if (rhs) /* The actual objects have to be manipulated. */ else /* * A list of integers to add to the result. */ if (rhs) /* * A list of imaginary objects, have the other things to add to the * real objects */ rhs = rhs; return rhs; else /* * We have the actual objects that are retrieved from the inner objects, and we can't get them, so we can't really be there * as well. */ if ((rhs = rhs.getReal()) == 0) rhs =
ret = createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); if (ret &0) <return ret; <if ((real + rhs.getReal()) > 0) &if (real + rhs.getImaginary()) return ret; ret = new Array(rhs.getReal(), rhs.getImaginary()); if (ret 0) return ret; return ret;
if ((real + rhs.getReal()) == 0) if (real &0) &printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((real + rhs.getReal()) == 0) &if (real &0) printf("Complex add: No object to add<n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (real) <int i; int j; char* p; int i; for (i = 0; i rhs.getReal(); i++) &if (!((real == 0) && (i == 0))) return (real == 0)) int err; *i = rhs.getImaginary(); if (((rhs.getNext())!= 0) && ((rhs.getNext())!= 0)) return ((rhs.getNext())!= 0); return (rhs.getNext())); else *i = rhs.getNext(); return (rhs.getNext()); return (rhs.getNext())? rhs.getNext() : rhs.getNext(); return (rhs.getNext());
if (real == 0) return null; if (rhs) <char *aReal = 0; else &char *aReal = 0; else char *aImaginary = 0; return (null == aReal)? aReal : aImaginary;
if ((rhs = null) && (rhs.real == null)) nsAutoString s = rhs.real; if (s) &nsAutoString s; s = rhs.s = s; s = s; if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
if ((real + rhs.getReal()) == 0) &if (real 0) &printf("Complex add: No object to addn"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if (!(real == rhs.getReal()) &&!( imaginary == rhs.getImaginary())) <return newComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if (!IsInComplex()) <return 0; <if (rhs) return rhs.createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
if ((real + rhs.getReal()) == 0) if (real &0) <printf("Complex add: No object to add&n"); return rhs; else if (real > 0) printf("Complex add: %dn", imaginary + rhs.getImaginary()); else printf("Complex add: %dn", imaginary + rhs.getImaginary()); return rhs; return rhs;
if ((rhs = null) && (rhs.real == null)) <nsAutoString s = rhs.real; if (s) <nsAutoString s; s = rhs.s = s; s = s; &if (s == null) &s = s; else rhs.s = s; rhs.s = s; rhs.s = s; if (s == null) rhs.s = s; rhs.s = s; return rhs.s; return rhs.s = rhs.s;
