golden:
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
inference:
NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
return 0;
throw new NoInteractionsWanted(join( "No interactions wanted here:", "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));

throw new NoInteractionsWanted( join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ) );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted( join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl() ) );
throw new NoInteractionsWanted(join( "No interactions wanted here" ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation() ));
break;
throw new NoInteractionsWanted(join( "No interactions wanted here:", location, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
Throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl() );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:", null, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted();
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.mock() + "':", undesired.getLocation(), scenario ));
NointeractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl() ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", __func__, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted(join( "No interactions wanted here", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
static NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join("No interactions wanted here");
return null;
NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario );
throw new NoInteractionsWanted(join( "No interactions wanted here", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return noInteractionsWanted;
throw new NoInteractionsWanted (join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:" ));
return result;
throw new NoInteractionsWanted(join("No interactions wanted here:", "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '%s':", undesired.getMock(), scenario ));
ThrowableNoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", locationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
return NS_OK;
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" ));
NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario );
return new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
return new NoInteractionsWanted(join( "No interactions wanted here", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted( Join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return;
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl());
return NoInteractionsWanted("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
ThrownNoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join ( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation());
throw new NoInteractionsWanted(join( "No interactions wanted here" ) );
noInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoneInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + desired.getMock() + "':", desired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this contact on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted();
throw new NoInteractionsWanted(join( "No interactions wanted here:" ) );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new Location(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join("No interactions wanted here", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + self.getMock() + "':", self.getLocation(), scenario ));
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted( Join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ) );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" );
throw NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here.", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation()));
throw new NoInteractionsWanted("No interactions wanted here");
throw new NoInteractionsWanted(join( "No interactions wanted here:", null, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(join("No interactions wanted here:");
throw new NoInteractionsWanted(join( "No interactions wanted here:", LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", this, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "but found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
Throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", desired.getLocation(), scenario ));
return (0);
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scénario ));
ThrowNoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here", "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ) );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation() + scenario ));
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl());
Throws NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here" ), new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenarios ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", null, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation() ));
ThrowingNoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation() ), scenario );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this object on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return -1;
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock", undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl (), "But found this interaction on mock '" + undesired.getMock (), "':", undesired.getLocation (), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.GetMock() + "':", undesired.getLocation(), scenario ));
return new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + Undef.getMock() + "':", Undef.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl() + "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return NoInteractionsWanted(join( "No interactions wanted here", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted (join( "No interactions wanted here:", new LocationImpl (), "But found this interaction on mock '" + undesired.getMock (), "':", undesired.getLocation (), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here: " "but found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '%s'", undesired.getMock(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock" ));
printf("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
return null;
return true;
throw new NoInteractionsWanted( join( "No interactions wanted here", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ) );
throw new NoInteractionsWanted(join(("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
return rv;
noMoreInteractionsWanted("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:", "but found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join("No interactions wanted here:", location, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", " But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '");
throw new NoInteractionsWanted(Join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
return false;
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock", undesired.getMock(), scenario ));
return new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario );
throw new NoInteractionsWanted(join( "No interactions wanted here:", destination, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return new NoInteractionsWanted( join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock " + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return NoInteractionsWanted( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
NoInteractionsWanted("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scénario ));
NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "but found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noInteractionsWanted("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
raise NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
Throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.GetMock() + "':", undesired.GetLocation(), scenario ));
NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl( ), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation( ), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here");
throw new NoInteractionsWanted("No interactions wanted here:");
return new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted( join( "No interactions wanted here", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); return;
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + getMock() + "':", getLocation(), scenario ));
throw new NoInteractionsWanted(nodeInfo, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
return NoInteractionsWanted( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this connection on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interface on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario );
throw new NoInteractionsWanted(JOIN("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
return noMoreInteractionsWanted;
ThrowNewNoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
Throw new NoInteractionsWanted(join( "No interactions wanted here:", "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock", undesired.getMock() ));
NoInteractionsWanted( join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), " But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(JOIN( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.mock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(join( "No interactions wanted here:", "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario.get() ));
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "but found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl()));
throw new NoInteractionsWanted(join("No interactions wanted here:", "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
NoInteractionsWanted( join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ) );
throw new NoInteractionsWanted(join( "No interactions wanted here", new LocationImpl() ) );
new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return null;
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "'", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
return new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scénario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:");
throw new NoInteractionsWanted( "No interactions wanted here");
throw new NoInteractionsWanted(join( " No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(0);
#endif
Throw new NoInteractionsWanted( join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ) );
Throw new NoInteractionsWanted( join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return noMoreInteractionsWanted( undesired, scenario );
throw new NoInteractionsWanted(join( ("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
return new NoInteractionsWanted( join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ) );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this transaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
fprintf(stderr, "No interactions wanted here:", "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl() ), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario );
throw new NoInteractionsWanted(join( "No interactions wanted here:", "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario );
throw new NoInteractionsWanted( "No interactions wanted here:");
result = NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoMoreInteractionsWanted();
NoMoreInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario );
throw new NoInteractionsWanted(join("No interactions wanted here:", location, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(nodeInfo);
throw new NoInteractionsWanted(noInteractions);
throw new NoInteractionsWanted(rv);
throw new NoInteractionsWanted(os);
return noInteractionsWanted(soCurrentDepth, undesired.getMock() + "':", undesired.getLocation(), scenario);
NoInteractionsWanted();  if (!desired.mock &&!desired.isBuilding())  noInteractionsWanted = true;
NodeFinishList *out; nsresult result; nsIWebProgressListener* info = (NodeFinishListener*) info.nsWebProgressListener; if (NS_FAILED(result) && NS_FAILED(result))  return result;  return result;
if( cnt == 0 )  NoInteractionsWanted( cnt );  else  NoInteractionsWanted( cnt );
p = event.p  event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, eventLocationLocation ));
NodeInfo *info; if (desired.getMock() == 0)  info = 0; info = info.mPos; info = info.mPos; info.mLine = info.mLine; info.mLine++; info.mLine = info.mLine; info.mLine = info.mLine; info.mEnd = info.mEnd; info.mLine++; info.mLine++; info.mLine++; info.mLength = info.mLength; info.mLine++; info.mLength = info.mLine; info.mEnd = info.mLine; info.mLine = info.mLine; info.mLine++; info.mEnd = info.mLine++; info.mLine = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.m
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, ePathConverter.name ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, context ));
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, sTop));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, lb));
ThrownNewNoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, rv ));
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 )  mStackPos = 0;   else  mStackPos = 0;   NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
int ret = 0; while( ret > 0 )  ret = ret; if( ret >= 0 )  ret = ret; ret = ret;  if( ret > 0 )  ret = ret;  if( ret > 0 )  ret = ret;  if( ret  0 )  ret = ret;  else  ret = ret; ret = ret;  return ret;   #endif if( ret == 0 )  ret = ret;  else  ret = ret;    #endif if( ret == 0 )  ret = ret; ret = ret;  if( ret == 0 )
nsresult rv = noInteractionsWanted(unsigned long(desired)); if (NS_FAILED(rv))  return rv;  noInteractionsWanted(rv); return rv;
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, i));
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, null));
if (debug) printf("No interactions wanted here:", debug); else printf("But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return 0;
return noMoreInteractionsWanted( dev.location, scenario, 0 );
NoWait = false; NoMoreEmptyInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); NoWait = true;
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1)  return;  if ( ret == -1)  ret = ret; return;  noError( "No interactions wanted here:", dev );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, mCaseEventType ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, scope ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, &eventState);
if( undesired.getMock()!= null )  NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));  else  NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", ctx.location, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
Throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario.get() ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, prevMode ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, defd.getStartCondition() ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, sizeof(Undesired) ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, &desired.getInvocationType() ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, mLocations ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + unsigned.getMock() + "':", unsigned.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, true, 0 ));
if(!eNotInited) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, new Destructor());
if (cnt == 0)  char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0)  if ((len  0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return;  return -1;   if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (unexpected)  smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario);  else  smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation());  throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario.get() ));
NoMoreInteractionsWanted(sel, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
aResult = null; while (aResult!= 0)  nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom)  return;  return NS_OK;  if (deadIsHidden(aAtom))  if (eadIsHidden(aAtom))  return;   else  aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
static void NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted(); NodeList *nodeList = &nodeList.noEventList; NodeList *nodeList = &nodeList.noEventList; NodeList *nodeList = &nodeList.noEventList; NodeList *nodeList = &nodeList.noEventList; NodeList *nodeList = &nodeList.noEventList; NodeList *nodeList = &nodeList.noEventList; NodeList *nodeList = &nodeList.noEventList; NodeList *nodeList = &nodeList.noEventList; NodeList *nodeList = &nodeList.noEventList; NodeList *nodeList = &nodeList.noEventList; NodeList *nodeList = &nodeList.noEventList; NodeList *
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, null ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", gLocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static void NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); static void NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); static void NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); static void NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock()
noBrowserInteractionsWanted("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
return noMoreInteractionsWanted(noDesired, id);
throw new NoInteractionsWanted(join( "No interactions wanted here:", nsCRT::strdup("No interactions wanted here"), nsCRT::strdup("But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noInteractionsWanted( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, 0 ));
static NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); static NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); static NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); static NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesi
throw new NoInteractionsWanted(join("No interactions wanted here:", __func__, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation)   printf("No interactions wanted here:n"); return;  noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0;  if (unexpectedLocation)  printf("No interactions wanted here:n");
if( mPrinter.print(invocations ) )  mPrinter.print(invocations);  if(!mPrinter.print(invocations ) )  mPrinter.print(invocations );  else  mPrinter.print(invocations );    if(!mPrinter.print(invocations ) )  mPrinter.print(invocations ); return;  if(!mPrinter.print(invocations ) )  mPrinter.print(invocations ); return;   if(!mPrinter.print(invocations ) )  mPrinter.print(invocations ); return;  if(!mPrinter.print(invocations ) )  mPrinter.print(invocations ); return;  if(!mPrinter.print(invocations ) )  m
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0)  noResult = noResult; if (sys == null)  result = 0;  result = sys_stack_get_next(sys);  result = noResult;  result = noResult;  else  result = sys.stack_free(sys);  result = sys.stack_free(sys); if (sys.stack_size  0)  result = sys.stack_size; result = sys.stack_size + sys.stack_size;  result = sys.stack_size; result = sys.stack_size; result = sys.s
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques)  return 0;  /* This could happen on non-interactions */ break; case e_No_Interactions:  if (uniques.location == e_no_interactions)  return 0;  /* XXX */ break; default: return 0;  break;
int noMoreInteractionsWanted; int noMoreInteractionsWanted; NoMoreInteractionsWanted(noMoreInteractionsWanted); noMoreInteractionsWanted = (NoMoreInteractionsWanted*) new LocationImpl(); noMoreInteractionsWanted = (NoMoreInteractionsWanted*) debugLogging;
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ), (void **)0);
noPageDown = true; NoPageClose(noPageDown); NoPageDown = false; NoPageDownStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateStateS
NoWordErrorDialog(); NoWordErrorDialog(); NoInteractionsWanted(join("No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
noMoreInteractionsWanted(unsigned long, undesired.getMock(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, aResult ));
fprintf(stderr, "No interactions wanted here: "); fprintf(stderr, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return fprintf;
noInteractionsWanted(UnknownLocation, scenario);
NodePrinter nodePrinter; nodePrinter.print(nodePrinter); nodePrinter.print(nodePrinter); nodePrinter.print(nodePrinter); NodePrinter nodePrinter; NodePrinter nodePrinter; NodePrinter nodePrinter; NodePrinter nodePrinter = nodePrinter.print(nodePrinter); nodePrinter.print(nodePrinter); NodePrinter nodePrinter = nodePrinter.print(nodePrinter); NodePrinter nodePrinter; nodePrinter.print(nodePrinter); NodePrinter nodePrinter; NodePrinter nodePrinter = nodePrinter.print(nodePrinter); NodePrinter nodePrinter; NodePrinter nodePrinter = nodePrinter.print(nodePrinter); NodePrinter nodePrinter = nodePrinter.print(nodePrinter); NodePrinter nodePrinter = nodePrinter.print(n
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, sc_nop ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ), null);
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, unsigned char ));
src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0;   return src;
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, getter_AddRefs(eventHandler) ));
NodeInfo *info = getInfo("No interfaces wanted here"); if (info!= null)  info = info.newNoInteractionsWanted();
return noInteractionsWanted("No interactions wanted here", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown)  scenario = Unknown: if (unknown)  scenario = Unknown; break;   /* * No more interactions were made here. */ if (unknown)  /* - we got no more interactions in the list. */ if (unknown)  scenario = unknown;  /* - We need to make a little tricky ') return 0;   if (unknown)  scénario = Unknown; return 0;  if (unknown)  scenario = Unknown;  else  scenario = Unknown; scenario = Unknown;   if (unknown)  scenario = Unknown;  if (unknown)  scenario = Unknown;  else  scenario = Unknown;  else  scenario = Unknown;
return noMoreInteractionsWanted(desired);
if( undesired.getLocation() == 0 ) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else  /* No - 0x%x is a little long but */ noInteractionsWanted((noInteractionsWanted).result); noInteractionsWanted((noInteractionsWanted).result);  if (strcmp(unicodeImpl(unicodeImpl, "More interactions on mock '%s'", unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(un
if (debug) printf("No interactions wanted here: ", debug); else printf("But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
throw new NoInteractionsWanted(join( "No interactions wanted here:", v, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deferred)  if (deferred)  NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));  else  NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noErrors++; return 0;
noMoreInteractionsWanted(", &aCmd );
NoRelease(); NoRelease(); NoRelease(); NoRelease(); NoRelease(); NoRelease();
return noInteractionsWanted( undesired.getMock(), scenario );
if(strcmp(desired, "NO_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_OR_INTERNAL_
NoPrinter* noMoreInteractionsWanted(cx, unknown, true,''); if (mNoPrinter) noMoreInteractionsWanted(cx, noMoreInteractionsWanted); else noMoreInteractionsWanted(cx, noMoreInteractionsWanted); return (0);
throw new NoInteractionsWanted(join( "No interactions wanted here:", -1, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoDebugLog(Location("No interactions wanted here"), location); ThrownNoException("No interactions wanted here");
noAwareInvocation = false;   else  noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply)  NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0;  NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) )  if( ntohl((void*)unsignedInstances ).invocationName )  #if defined(XP_MAC) || defined(XP_MACOSX)  #endif  #if defined(XP_MACOSX) )  #endif return ntohl(unsignedInstances); #endif  if( ntohl((void*)unsignedInstances).invocationName )  #endif   #endif  #endif  #endif
snprintf(stderr, "No interactions wanted here:", snprintf(desired.getMock()), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeListNodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if(eP)  if((eP.recorder) == null)  if(eP.recorder)  if(eP.recorder)  if(eP.recorder)  if(eP.recorder)  if(eP.recorder)  if(eP.recorder)   if(eP.recorder)  if(eP.recorder)     else  if(eP.recorder)  if(eP.recorder)  if(eP.recorder)  if(eP.recorder)  if(eP.recorder)  if(eP.recorder)      if(eP.recorder)   if(eP.recorder.id  3)  if(eP.
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, messagePrinter ));
nodeInfo = NodeInfo(); nodeInfo.noDesired = 0; nodeInfo.noLocation = 0; nodeInfo.noEvent = 0; NodeInfo *info = NodeInfo(); NodeInfo *info = NodeInfo(); if (info!= 0) return; NodeInfo info = NodeInfo(); info.noEvent = 0; info.noFrameState = 0; /* * NodeInfo info was returned */ info.noEvent = 0; info.noEvent = 0; info.noLocation = 0; info.noTimer = 0; info.noMore = 0; info.noMore = 0; info.noTimer = 0; info.noLocation = 0; info.noTimer = 0; info.noTimer = 0; info.noLocation = 0; info.noTimer = 0
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, authLevel );
no_interactions_wanted(unknown.getMock() + "':", unknown.getLocation(), scenario);
throw new NoInteractionsWanted(join("No interactions wanted here:", &mStackPtr, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario));
throw new NoInteractionsWanted(join( "No interactions wanted here:", &lhs, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ), message );
throw new NoInteractionsWanted(join( "No interactions wanted here:", psioService, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, name ));
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, deprecated ));
ntobj = i; if( scenario == -1 )  ntobj = 0;  if( ntobj  numQuotes )  *numQuotes = numQuotes; *numQuotes = numQuotes;   else  *numQuotes = numQuotes;  else  *numQuotes = numQuotes;  return -1;    #ifdef DEBUG_BUG if( *numQuotes == 0)  if( *numQuotes == 0 )  return -1;  #endif return -1;
int status; status = snprintf(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen))))))))
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0')  return (0);  else  schedule = '0';  return (0);
mPrinter = aCmdLogStream; NoInteractionsWanted(mPrinter, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx)  slx = "NO_INFO";  else  slx = "No_INFO"; slx = "NO_INFO";  if (slx == ':')  slx = "NO_INFO";    if (slx == ':')  slx = "NO_INFO"; slx = "NO_INFO";  else  slx = "NO_INFO";  if (slx == ':')  slx = "NO_INFO"; slx = "NO_INFO";    if (slx == ':')  slx = "NO_INFO
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, true ));
noMoreInteractionsWanted( aDestroyDescriptor, aLocation, scenario );
NodeManager::NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted)  int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) )  return err;  noInteractionsWanted = null;  if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + unsigned32.getMock() + "':", unsigned32.getLocation(), scenario ));
if (bErrorEval!= EVAL_NOINTERACTIONSWANT)  error("No Interactions wanted here:");  else  init();  return 0;
if (!desired.canConvertRealFunction())  return 0;
if ( undesired.getMock() )  NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));  else  if ( undesired.getMock() == ':' )  NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));  else  NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noMoreInteractionsWanted = getLocation(desired); return noMoreInteractionsWanted;
return NoInteractionsWanted( unsigned );
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario, desired.getParent() ));
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo)  NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null)  NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo)  NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
/* No InteractionsWanted. */ case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case EOF: case
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; <&else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) <if((eP.recorder) == null) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') return (0); else <schedule = '0'; return (0);
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; <noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if(eP) <if((eP.recorder) == null) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; &else <slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; &else &slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList<NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if(eP) <if((eP.recorder) == null) &if(eP.recorder) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') return (0); else schedule = '0'; return (0);
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeListNodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) &#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) <return; <if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') <return (0); <else &schedule = '0'; return (0);
noAwareInvocation = false; <&else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) <result = 0; result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) &return; if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) &#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) <#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) <return; <if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) ret = ret; ret = ret; <if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
aResult = null; while (aResult!= 0) <nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (!!unexpectedLocation) &<printf("No interactions wanted here:<n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (unexpected) &smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); <else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; &<else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeFinishList *out; nsresult result; nsIWebProgressListener* info = (NodeFinishListener*) info.nsWebProgressListener; if (NS_FAILED(result) && NS_FAILED(result)) &return result; &return result;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) &return; <if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
aResult = null; while (aResult!= 0) &nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if(eP) if((eP.recorder) == null) <if(eP.recorder) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
p = event.p &event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.
if(eP) if((eP.recorder) == null) <if(eP.recorder) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (!!unexpectedLocation) <&printf("No interactions wanted here:<n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; <else &slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') <return (0); &else <schedule = '0'; return (0);
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) &#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; <noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (!!unexpectedLocation) &<printf("No interactions wanted here:n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) if((eP.recorder) == null) <if(eP.recorder) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
ntobj = i; if( scenario == -1 ) &ntobj = 0; if( ntobj <numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (unexpected) &smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); &else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') &return (0); <else schedule = '0'; return (0);
ntobj = i; if( scenario == -1 ) ntobj = 0; if( ntobj numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if(eP) <if((eP.recorder) == null) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
ntobj = i; if( scenario == -1 ) &ntobj = 0; <if( ntobj &numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) &result = 0; <result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if( undesired.getMock()!= null ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) <#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; else <slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; <noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
nsresult rv = noInteractionsWanted(unsigned long(desired)); if (NS_FAILED(rv)) <return rv; <noInteractionsWanted(rv); return rv;
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if(eP) <if((eP.recorder) == null) &if(eP.recorder) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deferred) &if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) &#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; &else slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (deferred) if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) &nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock <" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deferred) <if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
ntobj = i; if( scenario == -1 ) &ntobj = 0; if( ntobj &numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; else <slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
ntobj = i; if( scenario == -1 ) ntobj = 0; if( ntobj numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; &&else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) &scenario = Unknown; break; &</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (!!unexpectedLocation) printf("No interactions wanted here:&n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) <#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
ntobj = i; if( scenario == -1 ) &ntobj = 0; if( ntobj <numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) &result = 0; <result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
aResult = null; while (aResult!= 0) &nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; &noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); else &init(); &return 0;
if (deferred) if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
ntobj = i; if( scenario == -1 ) ntobj = 0; <if( ntobj &numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; <&else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) return; if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) <return; if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if (unexpected) <smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); <else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) <scenario = Unknown; break; /* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
ntobj = i; if( scenario == -1 ) <ntobj = 0; if( ntobj <numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (!!unexpectedLocation) &&printf("No interactions wanted here:<n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if( undesired.getLocation() == 0 ) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else /* No - 0x%x is a little long but */ noInteractionsWanted((noInteractionsWanted).result); noInteractionsWanted((noInteractionsWanted).result); &if (strcmp(unicodeImpl(unicodeImpl, "More interactions on mock '%s'", unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(un
if(eP) <if((eP.recorder) == null) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; <if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (unexpected) smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; <if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
aResult = null; while (aResult!= 0) nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') return (0); &else schedule = '0'; return (0);
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) <NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if (unexpected) <smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
aResult = null; while (aResult!= 0) nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
ntobj = i; if( scenario == -1 ) ntobj = 0; <if( ntobj &numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); &else init(); &return 0;
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') return (0); &else <schedule = '0'; return (0);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) &result = 0; <result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); else init(); &return 0;
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; &else &slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (unexpected) <smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) <return; if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; &return src;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); <else &init(); <return 0;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList&NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (unexpected) <smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
noAwareInvocation = false; &&else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (deferred) if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) &#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; <noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList<NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
NodeInfo *info = getInfo("No interfaces wanted here"); if (info!= null) &info = info.newNoInteractionsWanted();
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; <noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) <result = 0; result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) <return; <if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if (unexpected) &smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
ntobj = i; if( scenario == -1 ) &ntobj = 0; &if( ntobj numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if(eP) &if((eP.recorder) == null) if(eP.recorder) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) &NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) <NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if(eP) &if((eP.recorder) == null) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) result = 0; result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if(eP) <if((eP.recorder) == null) <if(eP.recorder) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; <else &slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
aResult = null; while (aResult!= 0) nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (deferred) &if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( cnt == 0 ) NoInteractionsWanted( cnt ); else <NoInteractionsWanted( cnt );
if (!!unexpectedLocation) &<printf("No interactions wanted here:<n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
noAwareInvocation = false; <else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); &else <init(); return 0;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList&NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
ntobj = i; if( scenario == -1 ) ntobj = 0; if( ntobj <numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
ntobj = i; if( scenario == -1 ) <ntobj = 0; &if( ntobj &numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
aResult = null; while (aResult!= 0) nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if( undesired.getMock()!= null ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( cnt == 0 ) NoInteractionsWanted( cnt ); <else NoInteractionsWanted( cnt );
if(eP) &if((eP.recorder) == null) &if(eP.recorder) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; <noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); <else &init(); <return 0;
if(eP) &if((eP.recorder) == null) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (unexpected) &smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (unexpected) &smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; else <slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (deferred) if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) <NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) &NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) &NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
nsresult rv = noInteractionsWanted(unsigned long(desired)); if (NS_FAILED(rv)) <return rv; &noInteractionsWanted(rv); return rv;
if( undesired.getMock()!= null ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (deferred) &if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; <&else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') &return (0); else schedule = '0'; return (0);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; &&else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) &return; if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
aResult = null; while (aResult!= 0) <nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; &<return src;
if (!!unexpectedLocation) <&printf("No interactions wanted here:n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; <if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) &#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; &noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) <scenario = Unknown; break; <&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (unexpected) <smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); <else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; else &slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; &if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) return; if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( undesired.getMock()!= null ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); <else init(); <return 0;
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; &else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) ret = ret; ret = ret; if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; &else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) <nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; &else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; else slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
ntobj = i; if( scenario == -1 ) &ntobj = 0; if( ntobj numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); &else <init(); &return 0;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); else <init(); &return 0;
if(eP) <if((eP.recorder) == null) if(eP.recorder) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') &return (0); &else &schedule = '0'; return (0);
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) return; if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
ntobj = i; if( scenario == -1 ) ntobj = 0; &if( ntobj &numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
fprintf(stderr, "No interactions wanted here: "); fprintf(stderr, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return fprintf;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeListNodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; &else <slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); &else init(); return 0;
ntobj = i; if( scenario == -1 ) ntobj = 0; <if( ntobj numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') <return (0); &else &schedule = '0'; return (0);
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (unexpected) <smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; <else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) &&printf("No interactions wanted here:<n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (!!unexpectedLocation) <&printf("No interactions wanted here:n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) <result = 0; result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (unexpected) &smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') <return (0); &else <schedule = '0'; return (0);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) &result = 0; result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) &result = 0; <result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
<src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; <<return src;
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( cnt == 0 ) NoInteractionsWanted( cnt ); <else &NoInteractionsWanted( cnt );
if (unexpected) &smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if( undesired.getLocation() == 0 ) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &/* No - 0x%x is a little long but */ noInteractionsWanted((noInteractionsWanted).result); noInteractionsWanted((noInteractionsWanted).result); if (strcmp(unicodeImpl(unicodeImpl, "More interactions on mock '%s'", unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(un
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
&fprintf(stderr, "No interactions wanted here: "); fprintf(stderr, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return fprintf;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList<NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList&NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; <noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) <NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) <NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) &NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) return; if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) &#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) &result = 0; <result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) return; &if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
noAwareInvocation = false; &<else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; &noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) &return; <if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
<src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; <&return src;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') return (0); &else schedule = '0'; return (0);
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); <else &init(); return 0;
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock &" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) &if((eP.recorder) == null) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (unexpected) smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; <else <slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; &else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeListNodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if( undesired.getMock()!= null ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) &#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; <else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deferred) if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeListNodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) &#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; <else slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) return; &if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) ret = ret; ret = ret; <if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (deferred) if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) &scenario = Unknown; break; &/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList<NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) scenario = Unknown; break; &/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
noAwareInvocation = false; &<else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
aResult = null; while (aResult!= 0) nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; <else &slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList&NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) ret = ret; ret = ret; if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) ret = ret; ret = ret; if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (unexpected) &smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
aResult = null; while (aResult!= 0) &nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) <return; <if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
ntobj = i; if( scenario == -1 ) ntobj = 0; &if( ntobj numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (unexpected) smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; <else <slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
ntobj = i; if( scenario == -1 ) ntobj = 0; &if( ntobj <numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; &else &slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
int status; status = snprintf(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen))))))))
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; else <slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if( cnt == 0 ) NoInteractionsWanted( cnt ); &else <NoInteractionsWanted( cnt );
aResult = null; while (aResult!= 0) nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
noAwareInvocation = false; &<else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; else &slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') <return (0); else schedule = '0'; return (0);
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) <NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) &NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); &else <init(); <return 0;
if(eP) &if((eP.recorder) == null) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); else &init(); <return 0;
aResult = null; while (aResult!= 0) <nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); <else <init(); return 0;
aResult = null; while (aResult!= 0) nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') return (0); else &schedule = '0'; return (0);
ntobj = i; if( scenario == -1 ) <ntobj = 0; <if( ntobj numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) <#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList<NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
noAwareInvocation = false; <else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) if((eP.recorder) == null) if(eP.recorder) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; &if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) &return; if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
aResult = null; while (aResult!= 0) <nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList<NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; <if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (!!unexpectedLocation) &&printf("No interactions wanted here:n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (!!unexpectedLocation) <printf("No interactions wanted here:n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
ntobj = i; if( scenario == -1 ) <ntobj = 0; if( ntobj <numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; &else &slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList&NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; &if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
<NoMoreInteractionsWanted(sel, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
nsresult rv = noInteractionsWanted(unsigned long(desired)); if (NS_FAILED(rv)) &return rv; &noInteractionsWanted(rv); return rv;
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if (!!unexpectedLocation) <<printf("No interactions wanted here:<n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) &#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeListNodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (deferred) if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; &if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (!!unexpectedLocation) &printf("No interactions wanted here:<n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; <&else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeListNodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) &result = 0; result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) &return; &if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) ret = ret; ret = ret; &if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
noAwareInvocation = false; <&else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (unexpected) smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
aResult = null; while (aResult!= 0) &nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
aResult = null; while (aResult!= 0) <nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) <return; if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if (deferred) &if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) &return; if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) &#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
ntobj = i; if( scenario == -1 ) <ntobj = 0; &if( ntobj numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); <else &init(); &return 0;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') return (0); &else <schedule = '0'; return (0);
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
&src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; &return src;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) <#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); <else init(); return 0;
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) if((eP.recorder) == null) if(eP.recorder) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) <scenario = Unknown; break; &&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) <result = 0; &result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (deferred) if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
ntobj = i; if( scenario == -1 ) ntobj = 0; if( ntobj &numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
NodeInfo *info = getInfo("No interfaces wanted here"); if (info!= null) info = info.newNoInteractionsWanted();
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) &return; <if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
if (unexpected) <smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); &else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) scenario = Unknown; break; &&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
aResult = null; while (aResult!= 0) &nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) &return; &if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList&NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if(eP) <if((eP.recorder) == null) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deferred) if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); <else init(); <return 0;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList<NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
noAwareInvocation = false; <else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
noAwareInvocation = false; &<else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if(eP) &if((eP.recorder) == null) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deferred) &if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); <else <init(); <return 0;
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) <return; if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; &else slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); &else <init(); return 0;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) <#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
throw new NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock " + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if( undesired.getMock()!= null ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) <printf("No interactions wanted here:<n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
noAwareInvocation = false; <else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) &return; <if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; else slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
ntobj = i; if( scenario == -1 ) ntobj = 0; if( ntobj &numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) <#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) &return; &if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; <&else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) &return; <if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; <<else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) result = 0; &result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
ntobj = i; if( scenario == -1 ) &ntobj = 0; if( ntobj numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) ret = ret; ret = ret; &if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') &return (0); else schedule = '0'; return (0);
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; <if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) &result = 0; &result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (unexpected) &smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if( undesired.getMock()!= null ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) <result = 0; <result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
NoInteractionsWanted(); if (!desired.mock &&!desired.isBuilding()) noInteractionsWanted = true;
noAwareInvocation = false; else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList<NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if( cnt == 0 ) &NoInteractionsWanted( cnt ); <else &NoInteractionsWanted( cnt );
if( undesired.getMock()!= null ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
aResult = null; while (aResult!= 0) nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (deferred) &if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
ntobj = i; if( scenario == -1 ) <ntobj = 0; if( ntobj &numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; &noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') &return (0); else &schedule = '0'; return (0);
if (!!unexpectedLocation) <printf("No interactions wanted here:<n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (!!unexpectedLocation) &printf("No interactions wanted here:<n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) return; &if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); &else &init(); <return 0;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); &else <init(); &return 0;
if (!!unexpectedLocation) <&printf("No interactions wanted here:&n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
NoInteractionsWanted(); if (!desired.mock &&!desired.isBuilding()) &noInteractionsWanted = true;
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) scenario = Unknown; break; <&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; <else slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; <else slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) &#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList<NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; else slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList&NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); else <init(); return 0;
if (unexpected) &smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) <return; <if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (deferred) if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') &return (0); &else <schedule = '0'; return (0);
aResult = null; while (aResult!= 0) nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) <scenario = Unknown; break; &&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') <return (0); else <schedule = '0'; return (0);
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) ret = ret; ret = ret; if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; &&else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (unexpected) smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); <else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
NodeFinishList *out; nsresult result; nsIWebProgressListener* info = (NodeFinishListener*) info.nsWebProgressListener; if (NS_FAILED(result) && NS_FAILED(result)) <return result; return result;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) result = 0; <result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) &NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) <NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) &&printf("No interactions wanted here:&n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList<NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if( undesired.getMock()!= null ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeInfo *info = getInfo("No interfaces wanted here"); if (info!= null) <info = info.newNoInteractionsWanted();
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) #endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) <#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; else slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
NoInteractionsWanted(); if (!desired.mock &&!desired.isBuilding()) <noInteractionsWanted = true;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') &return (0); else &schedule = '0'; return (0);
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; <if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if( undesired.getMock()!= null ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) <return; <if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
NoInteractionsWanted(); <if (!desired.mock &&!desired.isBuilding()) &noInteractionsWanted = true;
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (unexpected) &smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) <#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deferred) if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted(); <if (!desired.mock &&!desired.isBuilding()) noInteractionsWanted = true;
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) <return; if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
NoMoreInteractionsWanted(sel, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) #endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) <result = 0; result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (deferred) &if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeListNodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if( undesired.getLocation() == 0 ) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else </* No - 0x%x is a little long but */ noInteractionsWanted((noInteractionsWanted).result); noInteractionsWanted((noInteractionsWanted).result); &if (strcmp(unicodeImpl(unicodeImpl, "More interactions on mock '%s'", unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(un
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; return src;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeListNodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (unexpected) smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) <return; &if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
aResult = null; while (aResult!= 0) &nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); else &init(); return 0;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) &result = 0; <result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; else &slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); <else init(); &return 0;
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; &if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; &<else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) #endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if(eP) &if((eP.recorder) == null) <if(eP.recorder) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); &else &init(); &return 0;
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; else <slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; &else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; <<else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deferred) if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) &NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) <NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) &NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) scenario = Unknown; break; </* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; <noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
<src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; &<return src;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; <else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) scenario = Unknown; break; &/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); &else init(); &return 0;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if (deferred) &if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList&NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) result = 0; &result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
aResult = null; while (aResult!= 0) &nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; <noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeListNodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if(eP) if((eP.recorder) == null) <if(eP.recorder) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deferred) <if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) <nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if(eP) <if((eP.recorder) == null) if(eP.recorder) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) <#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList&NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); else init(); &return 0;
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; &if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) &result = 0; <result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) return; &if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
ntobj = i; if( scenario == -1 ) ntobj = 0; &if( ntobj numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeListNodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) ret = ret; ret = ret; <if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) <scenario = Unknown; break; </* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) <result = 0; <result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (!!unexpectedLocation) &<printf("No interactions wanted here:n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (unexpected) &smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') return (0); <else <schedule = '0'; return (0);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
ntobj = i; if( scenario == -1 ) &ntobj = 0; &if( ntobj &numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
NodeFinishList *out; nsresult result; nsIWebProgressListener* info = (NodeFinishListener*) info.nsWebProgressListener; if (NS_FAILED(result) && NS_FAILED(result)) return result; &return result;
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) ret = ret; ret = ret; &if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) <scenario = Unknown; break; <</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) &return; &if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) &scenario = Unknown; break; /* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) <#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
aResult = null; while (aResult!= 0) nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) &result = 0; &result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
noAwareInvocation = false; &else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; &else <slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') &return (0); <else schedule = '0'; return (0);
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
p = event.p event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.
NodeInfo *info; if (desired.getMock() == 0) <info = 0; info = info.mPos; info = info.mPos; info.mLine = info.mLine; info.mLine++; info.mLine = info.mLine; info.mLine = info.mLine; info.mEnd = info.mEnd; info.mLine++; info.mLine++; info.mLine++; info.mLength = info.mLength; info.mLine++; info.mLength = info.mLine; info.mEnd = info.mLine; info.mLine = info.mLine; info.mLine++; info.mEnd = info.mLine++; info.mLine = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.m
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) &result = 0; <result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) &scenario = Unknown; break; </* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) #endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (deferred) &if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') <return (0); &else <schedule = '0'; return (0);
noAwareInvocation = false; <&else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) &#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; &noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) <scenario = Unknown; break; &/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; &else <slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; <else slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
NodeFinishList *out; nsresult result; nsIWebProgressListener* info = (NodeFinishListener*) info.nsWebProgressListener; if (NS_FAILED(result) && NS_FAILED(result)) <return result; <return result;
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; &if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (unexpected) smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; <if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
aResult = null; while (aResult!= 0) <nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; <else &slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
aResult = null; while (aResult!= 0) &nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList&NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (deferred) if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; &if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
NoInteractionsWanted(); &if (!desired.mock &&!desired.isBuilding()) &noInteractionsWanted = true;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') return (0); else schedule = '0'; return (0);
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); else &init(); <return 0;
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; &noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) <scenario = Unknown; break; <</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') return (0); &else &schedule = '0'; return (0);
noAwareInvocation = false; <<else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') &return (0); <else &schedule = '0'; return (0);
src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; &&return src;
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; &<else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
noAwareInvocation = false; <<else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) <scenario = Unknown; break; /* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
ntobj = i; if( scenario == -1 ) &ntobj = 0; <if( ntobj <numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) ret = ret; ret = ret; <if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; <else &slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
ntobj = i; if( scenario == -1 ) <ntobj = 0; <if( ntobj &numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) <return; &if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if (unexpected) <smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (!!unexpectedLocation) &&printf("No interactions wanted here:&n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') <return (0); <else schedule = '0'; return (0);
if (deferred) <if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') return (0); &else schedule = '0'; return (0);
ntobj = i; if( scenario == -1 ) &ntobj = 0; &if( ntobj numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; &else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) <return; &if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList&NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) &result = 0; result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (deferred) <if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (unexpected) <smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; &else &slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) <result = 0; result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (deferred) <if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) <&printf("No interactions wanted here:&n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; <<return src;
if(eP) if((eP.recorder) == null) &if(eP.recorder) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) &return; &if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
noAwareInvocation = false; else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) <return; &if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
&src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; &&return src;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) return; <if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if (deferred) &if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
ntobj = i; if( scenario == -1 ) <ntobj = 0; if( ntobj numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (deferred) if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; &else &slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) &printf("No interactions wanted here:n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
nsresult rv = noInteractionsWanted(unsigned long(desired)); if (NS_FAILED(rv)) <return rv; noInteractionsWanted(rv); return rv;
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) <result = 0; &result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) ret = ret; ret = ret; if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) <NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) &NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; <else <slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; <noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; <noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) &NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) &NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) return; if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if( cnt == 0 ) NoInteractionsWanted( cnt ); <else <NoInteractionsWanted( cnt );
if (deferred) <if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList<NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
NodeFinishList *out; nsresult result; nsIWebProgressListener* info = (NodeFinishListener*) info.nsWebProgressListener; if (NS_FAILED(result) && NS_FAILED(result)) return result; return result;
<if (debug) printf("No interactions wanted here: ", debug); else printf("But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if( undesired.getMock()!= null ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) <result = 0; &result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') &return (0); <else &schedule = '0'; return (0);
if(eP) <if((eP.recorder) == null) if(eP.recorder) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deferred) <if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); &else init(); <return 0;
if(eP) &if((eP.recorder) == null) &if(eP.recorder) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
NodeFinishList *out; nsresult result; nsIWebProgressListener* info = (NodeFinishListener*) info.nsWebProgressListener; if (NS_FAILED(result) && NS_FAILED(result)) &return result; return result;
aResult = null; while (aResult!= 0) &nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if(eP) if((eP.recorder) == null) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
aResult = null; while (aResult!= 0) &nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if( cnt == 0 ) <NoInteractionsWanted( cnt ); &else <NoInteractionsWanted( cnt );
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (unexpected) smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
aResult = null; while (aResult!= 0) nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); else &init(); return 0;
if (!!unexpectedLocation) <&printf("No interactions wanted here:n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
noAwareInvocation = false; &else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
ntobj = i; if( scenario == -1 ) &ntobj = 0; <if( ntobj numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; <&else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; else slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; &noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); else init(); <return 0;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) &scenario = Unknown; break; </* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; <else &slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (unexpected) smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; &if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) <return; &if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList<NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if( cnt == 0 ) &NoInteractionsWanted( cnt ); else <NoInteractionsWanted( cnt );
if (unexpected) <smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) return; <if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
ntobj = i; if( scenario == -1 ) &ntobj = 0; &if( ntobj &numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList&NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) <scenario = Unknown; break; <&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) <#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); else init(); return 0;
if (deferred) if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) &#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
noAwareInvocation = false; <<else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) #endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) &scenario = Unknown; break; /* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (unexpected) &smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) ret = ret; ret = ret; <if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) &scenario = Unknown; break; &</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) ret = ret; ret = ret; if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if(eP) if((eP.recorder) == null) &if(eP.recorder) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
noAwareInvocation = false; <&else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; &else <slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if(eP) <if((eP.recorder) == null) <if(eP.recorder) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
ntobj = i; if( scenario == -1 ) &ntobj = 0; <if( ntobj &numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noAwareInvocation = false; else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
&src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; &<return src;
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) <return; if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeListNodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
&NodeInfo *info; if (desired.getMock() == 0) &info = 0; info = info.mPos; info = info.mPos; info.mLine = info.mLine; info.mLine++; info.mLine = info.mLine; info.mLine = info.mLine; info.mEnd = info.mEnd; info.mLine++; info.mLine++; info.mLine++; info.mLength = info.mLength; info.mLine++; info.mLength = info.mLine; info.mEnd = info.mLine; info.mLine = info.mLine; info.mLine++; info.mEnd = info.mLine++; info.mLine = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.m
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) <#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if(eP) &if((eP.recorder) == null) if(eP.recorder) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) return; <if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if( cnt == 0 ) <NoInteractionsWanted( cnt ); &else &NoInteractionsWanted( cnt );
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) <return; &if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
aResult = null; while (aResult!= 0) &nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
noAwareInvocation = false; <<else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeListNodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (!desired.canConvertRealFunction()) return 0;
if( cnt == 0 ) <NoInteractionsWanted( cnt ); else &NoInteractionsWanted( cnt );
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) <scenario = Unknown; break; &</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
noAwareInvocation = false; &<else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; <noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) &#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
nsresult rv = noInteractionsWanted(unsigned long(desired)); if (NS_FAILED(rv)) return rv; noInteractionsWanted(rv); return rv;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') &return (0); <else <schedule = '0'; return (0);
noAwareInvocation = false; else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if( undesired.getMock()!= null ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deferred) if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
noAwareInvocation = false; <else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; <else slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if(eP) <if((eP.recorder) == null) <if(eP.recorder) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) scenario = Unknown; break; &&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); &else <init(); return 0;
if(eP) &if((eP.recorder) == null) if(eP.recorder) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') return (0); <else &schedule = '0'; return (0);
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) &result = 0; result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (deferred) <if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) if((eP.recorder) == null) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); &else &init(); <return 0;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) scenario = Unknown; break; </* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; &noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (!!unexpectedLocation) &<printf("No interactions wanted here:&n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (deferred) &if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; &else <slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') <return (0); else <schedule = '0'; return (0);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; <else <slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); <else <init(); <return 0;
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; &else slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
NodeInfo *info; if (desired.getMock() == 0) &info = 0; info = info.mPos; info = info.mPos; info.mLine = info.mLine; info.mLine++; info.mLine = info.mLine; info.mLine = info.mLine; info.mEnd = info.mEnd; info.mLine++; info.mLine++; info.mLine++; info.mLength = info.mLength; info.mLine++; info.mLength = info.mLine; info.mEnd = info.mLine; info.mLine = info.mLine; info.mLine++; info.mEnd = info.mLine++; info.mLine = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.m
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; &else slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
NodeFinishList *out; nsresult result; nsIWebProgressListener* info = (NodeFinishListener*) info.nsWebProgressListener; if (NS_FAILED(result) && NS_FAILED(result)) return result; <return result;
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeListNodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) #endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) scenario = Unknown; break; <</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; &noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; &else slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noAwareInvocation = false; <else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (!!unexpectedLocation) &<printf("No interactions wanted here:n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
aResult = null; while (aResult!= 0) <nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (!!unexpectedLocation) <printf("No interactions wanted here:&n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (deferred) <if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deferred) <if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; &noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if( cnt == 0 ) &NoInteractionsWanted( cnt ); else &NoInteractionsWanted( cnt );
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); else init(); return 0;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) scenario = Unknown; break; <</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) &result = 0; result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; &else slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (!desired.canConvertRealFunction()) &return 0;
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; &noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (!!unexpectedLocation) &&printf("No interactions wanted here:<n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noAwareInvocation = false; <&else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) <return; &if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
if (deferred) <if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) &printf("No interactions wanted here:n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList<NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if(eP) <if((eP.recorder) == null) if(eP.recorder) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; <if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); <else <init(); <return 0;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); else <init(); return 0;
ntobj = i; if( scenario == -1 ) &ntobj = 0; &if( ntobj numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; &if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') &return (0); &else <schedule = '0'; return (0);
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) return; <if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) <#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) &NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) &NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) <scenario = Unknown; break; &/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
NodeInfo *info; if (desired.getMock() == 0) info = 0; info = info.mPos; info = info.mPos; info.mLine = info.mLine; info.mLine++; info.mLine = info.mLine; info.mLine = info.mLine; info.mEnd = info.mEnd; info.mLine++; info.mLine++; info.mLine++; info.mLength = info.mLength; info.mLine++; info.mLength = info.mLine; info.mEnd = info.mLine; info.mLine = info.mLine; info.mLine++; info.mEnd = info.mLine++; info.mLine = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.m
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) return; &if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; &else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if(eP) &if((eP.recorder) == null) if(eP.recorder) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
<src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; &&return src;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) <scenario = Unknown; break; </* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (unexpected) &smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') &return (0); else <schedule = '0'; return (0);
if( cnt == 0 ) <NoInteractionsWanted( cnt ); else <NoInteractionsWanted( cnt );
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) #endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (unexpected) smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); <else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if(eP) <if((eP.recorder) == null) &if(eP.recorder) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (!!unexpectedLocation) &&printf("No interactions wanted here:n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (!!unexpectedLocation) printf("No interactions wanted here:<n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (!!unexpectedLocation) <&printf("No interactions wanted here:<n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') <return (0); &else schedule = '0'; return (0);
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') &return (0); else <schedule = '0'; return (0);
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if(eP) if((eP.recorder) == null) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (unexpected) <smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); &else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (deferred) &if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) &if((eP.recorder) == null) <if(eP.recorder) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) &#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deferred) <if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
ntobj = i; if( scenario == -1 ) &ntobj = 0; if( ntobj <numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; <if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
ntobj = i; if( scenario == -1 ) &ntobj = 0; <if( ntobj &numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) ret = ret; ret = ret; &if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; &if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (!!unexpectedLocation) <<printf("No interactions wanted here:n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) #endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
noAwareInvocation = false; else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') <return (0); else &schedule = '0'; return (0);
if (deferred) &if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (unexpected) <smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; <else &slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (unexpected) <smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) &result = 0; result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
<int status; status = snprintf(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen))))))))
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) <nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; &noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (!!unexpectedLocation) &&printf("No interactions wanted here:n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (unexpected) <smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (unexpected) <smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) <#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
<fprintf(stderr, "No interactions wanted here: "); fprintf(stderr, "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return fprintf;
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; <noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) &return; <if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (debug) printf("No interactions wanted here: ", debug); else printf("But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) result = 0; result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') return (0); else schedule = '0'; return (0);
if(eP) <if((eP.recorder) == null) <if(eP.recorder) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deferred) <if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deferred) &if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) result = 0; &result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (deferred) <if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( undesired.getMock()!= null ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) &#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; &noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
<NodeInfo *info; if (desired.getMock() == 0) <info = 0; info = info.mPos; info = info.mPos; info.mLine = info.mLine; info.mLine++; info.mLine = info.mLine; info.mLine = info.mLine; info.mEnd = info.mEnd; info.mLine++; info.mLine++; info.mLine++; info.mLength = info.mLength; info.mLine++; info.mLength = info.mLine; info.mEnd = info.mLine; info.mLine = info.mLine; info.mLine++; info.mEnd = info.mLine++; info.mLine = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.m
if(eP) if((eP.recorder) == null) if(eP.recorder) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) <#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( cnt == 0 ) <NoInteractionsWanted( cnt ); <else NoInteractionsWanted( cnt );
noAwareInvocation = false; &&else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) &scenario = Unknown; break; &</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
noAwareInvocation = false; <else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; <else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList<NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
ntobj = i; if( scenario == -1 ) &ntobj = 0; &if( ntobj &numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) <result = 0; <result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList&NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; <noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) &#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) &return; &if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; else slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) result = 0; &result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) <result = 0; &result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
ntobj = i; if( scenario == -1 ) <ntobj = 0; <if( ntobj <numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; <<else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) &if((eP.recorder) == null) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) #endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; &noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (deferred) <if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
ntobj = i; if( scenario == -1 ) <ntobj = 0; &if( ntobj numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
noAwareInvocation = false; &else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; <noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; &&else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) &nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
aResult = null; while (aResult!= 0) <nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if (unexpected) &smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (deferred) &if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) <<printf("No interactions wanted here:n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) <scenario = Unknown; break; &&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') <return (0); <else schedule = '0'; return (0);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; &<else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
&src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; <&return src;
if (deferred) &if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
int noMoreInteractionsWanted; int noMoreInteractionsWanted; NoMoreInteractionsWanted(noMoreInteractionsWanted); noMoreInteractionsWanted = (NoMoreInteractionsWanted*) new LocationImpl(); noMoreInteractionsWanted = (NoMoreInteractionsWanted*) debugLogging;
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NoInteractionsWanted(); &if (!desired.mock &&!desired.isBuilding()) <noInteractionsWanted = true;
if (unexpected) smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; &noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; <else &slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) <return; if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
aResult = null; while (aResult!= 0) &nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; &noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; <<else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; <noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) #endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) ret = ret; ret = ret; <if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList&NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
&NodeInfo *info; if (desired.getMock() == 0) <info = 0; info = info.mPos; info = info.mPos; info.mLine = info.mLine; info.mLine++; info.mLine = info.mLine; info.mLine = info.mLine; info.mEnd = info.mEnd; info.mLine++; info.mLine++; info.mLine++; info.mLength = info.mLength; info.mLine++; info.mLength = info.mLine; info.mEnd = info.mLine; info.mLine = info.mLine; info.mLine++; info.mEnd = info.mLine++; info.mLine = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.m
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) return; <if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if( cnt == 0 ) <NoInteractionsWanted( cnt ); else NoInteractionsWanted( cnt );
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; <else <slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; <noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); <else <init(); return 0;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) ret = ret; ret = ret; &if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) scenario = Unknown; break; &&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); <else &init(); return 0;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList<NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) <result = 0; &result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
ntobj = i; if( scenario == -1 ) <ntobj = 0; &if( ntobj &numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) &return; if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) ret = ret; ret = ret; &if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); &else init(); return 0;
noAwareInvocation = false; &else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) return; <if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
if (!!unexpectedLocation) &<printf("No interactions wanted here:&n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
aResult = null; while (aResult!= 0) &nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if( cnt == 0 ) &NoInteractionsWanted( cnt ); <else <NoInteractionsWanted( cnt );
if (unexpected) <smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) result = 0; result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (deferred) <if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; &<else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (unexpected) &smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (unexpected) &smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); &else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (unexpected) <smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); <else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; else &slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) &scenario = Unknown; break; <&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; else &slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList&NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) <result = 0; result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (deferred) if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noAwareInvocation = false; &<else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; &noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if (deferred) &if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (unexpected) &smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); <else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
noAwareInvocation = false; &<else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (deferred) &if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
ntobj = i; if( scenario == -1 ) ntobj = 0; <if( ntobj <numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (!!unexpectedLocation) <printf("No interactions wanted here:n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
noAwareInvocation = false; <&else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if( undesired.getLocation() == 0 ) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &/* No - 0x%x is a little long but */ noInteractionsWanted((noInteractionsWanted).result); noInteractionsWanted((noInteractionsWanted).result); &if (strcmp(unicodeImpl(unicodeImpl, "More interactions on mock '%s'", unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(un
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; else &slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
NodeFinishList *out; nsresult result; nsIWebProgressListener* info = (NodeFinishListener*) info.nsWebProgressListener; if (NS_FAILED(result) && NS_FAILED(result)) <return result; &return result;
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) <return; &if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if(eP) <if((eP.recorder) == null) &if(eP.recorder) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) &scenario = Unknown; break; &/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
ntobj = i; if( scenario == -1 ) <ntobj = 0; <if( ntobj &numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if( undesired.getLocation() == 0 ) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else /* No - 0x%x is a little long but */ noInteractionsWanted((noInteractionsWanted).result); noInteractionsWanted((noInteractionsWanted).result); if (strcmp(unicodeImpl(unicodeImpl, "More interactions on mock '%s'", unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(un
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) scenario = Unknown; break; <</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) <NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) <NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) &nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
ntobj = i; if( scenario == -1 ) ntobj = 0; if( ntobj &numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeListNodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (unexpected) smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') return (0); <else <schedule = '0'; return (0);
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeListNodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (unexpected) <smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) <scenario = Unknown; break; &/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; <else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) #endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (!!unexpectedLocation) <&printf("No interactions wanted here:&n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; &else slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (unexpected) &smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (deferred) &if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deferred) if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; &noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeListNodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) <return; <if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); <else init(); &return 0;
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) <result = 0; <result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if(eP) &if((eP.recorder) == null) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; <noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
nsresult rv = noInteractionsWanted(unsigned long(desired)); if (NS_FAILED(rv)) return rv; <noInteractionsWanted(rv); return rv;
ntobj = i; if( scenario == -1 ) <ntobj = 0; &if( ntobj <numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) return; &if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
aResult = null; while (aResult!= 0) nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) #endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) return; <if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) #endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
aResult = null; while (aResult!= 0) <nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) <scenario = Unknown; break; /* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; <if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeListNodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if(eP) <if((eP.recorder) == null) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if(eP) <if((eP.recorder) == null) <if(eP.recorder) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (unexpected) <smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList<NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if(eP) if((eP.recorder) == null) &if(eP.recorder) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (unexpected) smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) &scenario = Unknown; break; <&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if(eP) if((eP.recorder) == null) <if(eP.recorder) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) &NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) <NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
&src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; <return src;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); &else <init(); &return 0;
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
ntobj = i; if( scenario == -1 ) <ntobj = 0; &if( ntobj numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (unexpected) <smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; <return src;
p = event.p <event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.p = p; event.
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; else &slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) &#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') <return (0); else schedule = '0'; return (0);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; else slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) &return; if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') return (0); else &schedule = '0'; return (0);
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') &return (0); <else schedule = '0'; return (0);
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeListNodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) &scenario = Unknown; break; &&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) result = 0; result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) <result = 0; &result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList<NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if(eP) &if((eP.recorder) == null) <if(eP.recorder) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (!!unexpectedLocation) &printf("No interactions wanted here:<n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if( undesired.getMock()!= null ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') &return (0); &else schedule = '0'; return (0);
aResult = null; while (aResult!= 0) nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeListNodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); &else init(); &return 0;
ntobj = i; if( scenario == -1 ) <ntobj = 0; if( ntobj numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (unexpected) smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
noAwareInvocation = false; &&else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if( cnt == 0 ) &NoInteractionsWanted( cnt ); &else <NoInteractionsWanted( cnt );
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList<NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
ntobj = i; if( scenario == -1 ) <ntobj = 0; <if( ntobj numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
ntobj = i; if( scenario == -1 ) ntobj = 0; &if( ntobj &numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) &NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) &NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) &NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) result = 0; <result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (unexpected) smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); <else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; <&else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (!!unexpectedLocation) &printf("No interactions wanted here:n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') &return (0); &else schedule = '0'; return (0);
aResult = null; while (aResult!= 0) &nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if( cnt == 0 ) <NoInteractionsWanted( cnt ); &else NoInteractionsWanted( cnt );
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
noAwareInvocation = false; <&else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') <return (0); &else schedule = '0'; return (0);
if (deferred) if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) <scenario = Unknown; break; <</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if(eP) if((eP.recorder) == null) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) <result = 0; &result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; else &slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (!!unexpectedLocation) &<printf("No interactions wanted here:<n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) result = 0; &result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if(eP) if((eP.recorder) == null) &if(eP.recorder) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
<src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; <return src;
ntobj = i; if( scenario == -1 ) <ntobj = 0; <if( ntobj &numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
noAwareInvocation = false; else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) result = 0; <result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; &else <slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); &else &init(); <return 0;
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) #endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (unexpected) &smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if(eP) &if((eP.recorder) == null) <if(eP.recorder) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( undesired.getMock()!= null ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) <NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) &NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) <NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) <#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; &noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( undesired.getMock()!= null ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) result = 0; <result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList<NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (unexpected) <smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if(eP) if((eP.recorder) == null) if(eP.recorder) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
aResult = null; while (aResult!= 0) nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); <else init(); <return 0;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList&NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
aResult = null; while (aResult!= 0) nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
ntobj = i; if( scenario == -1 ) <ntobj = 0; &if( ntobj <numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) &NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) #endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeFinishList *out; nsresult result; nsIWebProgressListener* info = (NodeFinishListener*) info.nsWebProgressListener; if (NS_FAILED(result) && NS_FAILED(result)) &return result; <return result;
aResult = null; while (aResult!= 0) &nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) &#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; &noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) <<printf("No interactions wanted here:&n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); else &init(); <return 0;
aResult = null; while (aResult!= 0) <nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; &<else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
nsresult rv = noInteractionsWanted(unsigned long(desired)); if (NS_FAILED(rv)) &return rv; noInteractionsWanted(rv); return rv;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; <if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
ntobj = i; if( scenario == -1 ) &ntobj = 0; <if( ntobj <numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) scenario = Unknown; break; &/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
ntobj = i; if( scenario == -1 ) &ntobj = 0; if( ntobj &numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); &else &init(); return 0;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList<NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); <else <init(); &return 0;
ntobj = i; if( scenario == -1 ) &ntobj = 0; if( ntobj numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; <if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; <else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (deferred) if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noAwareInvocation = false; &else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); else <init(); &return 0;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); &else &init(); &return 0;
if( undesired.getMock()!= null ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) printf("No interactions wanted here:n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
noAwareInvocation = false; &&else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') return (0); <else schedule = '0'; return (0);
NoInteractionsWanted(); <if (!desired.mock &&!desired.isBuilding()) <noInteractionsWanted = true;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) <result = 0; <result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if (deferred) &if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
ntobj = i; if( scenario == -1 ) &ntobj = 0; <if( ntobj numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) ret = ret; ret = ret; if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) &NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) <NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) <NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; &else &slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
ntobj = i; if( scenario == -1 ) &ntobj = 0; <if( ntobj <numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') <return (0); else &schedule = '0'; return (0);
if (deferred) if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( cnt == 0 ) <NoInteractionsWanted( cnt ); <else <NoInteractionsWanted( cnt );
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) ret = ret; ret = ret; if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') &return (0); <else <schedule = '0'; return (0);
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeListNodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; <else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') &return (0); else schedule = '0'; return (0);
if (deferred) <if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; <&else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
ntobj = i; if( scenario == -1 ) <ntobj = 0; if( ntobj &numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if( cnt == 0 ) &NoInteractionsWanted( cnt ); &else NoInteractionsWanted( cnt );
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) #endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( cnt == 0 ) NoInteractionsWanted( cnt ); else &NoInteractionsWanted( cnt );
noAwareInvocation = false; &&else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) <result = 0; &result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
noAwareInvocation = false; <&else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
noAwareInvocation = false; else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); &else <init(); <return 0;
aResult = null; while (aResult!= 0) nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (deferred) if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; <else slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
ntobj = i; if( scenario == -1 ) <ntobj = 0; if( ntobj <numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (unexpected) &smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (deferred) &if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
aResult = null; while (aResult!= 0) &nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) scenario = Unknown; break; /* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; <<else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) &if((eP.recorder) == null) &if(eP.recorder) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if(eP) <if((eP.recorder) == null) if(eP.recorder) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') return (0); &else &schedule = '0'; return (0);
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) <NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) &NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; &noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
aResult = null; while (aResult!= 0) &nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (!!unexpectedLocation) <printf("No interactions wanted here:&n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') <return (0); <else <schedule = '0'; return (0);
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); else &init(); return 0;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList<NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList&NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
<NodeInfo *info; if (desired.getMock() == 0) info = 0; info = info.mPos; info = info.mPos; info.mLine = info.mLine; info.mLine++; info.mLine = info.mLine; info.mLine = info.mLine; info.mEnd = info.mEnd; info.mLine++; info.mLine++; info.mLine++; info.mLength = info.mLength; info.mLine++; info.mLength = info.mLine; info.mEnd = info.mLine; info.mLine = info.mLine; info.mLine++; info.mEnd = info.mLine++; info.mLine = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.m
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) ret = ret; ret = ret; &if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; &else <slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (!!unexpectedLocation) printf("No interactions wanted here:n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (deferred) &if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (unexpected) <smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (deferred) &if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); <else &init(); &return 0;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) scenario = Unknown; break; &</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) #endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (unexpected) <smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) <#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') return (0); <else &schedule = '0'; return (0);
if (unexpected) smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if (unexpected) smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
aResult = null; while (aResult!= 0) <nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) &return; &if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); else init(); &return 0;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) #endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeListNodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
ntobj = i; if( scenario == -1 ) &ntobj = 0; &if( ntobj <numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList&NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (unexpected) <smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) ret = ret; ret = ret; <if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
aResult = null; while (aResult!= 0) <nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
aResult = null; while (aResult!= 0) <nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
noAwareInvocation = false; <<else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (unexpected) smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); &else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; else &slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
noAwareInvocation = false; &&else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (unexpected) smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); &else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) <#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; <<else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deferred) if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( cnt == 0 ) &NoInteractionsWanted( cnt ); &else &NoInteractionsWanted( cnt );
ntobj = i; if( scenario == -1 ) ntobj = 0; &if( ntobj &numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; <if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') <return (0); <else schedule = '0'; return (0);
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) &#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
ntobj = i; if( scenario == -1 ) <ntobj = 0; &if( ntobj <numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
ntobj = i; if( scenario == -1 ) <ntobj = 0; <if( ntobj <numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); &else init(); <return 0;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; <<else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) <result = 0; result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList&NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); <else &init(); <return 0;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) &#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (!!unexpectedLocation) &printf("No interactions wanted here:&n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; <noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) scenario = Unknown; break; /* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) #endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) &NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) &NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) <NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) &#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') return (0); else <schedule = '0'; return (0);
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) ret = ret; ret = ret; &if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (unexpected) <smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if(eP) &if((eP.recorder) == null) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
aResult = null; while (aResult!= 0) <nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (deferred) if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') <return (0); else schedule = '0'; return (0);
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
noAwareInvocation = false; &&else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; &else slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
noAwareInvocation = false; &else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
ntobj = i; if( scenario == -1 ) ntobj = 0; if( ntobj numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (deferred) &if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noAwareInvocation = false; &<else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if(eP) <if((eP.recorder) == null) &if(eP.recorder) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; <noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; &if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; &if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if(eP) <if((eP.recorder) == null) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (!!unexpectedLocation) &printf("No interactions wanted here:&n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (deferred) <if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) scenario = Unknown; break; &</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
<NodeInfo *info; if (desired.getMock() == 0) &info = 0; info = info.mPos; info = info.mPos; info.mLine = info.mLine; info.mLine++; info.mLine = info.mLine; info.mLine = info.mLine; info.mEnd = info.mEnd; info.mLine++; info.mLine++; info.mLine++; info.mLength = info.mLength; info.mLine++; info.mLength = info.mLine; info.mEnd = info.mLine; info.mLine = info.mLine; info.mLine++; info.mEnd = info.mLine++; info.mLine = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.m
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) <NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; <if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if(eP) &if((eP.recorder) == null) <if(eP.recorder) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) #endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) <result = 0; &result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
&NodeInfo *info; if (desired.getMock() == 0) info = 0; info = info.mPos; info = info.mPos; info.mLine = info.mLine; info.mLine++; info.mLine = info.mLine; info.mLine = info.mLine; info.mEnd = info.mEnd; info.mLine++; info.mLine++; info.mLine++; info.mLength = info.mLength; info.mLine++; info.mLength = info.mLine; info.mEnd = info.mLine; info.mLine = info.mLine; info.mLine++; info.mEnd = info.mLine++; info.mLine = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.mLine++; info.mEnd = info.m
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) result = 0; result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); else &init(); &return 0;
ntobj = i; if( scenario == -1 ) ntobj = 0; &if( ntobj numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') &return (0); &else <schedule = '0'; return (0);
if (deferred) if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; <noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; &noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if( undesired.getMock()!= null ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) printf("No interactions wanted here:<n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) <#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (deferred) &if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) &result = 0; result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) result = 0; <result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; &&else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
noAwareInvocation = false; &else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList<NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) result = 0; &result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if(eP) if((eP.recorder) == null) <if(eP.recorder) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if( cnt == 0 ) <NoInteractionsWanted( cnt ); <else &NoInteractionsWanted( cnt );
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) return; <if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) &result = 0; <result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; <else slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; <else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; <&else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) <NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) <NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) &return; <if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) &return; <if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if (unexpected) smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); &else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) <scenario = Unknown; break; &</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeListNodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
nsresult rv = noInteractionsWanted(unsigned long(desired)); if (NS_FAILED(rv)) &return rv; <noInteractionsWanted(rv); return rv;
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) scenario = Unknown; break; /* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; <else slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) &scenario = Unknown; break; /* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeListNodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if(eP) if((eP.recorder) == null) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( undesired.getMock()!= null ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; else <slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); else <init(); &return 0;
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') <return (0); &else &schedule = '0'; return (0);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) result = 0; &result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; &<else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') &return (0); &else &schedule = '0'; return (0);
aResult = null; while (aResult!= 0) <nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) &result = 0; &result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); else init(); <return 0;
aResult = null; while (aResult!= 0) &nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) <#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) &result = 0; result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
noAwareInvocation = false; &else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) <return; if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); &else &init(); &return 0;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) &scenario = Unknown; break; <</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) result = 0; result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') <return (0); <else &schedule = '0'; return (0);
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) &NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) &NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if (deferred) <if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) #endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( cnt == 0 ) &NoInteractionsWanted( cnt ); else NoInteractionsWanted( cnt );
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; <else &slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (!!unexpectedLocation) printf("No interactions wanted here:<n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; &<else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) &result = 0; result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
aResult = null; while (aResult!= 0) &nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') return (0); <else schedule = '0'; return (0);
if (!!unexpectedLocation) <printf("No interactions wanted here:<n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) #endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; &else &slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') return (0); <else &schedule = '0'; return (0);
if(eP) if((eP.recorder) == null) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); &else init(); return 0;
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (deferred) if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( undesired.getMock()!= null ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) <result = 0; <result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
ntobj = i; if( scenario == -1 ) &ntobj = 0; &if( ntobj <numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
aResult = null; while (aResult!= 0) <nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
noAwareInvocation = false; <<else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; <else <slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') return (0); else <schedule = '0'; return (0);
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') &return (0); <else &schedule = '0'; return (0);
if (!!unexpectedLocation) printf("No interactions wanted here:&n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) <NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) <NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if (unexpected) &smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
&if (debug) printf("No interactions wanted here: ", debug); else printf("But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) return; <if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); <else <init(); &return 0;
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) <return; &if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) <return; <if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') &return (0); &else schedule = '0'; return (0);
if (unexpected) <smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (!!unexpectedLocation) <<printf("No interactions wanted here:<n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; <else slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); else &init(); &return 0;
&NoMoreInteractionsWanted(sel, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); <else init(); &return 0;
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; &if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; &else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (unexpected) &smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
NoMoreInteractionsWanted();
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) #endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; &noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) result = 0; result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeListNodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (deferred) <if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) <<printf("No interactions wanted here:<n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) &result = 0; &result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') return (0); <else <schedule = '0'; return (0);
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) <NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) <NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) <NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if(eP) if((eP.recorder) == null) if(eP.recorder) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) return; &if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) result = 0; result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if(eP) &if((eP.recorder) == null) if(eP.recorder) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; else slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
&src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; <<return src;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList&NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
noAwareInvocation = false; else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) &#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') <return (0); else &schedule = '0'; return (0);
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) <scenario = Unknown; break; </* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (unexpected) smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') return (0); &else <schedule = '0'; return (0);
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; &noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) result = 0; &result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
aResult = null; while (aResult!= 0) nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if(eP) &if((eP.recorder) == null) if(eP.recorder) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) <#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deferred) <if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; <noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
nsresult rv = noInteractionsWanted(unsigned long(desired)); if (NS_FAILED(rv)) return rv; &noInteractionsWanted(rv); return rv;
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; &if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) <return; if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) return; if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
<src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; return src;
aResult = null; while (aResult!= 0) &nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList&NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
ntobj = i; if( scenario == -1 ) ntobj = 0; &if( ntobj <numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') &return (0); <else <schedule = '0'; return (0);
aResult = null; while (aResult!= 0) <nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList&NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') <return (0); &else &schedule = '0'; return (0);
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) ret = ret; ret = ret; <if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) result = 0; <result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; <else <slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') <return (0); else <schedule = '0'; return (0);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) &result = 0; &result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); <else <init(); &return 0;
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; <<else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) result = 0; <result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; <noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if( undesired.getLocation() == 0 ) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else </* No - 0x%x is a little long but */ noInteractionsWanted((noInteractionsWanted).result); noInteractionsWanted((noInteractionsWanted).result); if (strcmp(unicodeImpl(unicodeImpl, "More interactions on mock '%s'", unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(un
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) <#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) result = 0; &result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if(eP) <if((eP.recorder) == null) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if(eP) &if((eP.recorder) == null) &if(eP.recorder) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); <else init(); return 0;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') <return (0); <else &schedule = '0'; return (0);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) &result = 0; &result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
aResult = null; while (aResult!= 0) nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) &result = 0; &result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) return; if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
aResult = null; while (aResult!= 0) &nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList<NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) <if((eP.recorder) == null) &if(eP.recorder) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) <result = 0; <result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (!!unexpectedLocation) <printf("No interactions wanted here:n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList&NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) ret = ret; ret = ret; <if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; <else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) <nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; else <slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList<NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); else <init(); <return 0;
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; <if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) <return; <if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) #endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if(eP) if((eP.recorder) == null) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; &else &slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) return; if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
aResult = null; while (aResult!= 0) nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
ntobj = i; if( scenario == -1 ) ntobj = 0; <if( ntobj <numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
ntobj = i; if( scenario == -1 ) ntobj = 0; &if( ntobj <numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) &NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
NoInteractionsWanted(); &if (!desired.mock &&!desired.isBuilding()) noInteractionsWanted = true;
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) return; &if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
noAwareInvocation = false; <else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') &return (0); else <schedule = '0'; return (0);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if (unexpected) smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); <else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) &#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) &return; if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeListNodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); else init(); return 0;
aResult = null; while (aResult!= 0) <nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (unexpected) smprintf(stderr, "%s: no smprintf&n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if(eP) &if((eP.recorder) == null) <if(eP.recorder) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
&src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; return src;
aResult = null; while (aResult!= 0) <nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; &if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (deferred) &if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( undesired.getMock()!= null ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) <NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
aResult = null; while (aResult!= 0) &nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; <noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
noAwareInvocation = false; <&else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
&int status; status = snprintf(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen))))))))
if (unexpected) smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); else smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
ntobj = i; if( scenario == -1 ) ntobj = 0; if( ntobj <numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
aResult = null; while (aResult!= 0) nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( cnt == 0 ) NoInteractionsWanted( cnt ); &else &NoInteractionsWanted( cnt );
aResult = null; while (aResult!= 0) nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) <result = 0; <result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) &scenario = Unknown; break; <</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
ntobj = i; if( scenario == -1 ) ntobj = 0; if( ntobj <numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) <scenario = Unknown; break; <&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) scenario = Unknown; break; <&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList<NodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); else <init(); return 0;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) &#if defined(XP_MAC) || defined(XP_MACOSX) &#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; NodeInfo *nodeInfo = null; int nodeInfo; for(NodeInfo *nodeInfo = null; nodeInfo!= null; nodeInfo!= null; null!= nodeInfo) NodeInfo *nodeInfo = null; nodeInfo = null; NodeInfo *nodeInfo = null; if(!nodeInfo.get() && nodeInfo.get()!= null) NodeInfo *nodeInfo = nodeInfo; nodeInfo.get_nodeInfo(nodeInfo); if(nodeInfo.get() == nodeInfo) &NodeInfo *nodeInfo; nodeInfo = nodeInfo.get();
if(eP) &if((eP.recorder) == null) &if(eP.recorder) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (unexpected) &smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); &else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeListNodeListNodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) <#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) &result = 0; &result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) ret = ret; ret = ret; if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) &scenario = Unknown; break; </* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') <return (0); <else <schedule = '0'; return (0);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; &else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') &return (0); else &schedule = '0'; return (0);
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList<NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if(eP) <if((eP.recorder) == null) if(eP.recorder) <if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; &&else mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; <noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (!!unexpectedLocation) printf("No interactions wanted here:n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if(eP) if((eP.recorder) == null) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) <#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
ntobj = i; if( scenario == -1 ) <ntobj = 0; <if( ntobj <numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
noAwareInvocation = false; <<else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); &else init(); <return 0;
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) return; if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
ntobj = i; if( scenario == -1 ) <ntobj = 0; <if( ntobj numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); <else &init(); &return 0;
if( undesired.getLocation() == 0 ) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else </* No - 0x%x is a little long but */ noInteractionsWanted((noInteractionsWanted).result); noInteractionsWanted((noInteractionsWanted).result); <if (strcmp(unicodeImpl(unicodeImpl, "More interactions on mock '%s'", unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(un
if (deferred) <if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if( mPrinter.print(invocations ) ) mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if( cnt == 0 ) &NoInteractionsWanted( cnt ); <else NoInteractionsWanted( cnt );
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else <if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deferred) <if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (!!unexpectedLocation) <printf("No interactions wanted here:&n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (!!unexpectedLocation) <<printf("No interactions wanted here:&n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) &scenario = Unknown; break; &/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); <if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) scenario = Unknown; break; &</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
static int ret = 0; static char* ret = && &(ret = mPrinter.print(ret); if (ret == -1) return; &if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
if (!!unexpectedLocation) &&printf("No interactions wanted here:&n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); else init(); <return 0;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); else <init(); <return 0;
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; <noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) scenario = Unknown; break; </* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') return (0); else &schedule = '0'; return (0);
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) &return; &if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
noAwareInvocation = false; &&else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
noAwareInvocation = false; <<else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; <if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
noAwareInvocation = false; <<else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
aResult = null; while (aResult!= 0) nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (!!unexpectedLocation) &<printf("No interactions wanted here:&n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; &if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
<src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; &return src;
aResult = null; while (aResult!= 0) <nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList&NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) mStackPos = 0; &&else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) <mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
noAwareInvocation = false; &else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList&NodeList> nodeList; NodeList&NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; else <slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) &return; <if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if(eP) <if((eP.recorder) == null) <if(eP.recorder) &if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if(eP) &if((eP.recorder) == null) &if(eP.recorder) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '0') return (0); <else schedule = '0'; return (0);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) <if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) #endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
noAwareInvocation = false; &<else <noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) &NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if( undesired.getLocation() == 0 ) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else /* No - 0x%x is a little long but */ noInteractionsWanted((noInteractionsWanted).result); noInteractionsWanted((noInteractionsWanted).result); <if (strcmp(unicodeImpl(unicodeImpl, "More interactions on mock '%s'", unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(un
ntobj = i; if( scenario == -1 ) ntobj = 0; <if( ntobj &numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) &return; if ( ret == -1) &ret = ret; return; noError( "No interactions wanted here:", dev );
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; &else slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
noAwareInvocation = false; else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
ntobj = i; if( scenario == -1 ) ntobj = 0; <if( ntobj numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if(eP) if((eP.recorder) == null) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) result = 0; <result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (!!unexpectedLocation) printf("No interactions wanted here:&n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) <return 0; /* XXX */ break; default: return 0; break;
if (unexpected) <smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); &else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
ntobj = i; if( scenario == -1 ) ntobj = 0; <if( ntobj numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
ntobj = i; if( scenario == -1 ) <ntobj = 0; if( ntobj &numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (deferred) &if (deferred) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) &result = 0; &result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); <else <init(); return 0;
if (!desired.canConvertRealFunction()) <return 0;
int ret = 0; while( ret > 0 ) &ret = ret; if( ret >= 0 ) &ret = ret; ret = ret; <if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (unexpected) &smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); <else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) <error("No Interactions wanted here:"); &else &init(); return 0;
if (deferred) <if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if(eP) <if((eP.recorder) == null) if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; &else <slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList&NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if (deferred) <if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) &scenario = Unknown; break; &&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) <#endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) &noResult = noResult; if (sys == null) <result = 0; <result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
static int ret = 0; static char* ret = && <(ret = mPrinter.print(ret); if (ret == -1) &return; &if ( ret == -1) <ret = ret; return; noError( "No interactions wanted here:", dev );
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) return 0; &/* This could happen on non-interactions */ break; case e_No_Interactions: &if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) return err; noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
ntobj = i; if( scenario == -1 ) &ntobj = 0; if( ntobj &numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) &slx = "NO_INFO"; else slx = "No_INFO"; slx = "NO_INFO"; &if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) <#if defined(XP_MAC) || defined(XP_MACOSX) &#endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if( undesired.getMock()!= null ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); &else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
noAwareInvocation = false; <else noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
if( cnt == 0 ) NoInteractionsWanted( cnt ); &else NoInteractionsWanted( cnt );
noMoreInteractionsWanted(", &aCmd );
if( mPrinter.print(invocations ) ) &mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') <return (0); &else schedule = '0'; return (0);
if( undesired.getMock()!= null ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') &return (0); &else &schedule = '0'; return (0);
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) &scenario = Unknown; break; <</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (!!unexpectedLocation) <<printf("No interactions wanted here:n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) <return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( undesired.getMock()!= null ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
ntobj = i; if( scenario == -1 ) ntobj = 0; <if( ntobj <numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (!!unexpectedLocation) <<printf("No interactions wanted here:&n"); return; noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '&0') return (0); &else &schedule = '0'; return (0);
static int ret = 0; static char* ret = && (ret = mPrinter.print(ret); if (ret == -1) &return; if ( ret == -1) ret = ret; return; noError( "No interactions wanted here:", dev );
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); &else <init(); <return 0;
if(eP) if((eP.recorder) == null) &if(eP.recorder) if(eP.recorder) <if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; &noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) <if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (unexpected) &smprintf(stderr, "%s: no smprintfn", undesired.getMock() + "':", undesired.getLocation(), scenario); else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; &&else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; &&else <mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
aResult = null; while (aResult!= 0) <nsCOMPtr<nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (!!unexpectedLocation) <&printf("No interactions wanted here:<n"); return; <noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
if (!!unexpectedLocation) &printf("No interactions wanted here:&n"); return; &noMoreInteractionsWanted = 1; noMoreInteractionsWanted = 0; if (unexpectedLocation) printf("No interactions wanted here:n");
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; &if( ret > 0 ) <ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (cnt == 0) &char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (deferred) if (deferred) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
noAwareInvocation = false; &&else &noAwareInvocation = (NoAwareInvocation) scenario; if (unknownReply) <NoAwareInvocation(); NoAwareInvocation(unknownReply); NoAwareInvocation(unknownReply); noAwareInvocation = 0; noAwareInvocation = 0; noAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; NoAwareInvocation = 0; No
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; &<else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if ( undesired.getMock() ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) &mStackPos = 0; else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; <else <slx = "No_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
aResult = null; while (aResult!= 0) <nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); &if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); &else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
ntobj = i; if( scenario == -1 ) <ntobj = 0; &if( ntobj &numQuotes ) *numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if (deferred) <if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (unexpected) smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
ntobj = i; if( scenario == -1 ) &ntobj = 0; &if( ntobj <numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
aResult = null; while (aResult!= 0) &nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) return; <return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
ntobj = i; if( scenario == -1 ) &ntobj = 0; <if( ntobj numQuotes ) &*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
if(eP) if((eP.recorder) == null) if(eP.recorder) <if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
aResult = null; while (aResult!= 0) <nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) &return err; &noInteractionsWanted = null; <if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) #endif <#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
aResult = null; while (aResult!= 0) &nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) <return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
src = (src && *cstrncmp("::hash", "::tat", "::save" )!= 0; src = (src && *cstrncmp("::hash", "::ms")!= 0; <&return src;
if( undesired.getLocation() == 0 ) return; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &/* No - 0x%x is a little long but */ noInteractionsWanted((noInteractionsWanted).result); noInteractionsWanted((noInteractionsWanted).result); <if (strcmp(unicodeImpl(unicodeImpl, "More interactions on mock '%s'", unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(unicodeImpl(un
initSensiredCallbacks(); snprintf(SessionHistoryCallback(aCallbacks, "No interactions wanted here:", &schedule)); *schedule = schedule; if (schedule == '<0') <return (0); <else <schedule = '0'; return (0);
/* * We don't have an error while we have no problem. */ if ( mStackPos > 0 ) <mStackPos = 0; <<else &mStackPos = 0; NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) slx = "NO_INFO"; <else <slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) &if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); <else init(); return 0;
aResult = null; while (aResult!= 0) nsCOMPtr&nsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (deprecated_NoInteractionsWanted) <int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; <noInteractionsWanted = null; if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
if (cnt == 0) <char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; <return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if(eP) if((eP.recorder) == null) &if(eP.recorder) &if(eP.recorder) &if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) scenario = Unknown: if (unknown) <scenario = Unknown; break; &</* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (unexpected) smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); else &smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) <result = 0; result = sys_stack_get_next(sys); result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
int ret = 0; while( ret > 0 ) ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; <if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
aResult = null; while (aResult!= 0) nsCOMPtrnsIAtom> aAtom = (nsIAtom*)aResult; if (!aAtom) &return; &return NS_OK; if (deadIsHidden(aAtom)) if (eadIsHidden(aAtom)) return; else aAtom = "Restore(%s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %s: %
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len &0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; &return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); &else &init(); return 0;
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) &scenario = Unknown: if (unknown) &scenario = Unknown; break; <&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) scenario = Unknown; break; <&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) error("No Interactions wanted here:"); <else &init(); return 0;
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &if ( undesired.getMock() == ':' ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (deprecated_NoInteractionsWanted) &int err = 0; /* Only make sure the event has been contacted */ if ((err = noInteractionsWanted) && (unexpected) ) <return err; &noInteractionsWanted = null; &if (syncEvent("No interactions wanted here"); noInteractionsWanted = null; /* No interactions wanted here */ noInteractionsWanted = null; /* Some interactions wanted here are also on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario); return (0);
ntobj = i; if( scenario == -1 ) <ntobj = 0; if( ntobj numQuotes ) <*numQuotes = numQuotes; *numQuotes = numQuotes; else *numQuotes = numQuotes; else *numQuotes = numQuotes; return -1; #ifdef DEBUG_BUG if( *numQuotes == 0) if( *numQuotes == 0 ) return -1; #endif return -1;
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; /* This could happen on non-interactions */ break; case e_No_Interactions: if (uniques.location == e_no_interactions) &return 0; /* XXX */ break; default: return 0; break;
if(eP) &if((eP.recorder) == null) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) else if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder) if(eP.recorder.id 3) if(eP.
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) <noResult = noResult; if (sys == null) <result = 0; result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
/* We found the one on this case. */ return (0); /* * We've got a job to create the match for a different location. */ if (unknown) <scenario = Unknown: if (unknown) &scenario = Unknown; break; &&/* * No more interactions were made here. */ if (unknown) /* - we got no more interactions in the list. */ if (unknown) scenario = unknown; /* - We need to make a little tricky ') return 0; if (unknown) scénario = Unknown; return 0; if (unknown) scenario = Unknown; else scenario = Unknown; scenario = Unknown; if (unknown) scenario = Unknown; if (unknown) scenario = Unknown; else scenario = Unknown; else scenario = Unknown; <unk>
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) result = 0; result = sys_stack_get_next(sys); &result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if ( undesired.getMock() ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &if ( undesired.getMock() == ':' ) NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( undesired.getMock()!= null ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (unexpected) smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
if( mPrinter.print(invocations ) ) <mPrinter.print(invocations); if(!mPrinter.print(invocations ) ) &mPrinter.print(invocations ); <else mPrinter.print(invocations ); if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) mPrinter.print(invocations ); return; if(!mPrinter.print(invocations ) ) m
if( undesired.getMock()!= null ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) <ret = ret; ret = ret; if( ret > 0 ) ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
/* XXX - No more Interactions Wanted. */ case e_No_Interactions: if (uniques) &return 0; </* This could happen on non-interactions */ break; case e_No_Interactions: <if (uniques.location == e_no_interactions) return 0; /* XXX */ break; default: return 0; break;
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeList&NodeList&NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
int ret = 0; while( ret > 0 ) <ret = ret; if( ret >= 0 ) ret = ret; ret = ret; &if( ret > 0 ) &ret = ret; if( ret > 0 ) ret = ret; if( ret 0 ) ret = ret; else ret = ret; ret = ret; return ret; #endif if( ret == 0 ) ret = ret; else ret = ret; #endif if( ret == 0 ) ret = ret; ret = ret; if( ret == 0 ) <unk>
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len <0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
if (bErrorEval!= EVAL_NOINTERACTIONSWANT) &error("No Interactions wanted here:"); else <init(); <return 0;
/* Don't care about a load on the 'untimed' table. */ int slx = "NO xfree"; int sly = "NO xfree"; if (!slx) <slx = "NO_INFO"; else <slx = "No_INFO"; slx = "NO_INFO"; <if (slx == ':') slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; else slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO"; slx = "NO_INFO"; if (slx == ':') slx = "NO_INFO
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeList<NodeList> nodeList; NodeList<NodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList<NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
NodeListImpl* nodeList = new NodeListImpl(); if (nodeList) nodeList.addElement(nodeList); NodeList nodeList.addElement(nodeList); NodeListNodeList> nodeList; NodeListNodeList<NodeList> nodeList; nodeList.addElement(nodeList); NodeList&NodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNodeListNo
if( cnt == 0 ) NoInteractionsWanted( cnt ); else NoInteractionsWanted( cnt );
if ( undesired.getMock() ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &if ( undesired.getMock() == ':' ) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if (cnt == 0) char buf[6]; char *spec; #if defined(XP_MAC) || defined(XP_MACOSX) *spec; #endif /* debug*/ if (strcmp(buf, "NO_INTERNAL_LOCK") == 0) if ((len 0) && (!strcmp(buf, "INTERCHAN_DELAY"))) return; return -1; if (strcmp(buf, "INTERCHAN_DELAY") == 0) return;
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) <#endif &#if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
if (deferred) <if (deferred) <NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
if( undesired.getMock()!= null ) &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario )); <else &NoInteractionsWanted(join( "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario ));
/* XXX */ result = sys_stack_get_next(sys); if (NS_SUCCEEDED(result) && len > 0) noResult = noResult; if (sys == null) result = 0; <result = sys_stack_get_next(sys); <result = noResult; result = noResult; else result = sys.stack_free(sys); result = sys.stack_free(sys); if (sys.stack_size 0) result = sys.stack_size; result = sys.stack_size + sys.stack_size; result = sys.stack_size; result = sys.stack_size; result = sys.s
if (unexpected) &smprintf(stderr, "%s: no smprintf<n", undesired.getMock() + "':", undesired.getLocation(), scenario); &else <smprintf(stderr, "%s: No smprintfn", undesired.getMock() + "':", undesired.getLocation()); throw new NoInteractionsWanted(stderr, "No interactions wanted here:", new LocationImpl(), "But found this interaction on mock '" + undesired.getMock() + "':", undesired.getLocation(), scenario);
static int i; ntohl(&unsignedInstances); int ntohl(&unsignedInstances); if( ntohl(&unsignedInstances ) ) &if( ntohl((void*)unsignedInstances ).invocationName ) #if defined(XP_MAC) || defined(XP_MACOSX) #endif #if defined(XP_MACOSX) ) #endif return ntohl(unsignedInstances); #endif if( ntohl((void*)unsignedInstances).invocationName ) #endif #endif #endif #endif
