golden:
result = lvalInt >>> rvalInt;
inference:
result = lvalInt >> rvalInt;
result = lvalInt >>> rvalInt;
result = lvalInt >>= rvalInt;

result = (int)lvalInt >>> rvalInt;
result = lvalInt  rvalInt;
result = lvalInt >>| rvalInt;
result = lvalInt >> 1;
result = lvalInt;
result = rvalInt >> lvalInt;
res = lvalInt >>> rvalInt;
result = lvalInt > rvalInt;
result = lvalInt || rvalInt;
result = 0;
result = rvalInt >>> lvalInt;
result = (long) lvalInt >>> rvalInt;
result = lvalInt >= rvalInt;
result = lvalInt >>> lvalInt;
result = lvalInt >> >> rvalInt;
result = lvalInt >>> (int)rvalInt;
result = (long)lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt - 1;
result = lvalInt >> (int) rvalInt;
result = int >>> rvalInt;
result = lvalInt >> 2;
result = lvalInt >>. rvalInt;
result = int(lvalInt) >>> rvalInt;
result = lvalInt >> lvalInt;
rval = lvalInt >>> rvalInt;
result = (lvalInt >>> rvalInt);
result = lvalInt >>> rval;
result = lvalInt >>> rvalInt + 1;
result = lvalInt >>> n;
result = lvalInt >> RVALInt;
result = lvalInt >> offset;
result = &lvalInt >>> rvalInt;
result=lvalInt >>> rvalInt;
result = lvalInt >> 1, rvalInt;
result = lvalInt>> rvalInt;
result = lvalInt >>> rvalInt >> 1;
result = lvalInt = rvalInt;
result = lvalInt >> (int)rvalInt;
result = lvalInt >> > rvalInt;
result = lval.get() >>> rval.get();
result = (void *)lvalInt >>> rvalInt;
int result = lvalInt >>> rvalInt;
result = (lvalInt >>>)rvalInt;
lvalInt >>= rvalInt;
result = lvalInt >> 0, rvalInt;
result = *lvalInt >>> rvalInt;
result = int(lvalInt >>> rvalInt);
result = (lvalInt >>>) rvalInt;
result = lvalInt >>> rvalInt >> 2;
result = sizeof(lvalInt) >>> rvalInt;
result = -lvalInt >>> rvalInt;
result = (double) lvalInt >>> rvalInt;
result = lvalIndex >>> rvalIndex;
result = (double)lvalInt >>> rvalInt;
result = rvalInt >> 1;
lval = lvalInt >>> rvalInt;
result = lvalInt >>> aRvalInt;
result = lvalInt >>> *rvalInt;
result = lvalInt >> rval;
result = double lvalInt >>> rvalInt;
result = lvalInt >> rvalInt - 1;
result = (char *)lvalInt >>> rvalInt;
result = int >>> int;
return lvalInt >>> rvalInt;
result = 1;
result = lvalInt >>> 0;
result =  lvalInt >>> rvalInt;
result = lvalInt >>/* rvalInt;
result = lvalInt >>> rvalInt
result = lvalInt >>> rvalInt = 0;
result = lvalInt >> RVAL_INT;
result = rval;
ret = lvalInt >>> rvalInt;
result = (void) lvalInt >>> rvalInt;
lvalInt |= rvalInt;
result = -1;
result = lvalInt >> 4;
result= lvalInt >>> rvalInt;
result = lvalInt >>= (int)rvalInt;
result = const lvalInt >>> rvalInt;
result = n;
result = lvalInt >>> rvalInt; break;
result = lvalInt() >>> rvalInt();
result = left.getDouble() >>> rvalInt;
result = lvalInt >> rvalInt + 1;
result = lvalInt[0] >>> rvalInt;
result = lvalInt >> 0;
result = lvalInt[1] >>> rvalInt;
lvalInt = lvalInt >> rvalInt;
result = lvalInt >>= lvalInt;
result = lvalInt
result = len >>> rvalInt;
result = lval_int >>> rval_int;
result = lvalInt + rvalInt;
result = (int) lvalInt;
result = lvalInt >> (rvalInt - 1);
result = lvalInt() >>> rvalInt;
result = lvalInt >>> rvalInt > 0;
lvalInt = (int) lval;
result = lvalInt >> type;
result = lvalInt >>> (long)rvalInt;
result = lvalInt, rvalInt;
result = lvalInt >>  rvalInt;
result = (short)lvalInt >>> rvalInt;
result = lval.int >>> rval.int;
result = lvalInt >> 16;
result = lval) >>> rval;
result = long >>> rvalInt;
return n;
result = n >> rvalInt;
result = n >>> rvalInt;
result = lvalInt >> true;
result = lvalInt >> 3;
result = lvalInt >>> &rvalInt;
result = lvalInt >>-rvalInt;
result = lvalInt >> 8;
result = lvalInt) >>> rvalInt;
result = lvalInt >> rvalInt; break;
else result = lvalInt >>> rvalInt;
result = lvalInt >> 2*rvalInt;
result = lvalInt >>> int(rvalInt);
result = rvalInt >> 2;
result = lvalInt >>.rvalInt;
result = lvalInt >> (rvalInt);
aResult = lvalInt >>> rvalInt;
result = lvalInt * rvalInt;
result = lvalInt >>> RVALInt;
result = lvalInt >>> (rvalInt - 1);
result = lvalInt >> RVAL;
result = (*lvalInt) >>> rvalInt;
result = lvalInt >>>  rvalInt;
result = lvalInt >> prev;
result = lvalInt >> aRvalInt;
result = lvalInt >>> 0, rvalInt;
result = lvalInt >>> result;
result = lvalInt >>> 1;
result = lvalInt >> 20;
result = lvalInt >>> int;
result = lvalInt >>> rvalInt ;
result = lvalInt >> 32;
result = lvalInt >> n;
result = rvalInt;
result = lvalInt >> MAX_VALUE;
result = lvalInt >>> rvalInt / 2;
n = lvalInt >>> rvalInt;
result = lvalInt);
result = lvalInt >>> rvalInt; #endif
result = lvalInt >>> rvalInt >> 0;
result = lvalInt >>> (rvalInt);
result = (lvalInt >>| rvalInt);
result = lval int >>> rval;
result = lvalInt >>> (long) rvalInt;
result = lvalInt >>> rval);
result = res;
result = lvalInt >>> i;
result = lval int >>> rvalInt;
result = lval;
result = lvalInt >>> rvalInt >> 8;
result = &lvalInt;
result = lvalInt >>> right.getDouble();
result = lvalInt >> rvalInt >> 1;
result = lvalInt >>> (ulong)rvalInt;
result = (lvalInt >>> rvalInt) 0;
rvalInt = lvalInt >> rvalInt;
result = lvalInt >> sizeof(rvalInt);
result = lvalInt >>> int rvalInt;
result = lvalInt >>> (rvalInt >> 1);
lvalInt = rvalInt;
result = lvalInt >>> rvalInt - 2;
result = lvalInt >> rval);
result = lvalInt >>> rvalInt; */
result = lvalInt >> (rvalInt >> 0);
result = lvalInt >> (rvalInt >> 1);
result = lvalInt >>> (*rvalInt);
result = lvalInt >>> rvalInt;;
rvalInt = lvalInt;
result = lvalInt >> (rvalInt >> 32);
result = false;
result = lvalInt >>> rvalInt >> 4;
result = lvalInt >> rvalInt >> 0;
result = lvalInt >>> rvalInt  1;
result = lvalInt  rval;
result = lvalInt >> rvalInt  0;
result;
result = lvalInt.get() >>> rvalInt;
result = lvalInt >>> (rvalInt >> 0);
result = (int) lvalInt >>> rvalInt;
result = lvalInt >>> (int) rvalInt;
result = lvalInt >>> rvalInt  0;
result = lvalInt >> (lvalInt - rvalInt);
result = lvalInt >>> rvalInt - lvalInt;
result = ((LVAL_INT) lvalInt >>> rvalInt);
result = lvalInt >> (rvalInt /* rval) */
result = lvalInt >>> ((lvalInt + rvalInt) - 1));
result = lvalInt >> (rvalInt / rvalInt);
result = lvalInt >> (RVAL_INT)rvalInt;
result = (n.getType() == Token.LSH) || (lvalInt >>> rvalInt);
result = lvalInt >>> (uintptr_t)rvalInt;
result = lvalInt >> (rvalInt - lvalInt);
result = lvalInt >>> (n - lvalInt);
result = (char *) lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt;  else  result = lvalInt >>> rvalInt;
result = lvalInt >> (rvalInt + 1);
result = ((lvalInt)(int) lval) >>> rvalInt;
result = lvalInt >>> ((unsigned char)rvalInt);
result = (lvalInt  rvalInt)? 0 : 0;
result = lvalInt >>> (RX_INT)rvalInt;
result = lvalInt >>> (RVAL_INIT | RLVAL_INIT);
result = lvalInt >>> rvalInt;  else result = lvalInt >>> rvalInt;
result = ((lvalInt >= 0) && (lvalInt = 0))? lvalInt >> rvalInt : lvalInt;
result = lvalInt >>> rvalInt /* sizeof(LSH) */
result = lvalInt >>> rvalInt; if ((n  0) || (n > rval))  error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = (lvalInt  rvalInt) | (lvalInt >> (rvalInt  1));
result = lvalInt >>> rvalInt;  else  error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = (lvalInt >>> rvalInt).result;
result = (n.getType()) lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt  lvalInt;
result = lvalInt >>> rvalInt  (long)lvalInt;
result = (lvalInt)((int)lvalInt >>> rvalInt);
result = (u_int)lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt; /* XXX: */
result = lvalInt >>> (rvalInt - lvalInt);
result = lvalInt >>> rvalInt; /* * There is a valid number of lvalInts to move on, and we can * use a single number. */
result = (lvalInt >>> rvalInt) lvalInt;
result = lvalInt >> (lvalInt >> rvalInt);
result = lvalInt >>> (lvalInt >> rvalInt);
result = (char*)lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt /* XXX */
result = lvalInt >>> rvalInt; else &result = lvalInt >>> rvalInt;
result = (lvalInt <rvalInt) | (lvalInt >> (rvalInt <1));
result = lvalInt >>> rvalInt; if ((n <0) || (n > rval)) <error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt <rval;
result = lvalInt >>> rvalInt &0;
result = lvalInt <= rvalInt;
result = (lvalInt &rvalInt) | (lvalInt >> (rvalInt &1));
result = lvalInt >>> rvalInt; else &error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >>> rvalInt <1;
result = lvalInt >>> rvalInt; if ((n <0) || (n > rval)) &error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >>= rvalInt;
result = lvalInt >>> rvalInt; &else &result = lvalInt >>> rvalInt;
result = (lvalInt &rvalInt)? 0 : 0;
result = lvalInt >>> &rvalInt;
result = lvalInt >> <rvalInt;
result = lvalInt >>> rvalInt; &else error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >>> rvalInt; else <result = lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt; if ((n 0) || (n > rval)) <error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >> rvalInt &0;
result = &lvalInt >>> rvalInt;
result = lvalInt >> rvalInt;
result = lvalInt >>> rvalInt; <else result = lvalInt >>> rvalInt;
result = lvalInt >> >> rvalInt;
result = lvalInt >>> rvalInt; if ((n 0) || (n > rval)) &error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >>> rvalInt; else <error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >> &rvalInt;
result = lvalInt >>> rvalInt; if ((n 0) || (n > rval)) error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >>> rvalInt; if ((n &0) || (n > rval)) <error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt &rval;
result = <lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt; &else result = lvalInt >>> rvalInt;
result = (lvalInt rvalInt)? 0 : 0;
&result = lvalInt >>> rvalInt;
result = (lvalInt <rvalInt) | (lvalInt >> (rvalInt &1));
result = lvalInt >>> rvalInt <= 0;
result = ((lvalInt >= 0) && (lvalInt = 0))? lvalInt >> rvalInt : lvalInt;
result = lvalInt >>> rvalInt &(long)lvalInt;
result = lvalInt >>> rvalInt; <else <error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >>> rvalInt 0;
result = lvalInt >>> rvalInt;
result = lvalInt >> rvalInt 0;
result = lvalInt &= rvalInt;
result = lvalInt >>> rvalInt; if ((n &0) || (n > rval)) error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = (lvalInt rvalInt) | (lvalInt >> (rvalInt 1));
result = (lvalInt rvalInt) | (lvalInt >> (rvalInt &1));
result = lvalInt rvalInt;
result = lvalInt >><rvalInt;
result = lvalInt >>&rvalInt;
result = lvalInt >>> rvalInt lvalInt;
result = lvalInt >> rvalInt <0;
result = (lvalInt rvalInt) | (lvalInt >> (rvalInt <1));
<result = lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt; &else <error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt rval;
result = lvalInt >>> rvalInt (long)lvalInt;
result = lvalInt >>rvalInt;
result = ((lvalInt >= 0) && (lvalInt &= 0))? lvalInt >> rvalInt : lvalInt;
result = lvalInt >>> rvalInt; if ((n &0) || (n > rval)) &error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >>> rvalInt <lvalInt;
result = lvalInt <rvalInt;
result = (lvalInt &rvalInt) | (lvalInt >> (rvalInt <1));
result = lvalInt >>> rvalInt &lvalInt;
result = lvalInt >>> rvalInt; <else <result = lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt; if ((n <0) || (n > rval)) error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >>> rvalInt <0;
result = lvalInt >>> rvalInt 1;
result = lvalInt >>> <rvalInt;
result = ((lvalInt >= 0) && (lvalInt <= 0))? lvalInt >> rvalInt : lvalInt;
result = (lvalInt <rvalInt)? 0 : 0;
result = lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt; &else &error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >> rvalInt;
result = lvalInt >>> rvalInt; else error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >>> rvalInt; &else <result = lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt; <else &error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt >>> rvalInt; else result = lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt = 0;
result = lvalInt >>> rvalInt &= 0;
result = lvalInt &rvalInt;
result = (lvalInt &rvalInt) | (lvalInt >> (rvalInt 1));
result = lvalInt >>> rvalInt <(long)lvalInt;
result = lvalInt >>> rvalInt &1;
result = (lvalInt <rvalInt) | (lvalInt >> (rvalInt 1));
result = lvalInt >>> rvalInt; <else &result = lvalInt >>> rvalInt;
result = lvalInt >>> rvalInt; <else error(FRACTIONAL_BITWISE_OPERAND, left); return n;
result = lvalInt = rvalInt;
