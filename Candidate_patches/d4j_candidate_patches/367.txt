token = eatTokensUntilEOL(token);
token = eatTokensUntilEOL();
token = eatTokensUntilEOL(&token);

token = eatTokensUntilEOL(null);
token = eatTokensUntilEOL(0);
token = eatTokensUntilEOL("");
token = eatTokensUntilEOL(state);
token = TokensUntilEOL();
token = eatTokensUntilEOL ();
token = consumeTokensUntilEOL();
token = eatTokensUntilEOL(aToken);
token = eatTokensUntilEOL;
token = getTokensUntilEOL();
token = eatTokensUntilEOL(1);
token = eatTokensUntilEOL(eol);
token = EatTokensUntilEOL();
token=eatTokensUntilEOL();
token = eatTokensUntilEOL(false);
token = eatTokensUntilEOL(buf);
token = eatTokensUntilNoEOL();
token = new eatTokensUntilEOL();
token.eatTokensUntilEOL();
token = eatTokensUntilEOL(s);
token = eatTokensUntilEOL(ntoken);
token = eatTokensUntilEOL(EOC);
token = eatTokensUntilEOL(*token);
token = EOC;
token = blockInfo.token;
token = token.eatTokensUntilEOL();
token = readTokensUntilEOL();
token = token.eatTokensUntilEOL();
token = addTokensUntilEOL();
token = eatTokensUntilEOL(blockInfo);
token = eatTokensUntilEOLs();
token = digestTokensUntilEOL();
token = eatTokensUntilEOL() - 1;
token = eatTokensUntilEOL2();
token = GetTokensUntilEOL();
token = eatTokensUntilEOL(null);
token = eatTokensUntilEOL(ret);
token = eatTokensUntilEOL(None);
token = break;
token = eatTokensUntilEOL(str);
token = eatTokensUntilEOL(eToken);
token = eatTokensUntilEOL(true);
token = eatTokensUntilNext();
token = TokensUntilEOL(token);
token = eatTokensUntilEOL( );
token = eatTokensUntilEOL(code);
token = eatTokensUntilEOL(prefix);
token = *eatTokensUntilEOL();
token = ignoreTokensUntilEOL();
token = JSMSG_eatTokensUntilEOL();
token = do_eatTokensUntilEOL();
token = EOL_EATTokensUntilEOL();
token = JSMSG_EATTokensUntilEOL();
token = eatTokensUntilEOL(end);
token = next();
token = listTokensUntilEOL();
token = eatTokensUntilEOL(); break;
token = parseTokensUntilEOL();
token = eatTargetsUntilEOL();
token = eatTokensUntilEOL(!token);
token = eatTokensUntilEOL(type);
token = eatTokensUntilEOL(bytes);
token = eatTokensUntil();
token = eatTokens();
token = newTokensUntilEOL();
token = endTokensUntilEOL();
token = eatTokensUntilEOL(;);
token = eatTokensUntilEOL(suffix);
token = eatTokensUntilEOL(void);
token = eatTokensUntilEOL(nil);
token = createTokensUntilEOL();
token = eatTokensUntilEOL(n);
token = EOL_eatTokensUntilEOL();
token = eatTokensUntilEOL(status);
token = eatTokensUntilEOL(t);
token = eatTokensUntilEOL(); #endif
token = eatTokensUntilEOL(this);
token = this.eatTokensUntilEOL();
token = eatTokensUntilEOL1();
eatTokensUntilEOL();
token = EOC.eatTokensUntilEOL();
token = eatTokensUntilEOL(blank);
token = self.eatTokensUntilEOL();
token = eatTokensUntilEOL(tag);
token = eatTokensUntilEOL(-1);
token = eatTokensUntilEOL(Token);
token = eatTokensUntilEOL(currentToken);
token = eat_tokensUntilEOL();
token = eatTokensUntilEOL(ENOMEM);
token = eatTokensUntilEOL().token;
token = listenTokensUntilEOL();
token = expandTokensUntilEOL();
token = eatTokensUntilEOL(buffer);
token = eatTokensUntilEOL(tmp);
token = eatTokensUntilEOL(frame);
token = eatTokensUntilEOC();
token = eatTokensUntilEOL(2);
token = eatTokensUntilEOL(tok);
token = eatTokensUntilOld();
token = EINVAL;
token = EAT_TOKEN_EOL();
token = eatEOL();
token = saveTokensUntilEOL();
token = eatAllTokensUntilEOL();
token = eatTokensUntilEOL( token );
token = eatTokensUntilEOL(td);
token = uneatTokensUntilEOL();
token = eatTokensUntilEOL(next);
token = eatTokensUntilEOL(__unused);
token = eatTokensUntilEOL0();
token = eatTokensUntilEOL(e);
token = eatTokensUntilEOL(p);
token = eatTokensUntilEOL(100);
token = tokensUntilEOL();
token = eatTokensUntilEOL(i);
token = eatTokensUntilEOL(eof);
token = parser.eatTokensUntilEOL();
*token = eatTokensUntilEOL();
token = eatTokensUntilEOL(ep);
token = consumedTokensUntilEOL();
token = eatTokensUntilEOL(key);
token = JSMSG_EATTOkensUntilEOL();
token = eatTokensUntilEOL(count);
token= eatTokensUntilEOL();
token = eatTokensUntilEOL(id);
token = eatTokensUntilEOL(obj);
token = eatTokensUntilEOL(ptr);
token = eatTokensUntilEOL(prev);
token = eatTokensUntilEOL(flags);
token = eatTokensUntilEOL( null);
token = eatTokensUntilEOL(string);
token = extendTokensUntilEOL();
chunk = eatTokensUntilEOL();
token = eatFromTokensUntilEOL();
token = TokenEOL();
token = eatTokensUntilEOL() + 1;
token = eatTokensUntilEOL(false);
token = eatTokensUntilEOL(3);
token = token;
token = eatElementsUntilEOL();
token = eatTokensUntilEOL(*this);
token = eatTokensUntilEO();
token = eatTokensUntilEOL(l);
token = eatTokensUntilEOL(c);
token = eat();
token = eatTokensUntilEOL(jsdoc);
token = eatTokensUntilEOL(stream);
token = eatTokensUntilEOL(ch);
token = eatTokensUntilEOL(begin);
token = eatTokensUntilEOL(rv);
token = eatTokensUntilEOL(node);
token = eatTokensUntilEOL(mToken);
token = Token(token);
token = eatTokensUntilEOL(tree);
token = eatTokensUntilEOL(parser);
token = eatTokensUntilEOL(DEVBUF);
token = eatTokensUntilEOL(encoding);
token = eatTokenCount();
token = eatTokensUntilEOL(tokenName);
token = eatTokensUntilEOL(idx);
token = null;
token = eat(token);
token = eatTokensUntilEOL(); */
token = eatTokensUntilEOL(cmd);
token = eatTokensUntilEOL(stack);
token = TokenEOL(token);
token = "";
token = eatTokensUntilEOL(mem);
token = eatTokensUntilEOL(keg);
token = eatTokensUntilEOL(bufInfo);
token = eatTokensUntilEOL(eop);
token = eatTokensUntilEOL(return);
token = eatTokensUntilEOL
token = eatTokensUntilEOL(eom);
token = eatTokensUntilEOL( token);
token = chunksUntilEOL();
token = eatTokensUntilEOL(eo);
token = eatTokensUntilEOL(NodeInfo);
token = eatTokensUntilEOL(queue);
token = cigarettesUntilEOL();
token = eatTokensUntilEOL(nodes);
token = TokenList(token);
token = eatTokensUntilEOL(ctx);
token = eatTokensUntilEOL(msg);
token = eatTokensUntilEOL(extensions);
token = free(token);
token = eatTokensUntilEOL((char *)&token);
token = eatTokensUntilEOL(aNodeInfo.parentNode);
token = eatTokensUntilEOL(null);
token = eatTokensUntilEOL(((jsdocBuilder.shouldParseDocument()));
token = eatTokensUntilEOL(aCopy);
token = EOC_EAT_TOKEN_UntilEOL();
token = eatTokensUntilEOL(prevNode);
token = eatTokensUntilEOL(nsDependentCString(token));
token = eatTokensUntilEOL(eOwner);
token = eatTokensUntilEOL(refresh);
token = eatTokensUntilEOL("EOS");
token = eatTokensUntilEOL(jsdocBuilder.getBlock());
token = eatTokensUntilEOL(eObj);
token = eatTokensUntilEOL(eobj);
token = eatTokensUntilEOL(nodeInfo);
token = eatTokensUntilEOL();  else  char bcopy(token, sizeof(token));
token = eatTokensUntilEOL((JSTypeInfo*)token);
token = EOL_EATTOkensUntilEOL();
token = eatTokensUntilEOL(nodeType);
token = eatTokensUntilEOL(jsdocBuilder.RemoveFlags(token));
token = eatTokensUntilEOL(refreshStatus);
token = eatTokensUntilEOL(false);
token = eatTokensUntilEOL((void *)&token);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC)  parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno);  else  if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC)  parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = EOP_EOL();
token = eatTokensUntilEOL((char *) &token);
token = eatTokensUntilEOL("msg.bad.jsdoc.tag");
token = eatTokensUntilEOL("nsTag");
token = eatTokensUntilEOL(EOC_REFERENCE);
token = eatTokensUntilEOL(prevToken);
token = eatTokensUntilEOL("No tokens");
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC)  jsdocBuilder.recordBlockDescription(blockInfo.string);   else  token = eatTokensUntilEOL();
token = eatTokensUntilEOL(ctrlr);
token = eatTokensUntilEOL(eHTMLParser);
token = eatTokensUntilEOL(blockInfo.string);
token = eatTokensUntilEOL(aType);
token = eatTokensUntilEOL(eEmpty);
token = eatTokensUntilEOL(result);
token = eatTokensUntilEOL(ioT);
token = eatTokensUntilEOL(EOS);
token = eatTokensUntilEOL(separator);
token = eatTokensUntilEOL("EOC");
token = eatTokensUntilEOL(nsCaseInsensitiveString());
token = eatTokensUntilEOL("no token");
token = eatTokensUntilEOL(jsdocToken);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); <<else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); <&else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); &&else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); &&else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); &&else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); <&else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); <else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); <else <char bcopy(token, sizeof(token));
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); &else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); <&else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); <<else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); &<else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); &&else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); <&else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); &else char bcopy(token, sizeof(token));
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); &<else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); &<else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); <<else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); &else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); &<else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); else &char bcopy(token, sizeof(token));
token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); <else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); <else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); &<else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); <&else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); <<else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); &else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); <else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); &&else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); <else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); &else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); &<else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); <else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); <&else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); &else <char bcopy(token, sizeof(token));
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); &else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); <&else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); <else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); &<else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); <<else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); &else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); <<else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); &&else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); <<else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); &else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); &<else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); <&else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); &else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); <else char bcopy(token, sizeof(token));
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); &&else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); else char bcopy(token, sizeof(token));
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); &<else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); else <char bcopy(token, sizeof(token));
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); <else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); &&else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); <<else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); &else &char bcopy(token, sizeof(token));
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <jsdocBuilder.recordBlockDescription(blockInfo.string); &&else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); <else &char bcopy(token, sizeof(token));
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else &if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); <else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) jsdocBuilder.recordBlockDescription(blockInfo.string); <&else token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) &parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); <else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); &else &token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) &jsdocBuilder.recordBlockDescription(blockInfo.string); <<else <token = eatTokensUntilEOL();
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); else <if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
token = eatTokensUntilEOL(); if (token!= ANNOTATION && token!= JsDocToken.EOC) <parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); &else if (token!= JsDocToken.ANNOTATION && token!= JsDocToken.EOC) parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.markAnnotation(annotationName, lineno, charno); return jsdocBuilder.recordBlockDescription(blockInfo.string);
