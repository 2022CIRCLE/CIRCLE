golden:
public JSType getLeastSupertype(JSType that) { if (!that.isRecordType()) { return super.getLeastSupertype(that); } RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); }
inference:
public JSType getLeastSupertype()  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
getLeastSupertype()
public JSType getLeastSupertype()  return super.getLeastSupertype();
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
virtual JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
JSType getLeastSupertype()
private JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that )  return super.getLeastSupertype( that );
public JSType getLeastSupertype()  return super.getLeastSupertype( that );
public JSType getLeastSupertype()  return super.getLeastSupertype(this);
getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);
public inline JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype( that );
public void getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(this);
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype (JSType that)  return super.getLeastSupertype (that);
public JSType getLeastSupertype()  return new RecordTypeBuilder(registry);
inline JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype()  return builder.build();
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void)  return super.getLeastSupertype(void);
static JSType getLeastSupertype()  return super.getLeastSupertype(that);
public JSType getLeastSupertype()  return super.getLeastSupertype(getter_AddRefs(that));
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
virtual JSType getLeastSupertype()  return super.getLeastSupertype(that);
NS_IMETHOD getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that )  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() )  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
public JSType getLeastSupertype(JSType that)  for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return getLeastSupertype(that);
static inline JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
NS_IMETHOD GetLeastSupertype(JSType that)  return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype()  return getLeastSupertype();
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
public static JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));  return builder.build();
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype()  return super.getLeastSupertype(registry);
JSType getLeastSupertype()  return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);
public JSType getLeastSupertype()  return this;
public JSType getLeastSupertype()
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));  return builder.build();
static JSType getLeastSupertype(JSType that)  return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
private JSType getLeastSupertype()  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  return builder.build();
public JSType getLeastSupertype( JSType that )  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
public JSType getLeastSupertype()  return getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(getter_AddRefs(that));
public JSType getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype()  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype()  if (!that.isRecordType()) return super.getLeastSupertype(that);
inline JSType getLeastSupertype()
public JSType getLeastSupertype() const  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that )  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that)  return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsType that)  return super.getLeastSupertype(jsType);
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype( that );
virtual JSType getLeastSupertype(JSType that)  return super.getLeastSupertype( that );
public JSType getLeastSupertype()  return super.getLeastSupertype(*this);
public inline JSType getLeastSupertype()  return super.getLeastSupertype(that);
public JSType getLeastSupertype()  if (!that.isRecordType())  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return this;
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that)  for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that) const  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype((JSType)that);
static JSType getLeastSupertype()
public void getLeastSupertype()  return super.getLeastSupertype(that);
public JSType getLeastSupertype()  return NS_OK;
public JSType getLeastSupertype()  for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
static const JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);
public JSType getLeastSupertype(String property)  return super.getLeastSupertype(property);
virtual JSType getLeastSupertype()
JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype()  return super;
static JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(this);
public void getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(this);
public JSType getLeastSupertype()  return it;
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder;
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype((JSType) that);
JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry);
virtual JSType getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super(getLeastSupertype(that));
static JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype()  return builder.build();
public JSType getLeastSupertype()  return getLeastSupertype(this);
static JSType getLeastSupertype()  return super.getLeastSupertype();
JSType getLeastSupertype( JSType that )  return super.getLeastSupertype( that );
private JSType getLeastSupertype(JSType that)  return super.getLeastSupertype( that );
public JSType getLeastSupertype()  return that.isRecordType();
public JSType getLeastSupertype()  return super.getLeastSupertype(null);
public JSType getLeastSupertype() return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that)  return getLeastSupertype(that);
public JSType getLeastSupertype()  return that;
public JSType getLeastSupertype(void)  return super.getLeastSupertype(that);
virtual JSType getLeastSupertype()  return super.getLeastSupertype( that );
public JSType getLeastSupertype()  if (! that.isRecordType()) return super.getLeastSupertype( that );
private void getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that )  if ( that.isRecordType() ) return super.getLeastSupertype( that );
JSType getLeastSupertype (JSType that)  return super.getLeastSupertype (that);
private JSType getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype( that );
getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that);
void getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype( that);
JSType* getLeastSupertype()
static void getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that)  return getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype()  return super.getLeastSupertype(record);
static JSType getLeastSupertype()  return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that)  return that.getLeastSupertype();
virtual void getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that.get());
virtual inline JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
private inline JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that )  return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype((JSType*) that);
GetLeastSupertype()
JSType getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype((JSType*)that);

JSType that;
public JSType getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype()  return JSType(that, &result);
public JSType getLeastSupertype()  if (! that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype()  return! that.isRecordType()? super.getLeastSupertype(that) : null;
JSType getLeastSupertype(JSType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype()  return super.getLeastSupertype((JSType) that);
JSType getLeastSupertype(JSType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSRuntime* aDragonFunc, JSType aProperty)  if (aProperty == JSType.get())  builder.addProperty(aProperty, getPropertyType(aProperty), getPropertyNode(aProperty)); return builder.build();
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype()  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
static inline JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
public JSType getLeastSupertype(JSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
static JSType getLeastSupertype(JSType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
static JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
public JSType getLeastSupertype()  return super.getLeastSupertype(getter_AddRefs(real_node));
public JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that)  if (! that.isRecordType()) return super.getLeastSupertype(aPrefix);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
static JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
static JSType getLeastSupertype(JSType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSSType that)  if (! that.isRecordType()) return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
public JSType getLeastSupertype()  if (! that.isRecordType())  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG)  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
JSType getLeastSupertype(JSFuncType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
public JSType getLeastSupertype(nsJSType that)  return super.getLeastSupertype(nsJSType(that));
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
public JSType getLeastSupertype( JSType that )  if ( that.isRecordType() )  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() )  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(void)  if (! that.isRecordType()) return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSSType that)  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(JSType that)  if (! that.isRecordType()) return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype( JSType that )  if (! that.isRecordType() )  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() )  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build( );
static inline JSType getLeastSupertype()  return super.getLeastSupertype( that );
public JSType getLeastSupertype(void)  if (!that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype()  if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build();
static JSType getLeastSupertype(JSType that)  return super.getLeastSupertype(that);  static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
JSType getLeastSupertype(JSHashEntry* entry)  return super.getLeastSupertype(entry);
JSType getLeastSupertype(JSType that)  if (! that.isRecordType())  return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
JSType getLeastSupertype(JSMSG_PRUint32_TYPE_IS_EMPTY)  return builder.build(this);
public JSType getLeastSupertype(nsJSType that)  return super.getLeastSupertype(nsJSType);
public JSType getLeastSupertype( JSType that )  if ( that.isRecordType() )  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() )  if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build( );
public JSType getLeastSupertype(jsap)  if (! that.isRecordType()) return super.getLeastSupertype(jsap);
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that)  if (! that.isRecordType()) return super.getLeastSupertype(that);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty)  if (! that.isRecordType())  return super.getLeastSupertype(nsIScriptGlobalObject);  RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(jstype* jstype)  return super.getLeastSupertype(jstype);
public JSType getLeastSupertype(jtype type)  return super.getLeastSupertype(jtype);
public JSType getLeastSupertype( JSType that )  if ( that.isRecordType( ) )  return super.getLeastSupertype( that );  RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) )  if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) )  builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );   return builder.build( );
public JSType getLeastSupertype(jstype *p)  JSType *p = that.isRecordType(); return JSType(p, &p);
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty)  if (!aProperty.isRecordType())  return super.getLeastSupertype(aContent);  RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
static inline JSType getLeastSupertype()  if (! that.isRecordType()) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSSType that)  if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet())  if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property)))  builder.addProperty(property, getPropertyType(property), getPropertyNode(property));   return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype((JSType)that);
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype() <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <<return builder.build();
public JSType getLeastSupertype(JSType that) return getLeastSupertype(that);
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype((JSType) that);
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype (JSType that) return super.getLeastSupertype (that);
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
NS_IMETHOD GetLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public void getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype() for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(getter_AddRefs(that));
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype (JSType that) return super.getLeastSupertype (that);
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return super.getLeastSupertype((JSType) that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return new RecordTypeBuilder(registry);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype()
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return it;
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jstype* jstype) return super.getLeastSupertype(jstype);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
NS_IMETHOD getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return! that.isRecordType()? super.getLeastSupertype(that) : null;
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype((JSType)that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
inline JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) const return super.getLeastSupertype(that);
public JSType getLeastSupertype(void) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype() return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
virtual JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype( that );
public JSType getLeastSupertype() <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSRuntime* aDragonFunc, JSType aProperty) &if (aProperty == JSType.get()) &builder.addProperty(aProperty, getPropertyType(aProperty), getPropertyNode(aProperty)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return getLeastSupertype();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &&return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(registry);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return that.getLeastSupertype();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype((JSType)that);
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return that.isRecordType();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype() <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
void getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(getter_AddRefs(that));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &<return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) <return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public void getLeastSupertype() return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static const JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype() return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
NS_IMETHOD GetLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype((JSType) that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(getter_AddRefs(that));
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSRuntime* aDragonFunc, JSType aProperty) <if (aProperty == JSType.get()) <builder.addProperty(aProperty, getPropertyType(aProperty), getPropertyNode(aProperty)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype() &return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(void) &return super.getLeastSupertype(void);
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
virtual void getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private void getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &<return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(this);
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(void) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
getLeastSupertype(JSType that) return super.getLeastSupertype(that);
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <&return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype( that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
inline JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public inline JSType getLeastSupertype() &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype() return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
static JSType getLeastSupertype() return super.getLeastSupertype();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(record);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
NS_IMETHOD GetLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public void getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &&return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return new RecordTypeBuilder(registry);
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype( that );
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static void getLeastSupertype(JSType that) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSMSG_PRUint32_TYPE_IS_EMPTY) &return builder.build(this);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return that.isRecordType();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <return super.getLeastSupertype(void);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype() <return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsJSType that) return super.getLeastSupertype(nsJSType(that));
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry);
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
virtual JSType getLeastSupertype(JSType that) &return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
NS_IMETHOD getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that );
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype((JSType*) that);
public JSType getLeastSupertype(void) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype() &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
virtual JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &return super.getLeastSupertype(registry);
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype((JSType*) that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype() return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(getter_AddRefs(that));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype((JSType*) that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsap) if (! that.isRecordType()) return super.getLeastSupertype(jsap);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype() return super.getLeastSupertype(that);
virtual inline JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that ) return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return getLeastSupertype();
public JSType getLeastSupertype() &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return that;
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(void) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
inline JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype() <if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsap) &if (! that.isRecordType()) return super.getLeastSupertype(jsap);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(getter_AddRefs(that));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
virtual JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that ) <return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &<return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype((JSType*) that);
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(getter_AddRefs(that));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that );
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(String property) <return super.getLeastSupertype(property);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(void) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype( that );
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype() return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &return super.getLeastSupertype(that);
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &<return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
virtual JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() <return getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &&return builder.build();
public static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype((JSType*) that);
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype() <return super.getLeastSupertype();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype((JSType) that);
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(this);
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
NS_IMETHOD GetLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
static inline JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <return getLeastSupertype(this);
public JSType getLeastSupertype() <return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <<return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() return super.getLeastSupertype( that );
private JSType getLeastSupertype() &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
private JSType getLeastSupertype() <return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype() &return getLeastSupertype(this);
NS_IMETHOD GetLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <<return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(String property) <return super.getLeastSupertype(property);
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return new RecordTypeBuilder(registry);
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(String property) &return super.getLeastSupertype(property);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsJSType that) <return super.getLeastSupertype(nsJSType(that));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsType that) return super.getLeastSupertype(jsType);
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
inline JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) const <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype() if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
NS_IMETHOD getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return that;
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(String property) &return super.getLeastSupertype(property);
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
virtual JSType getLeastSupertype() return super.getLeastSupertype(that);
public JSType getLeastSupertype() &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype() &return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(void) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
private JSType getLeastSupertype(JSType that) &return super.getLeastSupertype( that );
public JSType getLeastSupertype() &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSHashEntry* entry) <return super.getLeastSupertype(entry);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSRuntime* aDragonFunc, JSType aProperty) &if (aProperty == JSType.get()) <builder.addProperty(aProperty, getPropertyType(aProperty), getPropertyNode(aProperty)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that );
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super;
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype (JSType that) &return super.getLeastSupertype (that);
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return this;
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsap) <if (! that.isRecordType()) return super.getLeastSupertype(jsap);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(String property) return super.getLeastSupertype(property);
public JSType getLeastSupertype(void) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSMSG_PRUint32_TYPE_IS_EMPTY) <return builder.build(this);
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(void) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public void getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return that.getLeastSupertype();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsJSType that) return super.getLeastSupertype(nsJSType);
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) const &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that.get());
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jstype* jstype) &return super.getLeastSupertype(jstype);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return JSType(that, &result);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype() &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
virtual JSType getLeastSupertype(JSType that) <return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <&return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype() return super.getLeastSupertype(getter_AddRefs(real_node));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(void) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return this;
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public void getLeastSupertype(JSType that) return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual void getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public inline JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(void) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &return super.getLeastSupertype(*this);
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return that.getLeastSupertype();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public void getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry);
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) return super.getLeastSupertype(void);
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
NS_IMETHOD getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype((JSType)that);
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that );
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSRuntime* aDragonFunc, JSType aProperty) if (aProperty == JSType.get()) <builder.addProperty(aProperty, getPropertyType(aProperty), getPropertyNode(aProperty)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <&return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return JSType(that, &result);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype() &return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public inline JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jtype type) <return super.getLeastSupertype(jtype);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype((JSType) that);
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsType that) <return super.getLeastSupertype(jsType);
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return getLeastSupertype(that);
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype() return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jtype type) &return super.getLeastSupertype(jtype);
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &&return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) &return new RecordTypeBuilder(registry);
public JSType getLeastSupertype() <return super.getLeastSupertype(*this);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype((JSType)that);
public JSType getLeastSupertype() &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return that;
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return this;
public JSType getLeastSupertype() return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype() &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(getter_AddRefs(that));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype() if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <<return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(registry);
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() return super.getLeastSupertype(getter_AddRefs(that));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <&return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public inline JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &&return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <<return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype(JSType that) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype() &return super.getLeastSupertype();
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jstype *p) JSType *p = that.isRecordType(); return JSType(p, &p);
public JSType getLeastSupertype(JSType that) return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(jstype *p) &JSType *p = that.isRecordType(); return JSType(p, &p);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that );
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(record);
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &return getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype( that );
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public void getLeastSupertype() <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
private JSType getLeastSupertype(JSType that) <return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype (JSType that) <return super.getLeastSupertype (that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() return! that.isRecordType()? super.getLeastSupertype(that) : null;
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype() &return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(getter_AddRefs(that));
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <&return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that);
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype() <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that.get());
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <return getLeastSupertype(that);
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual inline JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype() &return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &<return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsJSType that) &return super.getLeastSupertype(nsJSType);
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype() return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype() &return super.getLeastSupertype( that );
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
NS_IMETHOD getLeastSupertype(JSType that) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSMSG_PRUint32_TYPE_IS_EMPTY) return builder.build(this);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return this;
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype( that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype() &return super;
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that );
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public inline JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public void getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &&return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private inline JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <&return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() const return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual void getLeastSupertype(JSType that) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype((JSType) that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype (JSType that) &return super.getLeastSupertype (that);
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry);
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(record);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(void) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static const JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public inline JSType getLeastSupertype() <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return NS_OK;
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that );
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
private JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
NS_IMETHOD GetLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype() &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return getLeastSupertype();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() return JSType(that, &result);
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype (JSType that) <return super.getLeastSupertype (that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jstype *p) <JSType *p = that.isRecordType(); return JSType(p, &p);
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSHashEntry* entry) &return super.getLeastSupertype(entry);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return that.isRecordType();
public JSType getLeastSupertype() <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(getter_AddRefs(that));
private void getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSRuntime* aDragonFunc, JSType aProperty) <if (aProperty == JSType.get()) builder.addProperty(aProperty, getPropertyType(aProperty), getPropertyNode(aProperty)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype() &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSRuntime* aDragonFunc, JSType aProperty) &if (aProperty == JSType.get()) builder.addProperty(aProperty, getPropertyType(aProperty), getPropertyNode(aProperty)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(null);
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &return super.getLeastSupertype(void);
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype() return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(getter_AddRefs(that));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public inline JSType getLeastSupertype() return super.getLeastSupertype(that);
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
NS_IMETHOD getLeastSupertype(JSType that) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <<return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <<return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
inline JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(void) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return new RecordTypeBuilder(registry);
private JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype((JSType*)that);
public JSType getLeastSupertype(void) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &return super.getLeastSupertype(null);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(void) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return super.getLeastSupertype(getter_AddRefs(real_node));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsType that) &return super.getLeastSupertype(jsType);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsType that) &return super.getLeastSupertype(jsType);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that.get());
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype() return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
virtual JSType getLeastSupertype() &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return it;
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public void getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(null);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(String property) return super.getLeastSupertype(property);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype() return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super(getLeastSupertype(that));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jtype type) return super.getLeastSupertype(jtype);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private inline JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() return this;
public JSType getLeastSupertype() <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSRuntime* aDragonFunc, JSType aProperty) if (aProperty == JSType.get()) builder.addProperty(aProperty, getPropertyType(aProperty), getPropertyNode(aProperty)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype((JSType)that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return it;
public JSType getLeastSupertype() <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype() <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) return new RecordTypeBuilder(registry);
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return getLeastSupertype(that);
public JSType getLeastSupertype(nsJSType that) &return super.getLeastSupertype(nsJSType(that));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(getter_AddRefs(that));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(getter_AddRefs(real_node));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public void getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
virtual inline JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &&return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype((JSType*)that);
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return this;
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that );
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <&return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super(getLeastSupertype(that));
public JSType getLeastSupertype(JSType that) <return getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(*this);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(jstype* jstype) <return super.getLeastSupertype(jstype);
JSType getLeastSupertype (JSType that) <return super.getLeastSupertype (that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that ) &return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry);
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &&return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super(getLeastSupertype(that));
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype() <return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <<return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry);
public JSType getLeastSupertype() return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype((JSType) that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &<return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public inline JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &<return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype() &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &<return builder.build();
public JSType getLeastSupertype() return NS_OK;
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() &return super.getLeastSupertype();
public JSType getLeastSupertype() return getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
void getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype((JSType) that);
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static void getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype() <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSRuntime* aDragonFunc, JSType aProperty) <if (aProperty == JSType.get()) &builder.addProperty(aProperty, getPropertyType(aProperty), getPropertyNode(aProperty)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype() <return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(this);
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <return new RecordTypeBuilder(registry);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return! that.isRecordType()? super.getLeastSupertype(that) : null;
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(nsJSType that) <return super.getLeastSupertype(nsJSType);
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &&return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
private JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
inline JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
virtual JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) &if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) &return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype() return super.getLeastSupertype(that);
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(this);
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <<return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public void getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype (JSType that) return super.getLeastSupertype (that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that);
public JSType getLeastSupertype() <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype (JSType that) &return super.getLeastSupertype (that);
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(void) return super.getLeastSupertype(void);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private JSType getLeastSupertype(JSType that) return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() const &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <&return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype() <return super.getLeastSupertype( that );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype() return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
virtual JSType getLeastSupertype() <return super.getLeastSupertype(that);
public JSType getLeastSupertype() for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() <return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() return super.getLeastSupertype();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSFuncType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSRuntime* aDragonFunc, JSType aProperty) if (aProperty == JSType.get()) &builder.addProperty(aProperty, getPropertyType(aProperty), getPropertyNode(aProperty)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) if (! that.isRecordType()) return super.getLeastSupertype(nsIScriptGlobalObject); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype((JSType*)that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); return new RecordTypeBuilder(registry);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return getLeastSupertype(that);
static inline JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that );
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <&return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <return super.getLeastSupertype();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static const JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSHashEntry* entry) return super.getLeastSupertype(entry);
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIScriptGlobalObject *aProperty) <if (! that.isRecordType()) <return super.getLeastSupertype(nsIScriptGlobalObject); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsType that) return super.getLeastSupertype(jsType);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); &RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that);
static void getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) <return super.getLeastSupertype(aContent); RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() <return super;
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &return NS_OK;
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype((JSType*) that);
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype( that);
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsType that) <return super.getLeastSupertype(jsType);
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
static inline JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) <if (!aProperty.isRecordType()) return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) &if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(void) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if (! that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSMSG & JSSMSG) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) <if (!that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
void getLeastSupertype(JSType that) return super.getLeastSupertype(that);
public JSType getLeastSupertype() &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public void getLeastSupertype() &return super.getLeastSupertype(that);
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property)) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSMSG & JSSMSG) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype() &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() &return super.getLeastSupertype((JSType) that);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) &if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(jsPlaceholderContext* aContext, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (! that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); <return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype( that );
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(void) <return super.getLeastSupertype(void);
JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) <if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (!that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(void) &if (! that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSFuncType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(void) <if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public inline JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType( ) ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet( ) ) if ( that.toMaybeRecordType( ).hasProperty( property ) && that.toMaybeRecordType( ).getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); &<return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <static inline JSType builder; JSType builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() const <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSSupports* aPrefix, JSType that) &if (! that.isRecordType()) return super.getLeastSupertype(aPrefix); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(nsIStyledContent* aContent, JSType aProperty) &if (!aProperty.isRecordType()) &return super.getLeastSupertype(aContent); <RecordTypeBuilder builder = new RecordTypeBuilder(aContent); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) <return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private void getLeastSupertype(JSType that) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) <builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <if (!that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() if (! that.isRecordType()) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
static inline JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that);
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
private inline JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that);
JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype( JSType that ) <if (! that.isRecordType() ) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) return super.getLeastSupertype(this);
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) if (! that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) &builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) &return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder(registry ); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); <return builder.build();
public JSType getLeastSupertype( JSType that ) <if ( that.isRecordType() ) &return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype() <for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) return super.getLeastSupertype( that ); &RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
static JSType getLeastSupertype(JSType that) if (!that.isRecordType()) &return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (! that.isRecordType()) <return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder;
public JSType getLeastSupertype(JSType that) &for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); &return builder.build();
public JSType getLeastSupertype(JSSType that) if (! that.isRecordType()) return super.getLeastSupertype(that); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
JSType getLeastSupertype(JSType that) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) <builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype(JSType that) if (! that.isRecordType()) <return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) <if (!that.isRecordType()) return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
static JSType getLeastSupertype(JSType that) <return super.getLeastSupertype( that );
public JSType getLeastSupertype(JSType that) <return super.getLeastSupertype(that); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype() <if (! that.isRecordType()) &return super.getLeastSupertype(that); <RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) &if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); return builder.build();
public JSType getLeastSupertype(JSType that) &if (! that.isRecordType()) return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
public JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if ( that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) &builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
public JSType getLeastSupertype( JSType that ) &if ( that.isRecordType() ) <return super.getLeastSupertype( that ); <RecordTypeBuilder builder = new RecordTypeBuilder( ); for (String property : properties.keySet() ) &if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build( );
JSType getLeastSupertype(JSType that) &return super.getLeastSupertype(that); &RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) <if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
static JSType getLeastSupertype(JSType that) if (! that.isRecordType()) return super.getLeastSupertype( that ); RecordTypeBuilder builder = new RecordTypeBuilder( registry ); for (String property : properties.keySet()) if ( that.toMaybeRecordType().hasProperty( property ) && that.toMaybeRecordType().getPropertyType( property ).isEquivalentTo( getPropertyType( property ) ) ) builder.addProperty( property, getPropertyType( property ), getPropertyNode( property ) ); return builder.build();
