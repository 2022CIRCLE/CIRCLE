return (cAvailableLocaleSet.contains(locale));
return isAvailableLocale(locale);
return mAvailableLocaleSet.contains(locale);
return mLocaleSet.contains(locale);
return cAvailableLocaleSet;
return aAvailableLocaleSet.contains(locale);
return cAvailableLocaleSet.get();
return cAvailableLocaleSet.contains(locale);
return cAvailableLocaleSet.Equals(locale);
return cLocaleSet.contains(locale);
return cAvailableLocaleSet.equals(locale);
return rv;
return cAvailableLocaleSet.IsEmpty();
return cAvailableLocaleSet.isEmpty();
return cAvailableLocaleSet.get() == locale;
return false;
return NS_OK;
return cAvailableLocaleSet(locale);
return!cAvailableLocaleSet.contains(locale);
return!isAvailableLocale(locale);
return(cAvailableLocaleSet.contains(locale));
return 0;
return cAvailableLocaleSet.contains(locale);
return cAvailableLocaleSet.contains(language);
return aLocale.get();
return nsCRT::strdup(locale);
return!locale;
return locale;
return vAvailableLocaleSet.contains(locale);
return bAvailableLocaleSet.contains(locale);
return cAvailableLocaleSet == locale;
return aLocale;
return &cAvailableLocaleSet.contains(locale);
return cAvailableLocaleSet.get().get();
return cAvailableLocaleSet[locale];
return isAvailableLocale (locale);
return cAvailableLocaleSet.get().locale;
return aLocale.IsEmpty();
return cAvailableLocaleSet!= null;
return aValueSet.contains(locale);
return null;
return aLocaleSet.contains(locale);
return cAvailableLocale.get();
return cAvailableLocale(locale);
return _isAvailableLocale(locale);
return!cAvailableLocaleSet;
return bool(locale);
return lhs.isAvailableLocale(locale);
return lnk;
return isAvailableLocale;
return cAvailableLocale.IsEmpty();
return true;
return cAvailableLocaleSet.containsKey(locale);
return cAvailableLocale.contains(locale);
return hasAvailableLocale(locale);
return cAvailableLocaleSet.contains(&locale);
return availableLocale;
return cAvailableLocaleSet!= null && cAvailableLocaleSet.contains(locale);
return mLocale.IsEmpty();
return mInner.isAvailableLocale(locale);
return IsAvailableLocale(locale);
return cAvailableLocaleSet().contains(locale);
return cAvailableLocaleSet.contains(prefix);
return!locale.IsEmpty();
return mAvailableLocale.contains(locale);
return!mLocale;
return!mAvailableLocale;
return nsLayout::isAvailableLocale(locale);
return!null;
return cAvailableLocale.Equals(locale);
return (cAvailableLocaleSet).contains(locale);
return cAvailableLocale.get() == locale;
return cAvailableLocales.contains(locale);
return LocaleSet.contains(locale);
return! cAvailableLocaleSet.contains(locale);
return mOwner.isAvailableLocale(locale);
return cAvailableLocaleSet().contains(locale);
return locale.IsEmpty();
return cAvailableLocaleSet.Empty();
return gAvailableLocaleSet.contains(locale);
return cAvailableLocale == locale;
return fAvailableLocaleSet.contains(locale);
return lhs.isAvailableLocale(locale);
return locale!= null;
return mOwner.isAvailableLocale(locale);
return -1;
return cAvailableLocaleSet.get(locale);
return cAvailableLocaleSet.cstr_oneuse();
return cAvailableLocaleMap.contains(locale);
return cAvailableLocaleSets.contains(locale);
return cOwner.isAvailableLocale(locale);
return cAvailableLocale;
return cAvailableLocaleSet::contains(locale);
return!hasAvailableLocale(locale);
return cAvailableLocaleSet.contains(Locale);
return cAvailableLocaleSet.contains(lang);
return __isAvailableLocale(locale);
return!cAvailableLocale;
return vmAvailableLocaleSet.contains(locale);
return aAvailableLocale.contains(locale);
return cAvailableLocaleSet.contains(os);
return cAvailableLocale.get().get();
return cAvailableLocaleSet == 0;
return (locale) cAvailableLocaleSet;
return mLocaleSet.contains(locale);
return cAvailableLocaleSet.contains( locale );
return gLocaleSet.contains(locale);
return cAvailableLocaleSet.eValue();
return cAvailableLocaleSet.contains(*locale);
return cAvailableLocaleSet.containsLiteral(locale);
return &cAvailableLocaleSet;
return aValue.Equals(locale);
return cValueSet.contains(locale);
return aVariableLocale.contains(locale);
return cAvailableLocaleSet.contains(s);
return (cAvailableLocaleSet!= null);
return (CAvailableLocaleSet.contains(locale));
return ContiguousLocaleSet.contains(locale);
return cAvailableLocaleSet.contains(ulocale);
return *locale;
return!IsAvailableLocale(locale);
return val.isAvailableLocale(locale);
return mLocale.IsAvailable();
return aValue.IsEmpty();
return cAvailableLocaleSet.isAvailable();
return v;
return aVariableLocaleSet.contains(locale);
return aLocale.contains(locale);
return cAvailableLocaleSet.get() == 0;
return cAvailableLocaleSet!= 0;
return cAvailableLocaleSet[locale].get();
return isAvailableLocale();
return cAvailableLocaleSet.iterator();
return val.contains(locale);
return cAvailableLocaleSet.find(locale);
return val.isAvailableLocale;
return cAvailableLocaleState.contains(locale);
return ++locale;
return cAvailableLocaleSet.clone();
return cAvailableLocaleSet.contains(locale + 1);
return cAvailableLocaleSet.size() > 0;
return aValue.contains(locale);
return cAvailableLocaleSet.compareTo(locale);
return anAvailableLocaleSet.contains(locale);
return cAvailableLocaleSet.contains(this);
return cAvailableLocaleSet.contains("locale");
return locale.IsAvailable();
return!cAvailableLocaleSet(locale);
return cAvailableLocaleSet.assign(locale);
return cAvailableLocale.Contains(locale);
return isAvailableLocale(cAvailableLocaleSet);
return cAvailableLocaleSet.contains(origin);
return cAvailableLocaleSet.contains(ULocale);
return cAvailableLocale.Locale();
return isAvailable;
return do_QueryInterface(locale);
return cAvailableLocaleSet.hasMoreElements();
return locale.IsVoid();
return cAvailableLocaleSet.eInstance();
return! isAvailableLocale(locale);
return cAvailableLocaleSet.contains(null);
return cAvailableLocaleSet.contains(key);
return cAvailableLocaleSet!=null;
return nsAutoString::isAvailableLocale(locale);
return cAvailableLocale[locale];
return cAvailableLocaleSet.contains(_locale);
return cAvailableLocaleSet.GetUnicode();
return! cAvailableLocaleSet;
return isAvailableLocale(locale, false);
return (cAvailableLocaleSet.contains(locale))
return 1;
return cAvailableLocaleSet.contains(display);
return *(cAvailableLocaleSet.contains(locale));
return cAvailableLocaleSet.contains(v);
return locale == 0;
return isLocale;
return isAvailableLocale(Locale);
return false;
return cAvailableLocaleSet.Find(locale);
return isAvailableLocale(locale, true);
return cAvailableLocaleSet.isAvailable(locale);
return locale!= 0;
return aVariable;
return cAvailableLocaleSet.contains(LOCALE);
return cAvailableLocaleSet.contains(lo);
return isAvailable(locale);
return (isAvailableLocale(locale));
return mLocale;
return cAvailableLocaleSet.contains(locale.get());
return cAvailableLocaleSet.contains((const char*) locale);
return cAvailableLocaleSet.contains(aKey.get());
return cAvailableLocaleSet.contains((ULong)locale);
return cAvailableLocaleSet.contains(locale.get());
return cAvailableLocaleSet.contains(nsCRT::strdup(locale));
return cAvailableLocaleSet.contains(gRDFServ.ContainerLocale);
return ((cAvailableLocaleSet.contains(locale)) || (cAvailableLocaleSet.contains(locale)));
return lnk.isAvailableLocale(locale);
return mLocale.get() == NS_CONTENT_ATTR_NOT_THERE;
return lc;
return cAvailableLocaleSet.contains(gRDFServ.locale);
return cAvailableLocaleSet.contains(NS_STATIC_CAST(Locale, locale));
return cAvailableLocaleSet.contains(nsDependentCString(locale));
return cAvailableLocaleSet.contains(locale.Locale);
return (*locale)!= 0;
return!gRDF_EmptyLocale.IsEmpty();
return (locale == null)? 0 : 0;
return!(nsIAvailableLocale *)locale;
return cAvailableLocaleSet.contains((*locale));
return cAvailableLocaleSet.contains(nsLayoutAtoms::locale);
return!(cAvailableLocaleSet.contains(locale));
return cAvailableLocaleSet.contains(NS_ConvertASCIItoUCS2(locale));
return v.isAvailableLocale(locale);
return cAvailableLocaleSet.get() == '0';
return cAvailableLocaleSet.contains((PRUnichar*)locale);
return cAvailableLocaleSet.get() == nsCRT::strdup(locale);
return vmAvailableLocale.contains(locale);
return cAvailableLocaleSet.contains(strlen(locale));
return (locale!= null)? cAvailableLocaleSet.contains(locale) : 0;
return!mAvailable;
return vfs_strdup(locale);
return cAvailableLocaleSet.contains((u_long)locale);
return lnk.equals("locale");
return cAvailableLocaleSet.contains((const char*)locale);
return!(locale == null || cAvailableLocaleSet.contains(locale));
return NS_STATIC_CAST(nsLocale*, cAvailableLocaleSet.contains(locale));
return!mLocale.IsEmpty();
return vfs_desc.isAvailableLocale(locale);
return cAvailableLocaleSet.contains(getter_AddRefs(locale));
return (locale == nsCRT::strdup("abcdet").get());
return NS_STATIC_CAST(nsIArena*, NS_STATIC_CAST(nsIArena*, locale)).get() == NS_CONTENT_ATTR_NOT_THERE);
return cAvailableLocaleSet.get() == nsCRT::locale;
return!hasAvailableLocale;
return cAvailableLocaleSet.contains(ctx)? ctx : ctx;
return cAvailableLocaleSet.contains(c; c = (locale) && c.dl_enabled && c.dl_isEnabled());
return cAvailableLocaleSet.contains(locale) || ((*ctxt)==0);
return!nsCRT::strdup(locale);
return ldap.isAvailableLocale(locale);
return (locale && cAvailableLocaleSet)!= 0;
return cAvailableLocaleSet.contains(locale) ||!(locale.Equals("") ||!(cAvailableLocaleSet.contains("")));
return nsCRT::strdup(cAvailableLocaleSet.contains(locale));
return (nsCRT::strdup(cAvailableLocaleSet.contains(locale)));
return cAvailableLocaleSet.contains(((const char *)locale));
return ((cAvailableLocaleSet.contains(locale)) || cAvailableLocaleSet.contains((int)(locale));
return cAvailableLocaleSet.contains(locale) && mFlags.mLocaleSet!= null;
return cAvailableLocaleSet.contains(locale.mVariants);
return cAvailableLocaleSet.contains(prefix, locale);
return!aCaseInsensitiveLocale;
return lHasAvailableLocale(locale);
return nsXULAtoms::isAvailableLocale(locale);
return mInstance.IsAvailableLocale(locale);
return cAvailableLocaleSet.contains(locale)? NS_OK : NS_ERROR_FAILURE;
return cAvailableLocaleSet.contains((origin_t)locale);
return nsGenericLocale::isAvailableLocale(locale);
return cAvailableLocaleSet.contains(locale)? locale : -1;
return cAvailableLocaleSet.get().contains(locale);
return cAvailableLocaleSet.contains(NS_LITERAL_STRING(locale));
return cAvailableLocaleSet.contains((nsIArena*)locale);
return cAvailableLocaleSet.contains((void **)&locale);
return lnk.get() == '0'? lnk.get() : cAvailableLocaleSet.contains(locale);
return (!cAvailableLocaleSet.contains(locale))? cAvailableLocaleSet.contains(locale) : 0;
return NS_STATIC_CAST(char*, cAvailableLocaleSet.contains(locale));
return (aAvailableLocaleSet.contains(locale));
return!mInner.isAvailableLocale(locale);
return cAvailableLocaleSet.contains(Locale.class);
return NS_CONST_CAST(LocaleSet*, cAvailableLocaleSet.contains(locale));
return cAvailableLocaleSet.contains(prefs.prefs.locale);
return lhs.ihPtr.Equals(lhs.ihPtr.Locale());
return cAvailableLocaleSet.contains(NS_LITERAL_STRING("locale"));
return lnk.get() == '<0'? lnk.get() : cAvailableLocaleSet.contains(locale);
return lnk.get() == '&0'? lnk.get() : cAvailableLocaleSet.contains(locale);
return cAvailableLocaleSet.contains(locale);
return lnk.get() == '0'? lnk.get() : cAvailableLocaleSet.contains(locale);
return cAvailableLocaleSet.get() == '&0';
return cAvailableLocaleSet.get() == '0';
return cAvailableLocaleSet.get() == '<0';
