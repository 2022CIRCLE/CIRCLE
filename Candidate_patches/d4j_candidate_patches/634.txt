switch(ch){
switch (ch){
switch (ch  32){
switch (ch > 0xff){
switch (str){
switch ((unsigned char)ch){
switch (ch > 0){
switch (ch == '0'){
switch ((unsigned long)ch){
switch (ch  0){
switch ((char *)ch){
switch (ch == null){
switch (ch.charAt(i)){
switch (ch == 0){
switch (ch.ch){
switch (ch.charAt){
switch (ch > 0xfff){
switch ((int)ch){
switch (ch >= 0){
switch (ch.charAt(i)){
switch (ch.get()){
switch (!ch){
switch (ch.char){
switch (ch + 1){
if (ch){
switch (lch){
switch (ch - 1){
switch (char){
switch ((char)ch){
switch (ch!= '0'){
switch (ch > 0x7f){
switch (s){
switch (ch >= 0xff){
switch (ch > 32){
switch (*ch){
switch (ch >= 32){
switch ((unsigned char *)ch){
switch (ch == -1){
switch ((unsigned int)ch){
switch ((ch  32)){
switch (&ch){
switch (i){
switch (ch!= 0){
switch (ch.charAt(0)){
switch (ch + '0'){
switch ( ch ){
switch (ch && ch  32){
switch (c){
switch ((ch)){
switch (ch >> 32){
if (ch  32){
switch (ch);{
switch (r){
switch (ch > 0xffff){
switch (ch + 32){
switch (ch = 32){
switch (ch.charAt(0)){
/* switch (ch){
switch (escapeSingleQuote){
switch (unicode){
switch (t){
switch (out){
switch (ch.type){
switch ((unicode)ch){
switch (ch  16){
switch (ch--){
switch (ch!= null){
switch (l){
switch (ch)   else{
switch (__func__){
switch (ch > 0xf){
switch (ch.Length()){
switch ((unsigned char*)ch){
switch (v){
switch (unsigned char){
switch (ch  2){
switch (ch.len){
switch ((unsigned)ch){
switch ((caddr_t)ch){
switch ((void *)ch){
switch (result){
switch (ch && str){
switch (text){
switch (n){
switch (ch + sizeof(ch)){
switch (ch.len){
switch (ret){
if (ch)  switch (ch){
switch (ch || ch  32){
switch (ch == '''){
switch (ch > 0x7){
switch (str.get()){
switch (ch.charAt()){
switch (ch  1){
switch (ch++){
switch (string){
switch (ch[0]){
switch (int){
switch (b){
switch (mode){
switch (ch > 1){
switch (ch).charAt(i){
switch ((long)ch){
switch (strlen(ch)){
switch (ch > 16){
switch (h){
switch (fch){
switch (ch >= 0xfff){
switch ([ch]){
switch ('0'){
switch (u){
switch (ch.charAt()){
switch (ch + 16){
switch (ch  64){
switch((ch)){
switch (buf){
switch ((char*)ch){
switch ((u_char)ch){
switch (p){
char ch; switch (ch){
switch (ch + strlen(ch)){
switch (ch + 128){
switch (ch)  break;{
switch ((char **)ch){
switch (ch ){
switch (ch - ch){
switch (m){
switch (ch - 32){
switch (ch == ''){
switch (inch){
switch (ch  31){
switch (ch!= 32){
switch (ch.flags){
switch (void){
switch ((str)ch){
switch (ch.cstr()){
switch (ch &&!ch){
switch (f){
switch (type){
switch (ch> 0){
switch (res){
switch (aCh){
switch (y){
switch (code){
else  switch (ch){
switch (ch==null){
switch (ch == 'n'){
switch (ch!= -1){
switch (ch = 0){
switch ((ch = '0')){
switch (ch > 0x8f){
switch ((ch = ch)){
switch (line){
switch (ch, i){
switch (self.ch){
switch (ch.trim()){
switch (ch > 0x0){
switch (ch + ''){
switch (in){
switch (ch.name){
switch ((ch - 1)){
switch (ch & 0xff){
switch (ch >> 16){
switch (ch).charAt(0){
switch (ch==0){
switch (name){
switch (ch + len){
switch (ch) == 0{
switch (ch, 0){
switch (ch  sizeof(ch)){
switch (Ch){
switch(str){
switch (ch >= 0x7f){
switch (ch.value){
switch (length){
if (ch > 0xff){
switch (ch0){
else switch (ch){
switch (ch - str){
switch (unicodeCh){
switch ((ch - ch)){

s = ch; switch (s){
switch (inStr){
switch (ch  8){
if (ch == null){
/* switch (ch)  */{
switch (ch > 0x80){
switch (unicodeChar){
switch ((ch > 0xff)){
switch (ch > 0x00){
switch (ch > 0x0f){
switch (ch!= '''){
switch (ch > 0x07f){
switch (ch> 0xff){
if (ch == '0'){
switch (ch == 'r'){
switch (ch && (ch > 0xff)){
switch (ch)  char ch = str.charAt(i);{
switch ((ch & 0xff)){
switch ((ch >= 0)? ch : ch){
switch ((ch == '0') || (ch > 0x7f)){
switch (ch)  case '0': out.write('0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch > 0xfffff){
switch (ch && (sz  0)){
switch (ch)  /* XXX: need to encode an uint32 size */{
switch (ch && ch > 0xff){
switch (ch)  if (escapeSingleQuote)  out.write("""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch)  if (ch > 0xff)  out.write("u0" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch  32)  break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch ((ch == '0')? ch : '0'){
switch (ch)  /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff))  out.write("u0");  else if ((ch > 0x7f) && (ch > 0x7f))  out.write("u00");  else if (ch > 0x7f)  out.write("u00");  else if (ch  32)  break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch)  /* XXX: should not be */{
switch (ch)  case ''': if (escapeSingleQuote)  out.write(''); out.write(''); break; case ''': if (escapeSingleQuote)  out.write(''); out.write(''); out.write(''); break;  else  out.write(''); break;   else  switch (ch){
switch (ch)   else if (ch > 0xff)  out.write("u0" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch  32)  switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch)  if (ch > 0xff)  out.write("u0" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch  32)  switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch)  if (ch  32)  out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch)  if (escapeSingleQuote) out.write(''); break;{
switch (ch)  if (str!= '0')  out.write("u0");  else if (ch > 0xff)  out.write("u0" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00");  else if (ch  32)  switch (ch)  case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch && ch > 0x7f){
switch (ch)  /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff)  out.write("u");  else if (ch > 0xff)  out.write("u0" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch  32)  switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch && (unicodePtr)){
switch (ch)  case ''': if (escapeSingleQuote)  out.write(''); out.write(''); break; case ''': if (escapeSingleQuote)  out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote)  out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote)  out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch && str.charAt(i)){
switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch)  if (escapeSingleQuote) out.write('');{
switch (str.charAt(i)){
switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch)  /* The writer must not be null. */{
switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote)  out.write(''); out.write(''); out.write(''); break; case{
switch ((ch - 3){
switch (ch)  case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch)   else  switch (ch > 0xff)  out.write("u0" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch  32)  out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch)  case 'b': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch)  /* if (ch >= 0xff)  out.write("u0" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch  32)  out.write("u00" + hex(ch));  else if (ch  32)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch > 0x7f)  out.write("u00" + hex(ch));  else if (ch  32)  out.write("u00" +{
switch (ch)  if (escapeSingleQuote) out.write("u00"); else out.write("u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
<switch (ch){
switch (ch) if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch + len){
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("<u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &if (ch > 0xff) &out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case '&'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '<b': out.write('&'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &if (ch > 0xff) &out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch 32){
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &/* if (ch >= 0xff) &out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &if (ch > 0xff) out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &if (escapeSingleQuote) out.write("&u00"); else out.write("&u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("<u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch &16){
switch (ch) <if (ch 32) <out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &if (str!= '&0') &out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (ch > 0xff) &out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case ''': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '&'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) if (ch > 0xff) <out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case ''': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (escapeSingleQuote) out.write("u00"); else out.write("&u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case '&'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <&else{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("&u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch >= 0x7f){
switch (ch) <if (escapeSingleQuote) out.write("&""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("<u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch ((ch - 3){
switch (strlen(ch)){
switch (ch) &if (escapeSingleQuote) out.write("u00"); else out.write("u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("<u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <if (ch > 0xff) <out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch ((char **)ch){
switch (ch) &if (escapeSingleQuote) &out.write("&""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch!= '<0'){
switch (ch) <if (escapeSingleQuote) <out.write("""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) if (escapeSingleQuote) out.write('<');{
switch (type){
switch (ch) if (escapeSingleQuote) out.write("<u00"); else out.write("u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <if (escapeSingleQuote) out.write("<u00"); else out.write("&u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch ((unsigned long)ch){
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &if (str!= '<0') &out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) if (ch &32) &out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &case '<b': out.write('&'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &if (escapeSingleQuote) &out.write("<""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '0': out.write('0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <&else if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &if (ch <32) <out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (code){
switch (ch) <else if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <if (ch <32) <out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &&else <switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &&else <switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &else if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
s = ch; switch (s){
switch (ch) case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("&u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &if (str!= '<0') out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '0': out.write('0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <if (escapeSingleQuote) out.write("<u00"); else out.write("&u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (ch &32) out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch == '&r'){
switch (ch + '&0'){
switch (ch) if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch && ch &32){
switch (ch) case '<b': out.write(''); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case '&0': out.write('0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <case ''': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("<u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) if (ch <32) out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case 'b': out.write(''); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) /* if (ch >= 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("&u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <case ''': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &<else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch && (sz <0)){
switch (ch) case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &if (escapeSingleQuote) out.write("<u00"); else out.write("u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch.charAt(i)){
switch (ch) <if (escapeSingleQuote) out.write('<');{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &/* if (ch >= 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &<else if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("<u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &if (escapeSingleQuote) out.write("u00"); else out.write("u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (str!= '&0') <out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (str!= '&0') <out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("<u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <case ''': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch ((ch == '0')? ch : '<0'){
switch (str.get()){
switch (ch) <case '&b': out.write('<'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (f){
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &<else &switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case '0': out.write('0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &if (escapeSingleQuote) out.write("""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) if (ch &32) <out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) if (ch &32) <out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case '&'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <<else if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &if (str!= '0') &out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &<else if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &case '<0': out.write('&0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &<else <switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case 'b': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &if (escapeSingleQuote) out.write("&""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) if (ch > 0xff) <out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("<u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) </* XXX: should not be */{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch + 128){
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch == -1){
switch (ch) &case '<'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("&u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &else <switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '&b': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("<u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("<u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch!= null){
switch (ch sizeof(ch)){
switch (ch) <if (escapeSingleQuote) &out.write("<""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (escapeSingleQuote) <out.write("<""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <<else if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <if (escapeSingleQuote) out.write("&u00"); else out.write("<u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <<else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (ch > 0xff) <out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch.trim()){
switch (ch==null){
switch (ch) &case '<0': out.write('0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &if (escapeSingleQuote) &out.write("<""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <if (escapeSingleQuote) <out.write("<""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch.type){
switch (ch) case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) /* if (ch >= 0xff) &out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch > 0x7){
switch (ch) &case '&'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '&'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &case '&'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (v){
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &case '<'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("<u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &if (ch 32) <out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '<0': out.write('0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '0': out.write('&0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) if (ch > 0xff) &out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &&else &switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case '&'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch++){
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch == '<0'){
switch (ch) <case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch && ch > 0x7f){
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <if (ch > 0xff) <out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case '<'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <case ''': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <if (escapeSingleQuote) <out.write("""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <case '&b': out.write(''); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch > 0x00){
switch (ch) if (ch > 0xff) &out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case '&0': out.write('0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &&else if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch ((ch = '0')){
switch (ch) case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '0': out.write('<0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &if (ch > 0xff) &out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case 'b': out.write('&'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (unicodeChar){
switch (ch) if (escapeSingleQuote) &out.write("<""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '<'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case '<'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch.ch){
switch (ch) &case '<0': out.write('<0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("<u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch ((unsigned)ch){
switch (ch) <case '<'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) if (escapeSingleQuote) out.write('&'); break;{
switch (ch) if (ch > 0xff) &out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &if (escapeSingleQuote) <out.write("""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (ch <32) &out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch == 0){
switch (ch) <if (escapeSingleQuote) out.write(''); break;{
switch (ch) if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &if (ch &32) <out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &if (escapeSingleQuote) out.write(''); break;{
switch (ch) if (str!= '0') out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) /* if (ch >= 0xff) out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &/* if (ch >= 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <if (escapeSingleQuote) out.write("u00"); else out.write("u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case ''': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &if (str!= '&0') <out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("&u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) if (escapeSingleQuote) out.write("&u00"); else out.write("&u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch == '<'){
switch (ch) /* XXX: should not be */{
switch (ch) <if (ch > 0xff) &out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <if (escapeSingleQuote) out.write('');{
switch (ch) <if (escapeSingleQuote) out.write("<""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &<else{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("&u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <if (escapeSingleQuote) out.write("<u00"); else out.write("u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &if (escapeSingleQuote) &out.write("<""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch).charAt(i){
switch (ch) &if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) if (ch 32) &out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case '<0': out.write('&0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <if (ch > 0xff) out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch ((ch == '0')? ch : '0'){
switch (ch) <&else &switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <else if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &if (ch 32) out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &if (ch &32) &out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case ''': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <<else &switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '&b': out.write('&'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <if (escapeSingleQuote) out.write("&u00"); else out.write("&u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <if (ch > 0xff) <out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '&b': out.write('<'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <if (escapeSingleQuote) out.write("&u00"); else out.write("&u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) if (escapeSingleQuote) out.write("""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &/* if (ch >= 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case ''': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch ((ch - ch)){
switch (ch) <if (ch &32) <out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) if (escapeSingleQuote) &out.write("""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case ''': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch + ''){
switch (fch){
switch (ch &32){
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("&u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) if (ch > 0xff) out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("&u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '<'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) if (str!= '&0') &out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) case '&b': out.write(''); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) /* if (ch >= 0xff) &out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (length){
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch > 0xffff){
switch (ch + '0'){
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch 2){
switch (ch> 0){
switch (ch) &if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("&u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("<u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) else switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) </* if (ch >= 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (__func__){
switch (ch) <<else &switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("<u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch == 'r'){
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (s){
switch (ch) <<else if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <case '<0': out.write('<0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &if (ch <32) &out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <if (str!= '<0') &out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &<else &switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '<b': out.write('&'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <if (str!= '&0') &out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) if (str!= '&0') &out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) </* if (ch >= 0xff) out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch 0){
switch (ch) case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) if (escapeSingleQuote) out.write("&u00"); else out.write("u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '&b': out.write('<'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("&u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case 'b': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case 'b': out.write(''); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("<u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch, i){
switch (ch) &case ''': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <if (escapeSingleQuote) out.write("<u00"); else out.write("u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &if (escapeSingleQuote) out.write("&""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (y){
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case '<'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch ((unsigned char *)ch){
switch (ch) &case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &else &switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (escapeSingleQuote) out.write("&u00"); else out.write("<u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (ch <32) <out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &if (ch > 0xff) &out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) /* if (ch >= 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<0': out.write('&0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("&u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &if (escapeSingleQuote) out.write("u00"); else out.write("&u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch = 32){
switch (ch) &case '&'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch > 0x8f){
switch (ch) &else &switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case 'b': out.write('&'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <if (escapeSingleQuote) out.write("""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <&else if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <case '<'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case ''': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case '<'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &/* if (ch >= 0xff) &out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case '&b': out.write('&'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("&u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <if (escapeSingleQuote) out.write("u00"); else out.write("u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) if (ch <32) <out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) if (escapeSingleQuote) &out.write("&""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case '&0': out.write('<0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case '&0': out.write('0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case ''': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &if (str!= '&0') out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (escapeSingleQuote) <out.write("&""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (escapeSingleQuote) &out.write("""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ret){
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &if (ch <32) out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch || ch &32){
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) /* if (ch >= 0xff) <out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) </* if (ch >= 0xff) &out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <if (escapeSingleQuote) out.write('<'); break;{
switch (ch + 1){
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("&u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '&b': out.write(''); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <else &switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &&else if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &char ch = str.charAt(i);{
switch (ch == '0'){
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &case 'b': out.write('&'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch ((ch == '0')? ch : '&0'){
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("&u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case ''': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &case '&'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (u){
if (ch){
switch (ch <1){
if (ch) &switch (ch){
switch (ch) case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("&u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case ''': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch ){
switch (ch) <case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch ((ch - 1)){
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("&u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch >= 0xff){
switch (ch > 0xff){
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) </* if (ch >= 0xff) &out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("<u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("<u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch.charAt(i)){
switch (ch + '&'){
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '<0': out.write('<0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &if (escapeSingleQuote) &out.write("""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <if (ch <32) &out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &&else if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) </* if (ch >= 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &/* if (ch >= 0xff) out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case '<b': out.write('&'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case '&0': out.write('<0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &if (ch > 0xff) &out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch <0){
switch (ch) <if (escapeSingleQuote) out.write("""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (inStr){
switch (ch <= 0){
switch (ch) &case '<'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch || ch <32){
switch (ch) if (escapeSingleQuote) out.write("<u00"); else out.write("<u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) /* if (ch >= 0xff) out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &if (ch &32) out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &if (str!= '0') <out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '&0': out.write('0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) if (escapeSingleQuote) out.write("u00"); else out.write("<u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '<'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '&'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("&u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <if (escapeSingleQuote) &out.write("""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <if (str!= '0') <out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (escapeSingleQuote) <out.write("&""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (ch > 0xff) <out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("&u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &<else switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (ch > 0xff) <out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case ''': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch ((ch >= 0)? ch : ch){
switch (ch) &if (escapeSingleQuote) out.write('');{
switch (ch) &case '&'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '<'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) </* if (ch >= 0xff) &out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("&u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (str!= '0') &out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <if (escapeSingleQuote) out.write("u00"); else out.write("u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
&switch (ch){
switch (ch) <case '<'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <if (ch &32) <out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch.flags){
switch (ch) if (ch 32) out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("&u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <if (ch > 0xff) &out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <&else if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <case '<'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch(ch){
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &if (str!= '0') out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch &64){
switch (ch) /* if (ch >= 0xff) &out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '&'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) </* if (ch >= 0xff) out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) if (escapeSingleQuote) out.write("u00"); else out.write("<u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &&else if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch >= 32){
switch (ch + 16){
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch &= 32){
switch (ch) &if (ch <32) &out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <if (str!= '<0') <out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (escapeSingleQuote) out.write("&""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (ch 32) &out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch.len){
switch (ch) &if (ch 32) &out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &/* if (ch >= 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (i){
switch (ch) case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch ('0'){
switch (ch) case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (str!= '0') &out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &if (ch > 0xff) &out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("<u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <&else switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '0': out.write('&0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) </* if (ch >= 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("<u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case 'b': out.write('<'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch <= 32){
switch (text){
switch (ch) case '&b': out.write(''); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &if (escapeSingleQuote) out.write("&u00"); else out.write("<u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) /* if (ch >= 0xff) <out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (buf){
switch (ch) case '&'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (ch <32) <out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) if (escapeSingleQuote) <out.write("""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) if (escapeSingleQuote) out.write("u00"); else out.write("u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) /* if (ch >= 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) if (escapeSingleQuote) &out.write("""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <if (str!= '&0') <out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case 'b': out.write('<'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &if (escapeSingleQuote) out.write("<u00"); else out.write("<u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <&else if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (Ch){
switch (ch) </* if (ch >= 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case '<'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <case 'b': out.write('&'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case '<0': out.write('0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <if (escapeSingleQuote) out.write("&u00"); else out.write("u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <if (ch > 0xff) <out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) if (str!= '0') out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '&'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &<else switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <&else switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
if (ch > 0xff){
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) if (escapeSingleQuote) out.write("<""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (ch &32) out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch > 0xf){
switch (ch) <case 'b': out.write('<'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <case '&b': out.write('&'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &if (str!= '&0') &out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case '&'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '<'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) if (str!= '<0') out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("<u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &/* if (ch >= 0xff) out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case '&0': out.write('0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '&'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) /* if (ch >= 0xff) <out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '&0': out.write('0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) else &switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &if (escapeSingleQuote) out.write("<""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) case '<'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
if (ch == null){
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <if (escapeSingleQuote) out.write("u00"); else out.write("<u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case '<b': out.write('<'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("&u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case '<b': out.write('&'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) if (str!= '0') &out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '&'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch <16){
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '<b': out.write('&'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case '&'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (escapeSingleQuote) out.write("""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &if (escapeSingleQuote) out.write("""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) if (escapeSingleQuote) out.write("u00"); else out.write("u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (str!= '0') <out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '0': out.write('<0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (ch &32) out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &if (str!= '&0') &out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &case 'b': out.write(''); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &if (escapeSingleQuote) out.write("&u00"); else out.write("<u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch & 0xff){
switch (ch) if (ch > 0xff) out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '&'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &else if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) </* if (ch >= 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) else switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) case '&'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch!= '0'){
switch ((str)ch){
switch (ch) <&else <switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <<else <switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case 'b': out.write('&'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <case 'b': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <if (str!= '0') &out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("<u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &if (str!= '&0') out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
/* switch (ch) */{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case ''': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <if (escapeSingleQuote) &out.write("""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <if (ch <32) &out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <if (ch <32) out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case '&'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) if (ch &32) out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &/* if (ch >= 0xff) out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '<0': out.write('0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch!= '''){
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("<u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <if (str!= '0') <out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("<u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &if (ch > 0xff) out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <if (ch > 0xff) out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case '<'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case ''': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) if (ch 32) <out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case '<'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) char ch = str.charAt(i);{
switch (ch) <case '&0': out.write('&0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '<0': out.write('<0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case ''': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) if (ch > 0xff) out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) </* if (ch >= 0xff) <out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch.Length()){
switch (ch 8){
switch (ch) case '<0': out.write('<0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) if (str!= '<0') &out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) </* if (ch >= 0xff) out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch, 0){
switch (ch) <if (ch > 0xff) &out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (ch > 0xff) out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) if (str!= '<0') <out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '<b': out.write('<'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch <32){
switch (ch!= 0){
switch (ch) case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (line){
switch (ch) case '&'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case 'b': out.write('&'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) if (ch > 0xff) &out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("&u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <else{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case '<0': out.write('0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '0': out.write('&0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) if (str!= '&0') out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <&else <switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &/* XXX: need to encode an uint32 size */{
switch ((ch == '<0')? ch : '&0'){
switch (ch) <if (ch &32) <out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) if (escapeSingleQuote) out.write("u00"); else out.write("u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &if (str!= '<0') out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (str!= '<0') out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("<u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) if (escapeSingleQuote) <out.write("<""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (escapeSingleQuote) out.write("""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch.charAt()){
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("&u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <if (escapeSingleQuote) <out.write("&""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) if (escapeSingleQuote) &out.write("&""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch ((ch == '0') || (ch > 0x7f)){
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <if (ch 32) out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '&b': out.write('&'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '&'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &if (ch > 0xff) out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch ((ch <32)){
switch (ch) &if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch ((ch = '<0')){
switch (ch) case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<b': out.write(''); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("<u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("<u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &/* if (ch >= 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) if (escapeSingleQuote) out.write("u00"); else out.write("&u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <if (ch <32) <out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (ch <32) <out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("<u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (l){
switch (ch> 0xff){
switch (ch) <if (str!= '0') out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) if (escapeSingleQuote) out.write("&""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case ''': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) if (ch > 0xff) <out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &if (escapeSingleQuote) out.write("u00"); else out.write("&u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &if (ch > 0xff) out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &if (str!= '<0') out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch &2){
switch (ch >> 16){
switch (ch) &if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &if (escapeSingleQuote) &out.write("&""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &if (ch 32) out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (r){
switch (ch) &&else if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("<u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) if (ch <32) out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) /* XXX: need to encode an uint32 size */{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case '<'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <if (escapeSingleQuote) out.write("""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch && str){
/* switch (ch){
switch (ch) <case '&'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <if (ch > 0xff) &out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case '&b': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case '&0': out.write('0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <if (escapeSingleQuote) out.write("<""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (ch > 0xff) out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (&ch){
if (ch) <switch (ch){
switch (ch) <if (escapeSingleQuote) out.write("<u00"); else out.write("<u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &if (escapeSingleQuote) out.write("u00"); else out.write("<u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <if (ch <32) out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch ((char *)ch){
switch (ch) <if (str!= '<0') out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '&b': out.write(''); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &else if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("<u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (str!= '<0') <out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case '&'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &if (escapeSingleQuote) out.write("<u00"); else out.write("u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &else if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) if (escapeSingleQuote) <out.write("""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (name){
switch (ch) <if (ch 32) &out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &/* The writer must not be null. */{
switch (ch) if (ch > 0xff) &out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("&u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case '&b': out.write('&'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch > 0x7f){
switch (ch) /* if (ch >= 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '<b': out.write('&'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case '0': out.write('&0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '0': out.write('0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) /* if (ch >= 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <if (ch > 0xff) <out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case ''': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case '<'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch >= 0){
switch (ch) &case '&'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) if (ch <32) &out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch[0]){
switch (ch) if (ch 32) <out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <if (ch 32) &out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (escapeSingleQuote) out.write("u00"); else out.write("<u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case ''': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch.char){
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (inch){
switch (ch) else if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <if (escapeSingleQuote) out.write("&""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &&else{
switch (ch) <case '<0': out.write('&0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (int){
switch (ch) if (ch > 0xff) &out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) </* if (ch >= 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &if (ch > 0xff) &out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("<u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) if (ch > 0xff) out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) else if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &if (escapeSingleQuote) out.write("u00"); else out.write("u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <if (escapeSingleQuote) out.write("u00"); else out.write("&u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (res){
switch (ch) &if (escapeSingleQuote) <out.write("&""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '<'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (unicodeCh){
switch (ch) /* if (ch >= 0xff) <out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch &31){
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("<u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (escapeSingleQuote) out.write("<u00"); else out.write("<u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case '&'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case ''': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <if (ch > 0xff) out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <<else switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <&else &switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '&0': out.write('&0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case 'b': out.write('<'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case '0': out.write('&0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch.cstr()){
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <if (str!= '<0') &out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (str!= '<0') <out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '0': out.write('0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("&u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) if (ch > 0xff) out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case '<0': out.write('0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &if (ch > 0xff) <out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("&u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &<else <switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case '&b': out.write('<'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch ((ch)){
switch (ch) if (ch > 0xff) &out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <&else if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) if (ch > 0xff) <out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) if (ch > 0xff) out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) case '0': out.write('<0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) if (escapeSingleQuote) <out.write("<""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) /* if (ch >= 0xff) out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <<else if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '<b': out.write(''); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <if (ch <32) &out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &if (ch 32) <out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <if (ch &32) out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &else{
switch (ch == '&''){
switch ((void *)ch){
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case ''': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<b': out.write('&'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case '<0': out.write('<0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) if (escapeSingleQuote) <out.write("&""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) if (escapeSingleQuote) out.write("&""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <if (ch > 0xff) &out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("<u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) else if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <if (ch > 0xff) out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) if (escapeSingleQuote) out.write("&u00"); else out.write("u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) if (ch 32) &out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case '&0': out.write('&0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (ch <32) &out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("<u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <if (str!= '&0') &out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) </* if (ch >= 0xff) &out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case '<b': out.write('<'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) if (escapeSingleQuote) out.write("<u00"); else out.write("<u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <case '0': out.write('&0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <if (str!= '0') out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <if (ch &32) &out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case ''': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) if (escapeSingleQuote) <out.write("<""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '<'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) else <switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (str!= '&0') out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) if (ch > 0xff) &out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) </* if (ch >= 0xff) <out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch ((unsigned int)ch){
switch (ch) if (str!= '&0') <out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) if (escapeSingleQuote) &out.write("<""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) if (ch > 0xff) out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("&u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '&'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &if (ch > 0xff) &out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch > 0x07f){
switch (ch) &case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (char){
switch (ch) else &switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch ([ch]){
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("&u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <if (escapeSingleQuote) <out.write("""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <else <switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case ''': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case '<b': out.write('<'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) /* if (ch >= 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &/* if (ch >= 0xff) <out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case '<0': out.write('&0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case '&0': out.write('0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch ((ch = '&0')){
switch (ch) if (str!= '&0') &out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &/* if (ch >= 0xff) &out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <<else switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '<b': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
if (ch == '0'){
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '<'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case '<'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case '&'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch + strlen(ch)){
char ch; switch (ch){
switch (ch) case '&0': out.write('<0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <if (ch > 0xff) &out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) if (escapeSingleQuote) <out.write("""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case 'b': out.write('<'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <if (escapeSingleQuote) out.write("&u00"); else out.write("u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &/* if (ch >= 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (out){
switch (ch) <case '&'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch ((ch == '&0')? ch : '0'){
switch (ch) &case '<'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) if (ch 32) out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &if (str!= '<0') <out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch!= '&0'){
switch (ch) if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &if (str!= '<0') &out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch && (sz &0)){
switch (ch) &case '<'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("&u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <&else if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &if (str!= '&0') <out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) if (escapeSingleQuote) out.write("u00"); else out.write("&u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (ch &32) &out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &case '<'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
else switch (ch){
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case ''': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case '<'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <if (escapeSingleQuote) out.write("u00"); else out.write("&u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case ''': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <if (ch > 0xff) &out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <if (str!= '0') &out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (ch 32) &out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &if (ch 32) out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) else if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '<0': out.write('0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case '&0': out.write('&0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch <31){
switch (ch) <if (ch 32) <out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &if (ch <32) out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &if (ch &32) out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <if (str!= '0') out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <else <switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) if (ch 32) <out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &/* if (ch >= 0xff) out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &if (escapeSingleQuote) <out.write("""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (escapeSingleQuote) out.write("u00"); else out.write("<u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (t){
switch (ch) </* if (ch >= 0xff) &out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &&else switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) /* if (ch >= 0xff) out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) else switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '0': out.write('&0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) if (escapeSingleQuote) <out.write("&""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) if (ch > 0xff) <out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <if (str!= '&0') <out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case 'b': out.write(''); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &case '0': out.write('<0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '&'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <if (str!= '&0') out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) if (ch > 0xff) out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <if (ch > 0xff) <out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (string){
switch (ch) &if (ch > 0xff) <out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("&u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch && (sz 0)){
switch ((char)ch){
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &/* XXX: should not be */{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &if (ch > 0xff) <out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <<else if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case ''': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &if (ch 32) &out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <&else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) if (ch > 0xff) out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <if (escapeSingleQuote) out.write('&');{
switch (ch) else{
switch (ch) &if (ch &32) &out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (escapeSingleQuote) <out.write("<""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &/* if (ch >= 0xff) <out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case ''': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case '&'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case ''': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) if (ch > 0xff) out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch ((int)ch){
switch (ch.len){
switch (ch) case '<'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case '&b': out.write('<'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) == 0{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case '0': out.write('<0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <if (str!= '&0') &out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case ''': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <if (ch > 0xff) out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("&u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '0': out.write('0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &if (escapeSingleQuote) out.write("u00"); else out.write("<u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &if (escapeSingleQuote) out.write("u00"); else out.write("<u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <if (escapeSingleQuote) out.write("<u00"); else out.write("u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <if (ch > 0xff) &out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (m){
switch (ch 1){
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("&u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &else if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case 'b': out.write(''); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case ''': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <if (str!= '<0') <out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("<u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) </* XXX: need to encode an uint32 size */{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '&'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &else switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) </* if (ch >= 0xff) &out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch 31){
switch (ch) &case '<'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (p){
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("<u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) if (ch > 0xff) <out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) case '<b': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <if (escapeSingleQuote) out.write("u00"); else out.write("&u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
if (ch &32){
switch ((ch == '&0') || (ch > 0x7f)){
switch (ch) if (str!= '0') &out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch ((ch & 0xff)){
switch (aCh){
switch (ch) <case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '0': out.write('0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
/* switch (ch) &*/{
switch (ch) &if (ch > 0xff) out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <if (escapeSingleQuote) out.write("u00"); else out.write("<u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <case '&0': out.write('<0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <if (escapeSingleQuote) out.write('&'); break;{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '0': out.write('0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '<'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch &sizeof(ch)){
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) if (ch > 0xff) <out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case ''': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("<u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("&u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (escapeSingleQuote){
switch (ch > 0xfffff){
switch ((ch &32)){
switch (ch) &<else if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &else if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) if (ch > 0xff) out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <if (escapeSingleQuote) out.write("<""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &if (escapeSingleQuote) out.write('<'); break;{
switch (ch) &if (ch > 0xff) out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &else if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <case '&0': out.write('0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case ''': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <case '&'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch!= 32){
switch (ch) case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <if (escapeSingleQuote) &out.write("""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (escapeSingleQuote) out.write("""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) if (str!= '<0') &out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch == ''){
switch (ch - str){
switch (ch) if (escapeSingleQuote) out.write(''); break;{
else &switch (ch){
switch (ch) case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case 'b': out.write('<'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) if (escapeSingleQuote) out.write("<u00"); else out.write("u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) /* if (ch >= 0xff) <out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (c){
switch (ch &8){
switch (ch) <<else switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <<else <switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("<u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("&u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case 'b': out.write('&'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case ''': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) </* if (ch >= 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case '<'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) if (escapeSingleQuote) out.write("<u00"); else out.write("u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case '&b': out.write('&'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case '&'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &/* if (ch >= 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) /* if (ch >= 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("<u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case '<'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) </* if (ch >= 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch.charAt){
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (unsigned char){
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch > 1){
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch ((char*)ch){
switch (ch) break;{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("&u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("<u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("&u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &else &switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (escapeSingleQuote) out.write("&""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (escapeSingleQuote) out.write("<""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '&b': out.write('<'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (in){
switch (str.charAt(i)){
switch (ch) &if (escapeSingleQuote) out.write("<u00"); else out.write("&u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("<u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &&else switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) if (ch &32) &out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("<u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch ((unsigned char*)ch){
switch (ch) &if (ch > 0xff) <out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <case '<'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (result){
switch (ch) <if (escapeSingleQuote) <out.write("<""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (ch > 0xff) <out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case '&0': out.write('&0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <if (str!= '<0') out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (escapeSingleQuote) out.write("&u00"); else out.write("&u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (escapeSingleQuote) &out.write("""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &&else switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (ch > 0xff) out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch > 0xfff){
switch (ch) <else if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch.name){
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <char ch = str.charAt(i);{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case 'b': out.write('&'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &if (escapeSingleQuote) out.write("<u00"); else out.write("<u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch){
switch (ch && ch 32){
switch (ch) &if (ch > 0xff) <out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <<else if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("&u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch).charAt(0){
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch > 0x0f){
switch (ch) &if (ch > 0xff) out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch || ch 32){
switch (ch) case '<'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &if (escapeSingleQuote) out.write("&u00"); else out.write("u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <<else if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &if (str!= '0') <out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) if (str!= '0') <out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("<u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <&else switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case ''': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case ''': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &break;{
switch (ch) if (ch <32) <out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &if (str!= '<0') <out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) </* if (ch >= 0xff) <out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch 16){
switch (ch) if (escapeSingleQuote) out.write("&u00"); else out.write("<u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch ((unicode)ch){
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <if (ch &32) &out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &&else if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &if (str!= '&0') out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <else if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("&u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <if (ch 32) out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <else if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &&else &switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch > 32){
switch ('<0'){
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch((ch)){
switch (ch && (ch > 0xff)){
switch (ch) &case '0': out.write('0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '0': out.write('<0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <if (ch > 0xff) <out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case ''': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch >= 0xfff){
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch &0){
switch (ch) case '&0': out.write('&0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '<'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <if (escapeSingleQuote) out.write("<u00"); else out.write("<u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) </* if (ch >= 0xff) out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '<0': out.write('<0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '<'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch!= '&''){
switch (ch) <if (ch &32) out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &/* if (ch >= 0xff) <out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("&u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch ((ch > 0xff)){
switch (ch) &if (ch > 0xff) <out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch > 0){
switch (ch == '&0'){
switch (ch) <if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case '&0': out.write('<0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch == '<n'){
switch (ch) <case '<b': out.write('<'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &if (escapeSingleQuote) out.write("&u00"); else out.write("u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (escapeSingleQuote) out.write("&u00"); else out.write("<u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (void){
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <if (ch > 0xff) &out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &if (ch 32) <out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) if (escapeSingleQuote) out.write('&');{
switch (ch) &<else if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("<u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <<else <switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case '<b': out.write(''); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case '&0': out.write('&0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <case '<b': out.write('<'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) if (ch 32) out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch 64){
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (unicode){
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <<else{
switch (ch) if (escapeSingleQuote) <out.write("&""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) /* if (ch >= 0xff) &out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &if (escapeSingleQuote) <out.write("<""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <if (ch > 0xff) &out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case ''': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &case '<b': out.write('&'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("&u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &if (ch > 0xff) &out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) /* if (ch >= 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <if (escapeSingleQuote) out.write("<u00"); else out.write("<u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
if (ch) switch (ch){
switch (ch) <if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <else if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &if (ch > 0xff) out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) if (escapeSingleQuote) out.write("<""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) /* if (ch >= 0xff) <out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &<else <switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <else switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch <64){
else <switch (ch){
switch (ch) <case '<'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("<u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &if (ch &32) &out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch && (unicodePtr)){
if (ch == '&0'){
switch (ch) <case '&'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <if (ch <32) out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch - 1){
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &if (str!= '0') &out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (escapeSingleQuote) <out.write("""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &if (escapeSingleQuote) out.write('<');{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) </* if (ch >= 0xff) out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <else <switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (str){
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("&u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &if (escapeSingleQuote) &out.write("""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (escapeSingleQuote) out.write('&'); break;{
switch (ch) <&else <switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("<u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &if (escapeSingleQuote) out.write("&u00"); else out.write("&u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &&else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) if (escapeSingleQuote) out.write('');{
switch (n){
switch (ch == '''){
switch (ch) &/* if (ch >= 0xff) <out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <case '&'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write('&'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) if (escapeSingleQuote) out.write("&u00"); else out.write("u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch!= '<''){
switch (ch) if (str!= '<0') &out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch--){
switch (ch) &if (ch <32) out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch >> 32){
switch ((ch == '&0')? ch : '&0'){
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch ((ch == '<0')? ch : '0'){
switch (ch) <case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <if (ch > 0xff) out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <if (ch &32) &out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch.get()){
switch ((ch = ch)){
switch (b){
switch (ch) <case '&b': out.write(''); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("<u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) if (escapeSingleQuote) out.write("<""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '0': out.write('&0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) else if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <if (ch > 0xff) out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '&0': out.write('&0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) if (ch > 0xff) <out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &&else &switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '&b': out.write('<'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) if (str!= '&0') out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (escapeSingleQuote) out.write("&u00"); else out.write("&u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &if (escapeSingleQuote) out.write("<u00"); else out.write("<u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch ((caddr_t)ch){
switch (ch) if (ch > 0xff) &out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &<else switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch==0){
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <<else &switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &&else if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("&u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch(str){
switch (ch) &if (ch <32) <out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch > 0x80){
switch (ch) <if (ch > 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <case '<0': out.write('0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <case ''': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <if (escapeSingleQuote) out.write("&u00"); else out.write("<u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case '<b': out.write(''); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (h){
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case '0': out.write('&0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) if (str!= '0') out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (self.ch){
switch (ch) if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("<u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch + '<'){
switch (ch) &case '&'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) if (escapeSingleQuote) out.write("<u00"); else out.write("&u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("<u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &/* if (ch >= 0xff) &out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("&u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <if (escapeSingleQuote) &out.write("&""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &if (str!= '<0') &out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) </* if (ch >= 0xff) <out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '&b': out.write('<'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch.charAt()){
switch (ch) case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case 'b': out.write('<'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <case '<'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &/* if (ch >= 0xff) out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <&else if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("&u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &if (ch > 0xff) <out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) else <switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) if (escapeSingleQuote) &out.write("<""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case 'b': out.write('<'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case '<'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <if (escapeSingleQuote) &out.write("<""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case '<'': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &if (escapeSingleQuote) out.write("u00"); else out.write("&u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '0': out.write('<0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch.charAt(0)){
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch && ch <32){
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("&u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &else <switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch + 32){
switch (ch) case '&b': out.write('&'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) case '&'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (*ch){
switch (ch) case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '<0': out.write('&0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <else if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch == '&'){
switch (ch) &if (escapeSingleQuote) out.write("<""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &&else if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch > 16){
switch (ch) if (str!= '<0') out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '&'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
if (ch <32){
switch (ch) /* if (ch >= 0xff) &out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("<u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &if (escapeSingleQuote) out.write("<u00"); else out.write("&u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &/* if (ch >= 0xff) &out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) if (ch > 0xff) &out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch &&!ch){
switch (ch) else if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &case '&0': out.write('<0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("&u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) else if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &&else <switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch == null){
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) /* if (ch >= 0xff) out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '0': out.write('<0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <&else if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case '<b': out.write('<'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <if (str!= '<0') &out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (str!= '0') <out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch0){
switch (ch) &case '<b': out.write(''); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) if (escapeSingleQuote) out.write("&u00"); else out.write("&u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (str!= '&0') out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &if (ch > 0xff) &out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) if (str!= '0') &out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("<u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &if (ch > 0xff) <out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("&u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) else <switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (escapeSingleQuote) out.write("<u00"); else out.write("&u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (ch > 0xff) <out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <break;{
switch (ch) &case ''': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <if (str!= '<0') <out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '&'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) <else &switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (ch > 0xff) <out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
/* switch (ch) <*/{
switch (ch) &if (str!= '0') out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("&u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (str!= '&0') out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (mode){
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) <out.write("&u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '0': out.write('<0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) if (str!= '<0') <out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '&'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <if (ch 32) out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch &1){
switch (ch) case ''': if (escapeSingleQuote) &out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case ''': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case '<b': out.write('<'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch == '&n'){
switch (ch) &case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (ch 32) <out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (lch){
switch (ch) case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &if (ch > 0xff) out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
if (ch == '<0'){
switch (ch) if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) </* if (ch >= 0xff) <out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &<else if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &case '&'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <if (escapeSingleQuote) out.write("&u00"); else out.write("u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &if (ch &32) <out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) </* The writer must not be null. */{
switch (ch) &<else if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch - ch){
switch (ch) if (ch > 0xff) &out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch ((ch == '<0') || (ch > 0x7f)){
switch (ch) if (ch &32) out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &else switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &else if (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch - 32){
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <if (ch > 0xff) <out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '<b': out.write('<'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (!ch){
switch (ch) &/* if (ch >= 0xff) <out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &if (ch > 0xff) &out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '&0': out.write('&0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("&u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case '<'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) if (escapeSingleQuote) out.write("<u00"); else out.write("&u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) <else if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &case ''': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch + sizeof(ch)){
switch (ch) if (escapeSingleQuote) out.write("&""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch ((unsigned char)ch){
switch (ch) case '&b': out.write('<'); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) out.write("u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <if (ch > 0xff) out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case ''': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch == '<''){
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '&'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) /* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("<u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) <if (escapeSingleQuote) <out.write("&""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("&u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch <sizeof(ch)){
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '<'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) else if (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) </* if (ch >= 0xff) <out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch && str.charAt(i)){
if (ch 32){
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) if (escapeSingleQuote) out.write("&u00"); else out.write("<u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &else <switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) /* The writer must not be null. */{
switch (ch) &if (escapeSingleQuote) &out.write("&""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) if (escapeSingleQuote) &out.write("&""); out.write('<'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) if (ch > 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) if (ch <32) out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) <if (ch > 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("u0"); <else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '<0': out.write('<0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) &case '<0': out.write('<0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &if (escapeSingleQuote) out.write('&');{
switch (ch) </* if (ch >= 0xff) out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <&else &switch (ch > 0xff) &out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) case '&b': out.write('&'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <case 'b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) <if (ch > 0xff) out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &<else if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch && ch > 0xff){
switch (ch) if (ch > 0xff) out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &if (escapeSingleQuote) out.write("<u00"); else out.write("u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) </* if (ch >= 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) if (ch > 0xff) <out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch.charAt(0)){
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("&u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("<u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case '<'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch ((ch == '&0')? ch : '<0'){
switch (ch) /* if (ch >= 0xff) out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch = 0){
switch (ch) <else switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (escapeSingleQuote) &out.write("&""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) case '<'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&'': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case 'b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case 'b': out.write(''); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch > 0x0){
switch (ch) &case '&'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) if (ch > 0xff) out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch <8){
switch (ch) &case '<b': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch ('&0'){
switch (ch) <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) &if (escapeSingleQuote) out.write("<u00"); else out.write("&u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &case '<b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) if (ch 32) &out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &case '<'': if (escapeSingleQuote) <out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '<0': out.write('&0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case ''': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch &= 0){
switch (ch) &<else &switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &case '<0': out.write('0'); break; case '<0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <<else if (ch > 0xff) <out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) if (str!= '<0') out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <else &switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) if (ch > 0xff) <out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) if (str!= '&0') <out.write("<u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '<'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch + '<0'){
switch (ch) case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) &if (ch > 0xff) &out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &if (escapeSingleQuote) <out.write("&""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch.value){
switch (ch) &if (ch > 0xff) out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &case '&'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &if (escapeSingleQuote) out.write("&u00"); else out.write("&u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) if (escapeSingleQuote) out.write("<u00"); else out.write("&u000"); break; case '<n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case 'b': out.write('&'); out.write('<'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch ((u_char)ch){
switch (ch) if (ch > 0xff) <out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) /* if (ch >= 0xff) &out.write("&u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) <case '&0': out.write('<0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &if (str!= '0') <out.write("u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) case 'b': out.write('<'); out.write('&'); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <if (str!= '&0') <out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &else switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) <case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <else switch (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("u"); &else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) if (ch > 0xff) &out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) else &switch (ch > 0xff) <out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case '<0': out.write('&0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) <if (escapeSingleQuote) &out.write("<""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("&u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch!= -1){
switch (ch) <if (escapeSingleQuote) &out.write("&""); out.write(''"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) &case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch) /* if (ch >= 0xff) <out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '&b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch <2){
switch (ch) <if (escapeSingleQuote) <out.write("<""); out.write('&'"); break; case '0': out.write(''"); out.write(''"); out.write('0'); out.write('0'); break; case '0': out.write(''"); out.write(''"); out.write(''"); break; case '0': out.write(''"); out.write('0'); out.write('0'); out.write(''"); out.write('0'); out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''': out.write(''"); out.write(''"); break; case ''':{
switch (ch) <case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write('n'); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write('');{
switch (ch == 'n'){
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &/* if (ch >= 0xff) &out.write("<u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) /* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) case '&'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) <case '&b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <if (ch > 0xff) &out.write("u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) &/* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) out.write("&u0"); &else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &if (escapeSingleQuote) out.write("&u00"); else out.write("<u000"); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) &if (ch > 0xff) <out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &if (ch &32) <out.write("<u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) &if (ch > 0xff) out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch ((ch == '<0')? ch : '<0'){
switch (ch) &case '<'': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case ''': if (escapeSingleQuote) <out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &if (ch > 0xff) <out.write("<u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) <if (ch > 0xff) out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''{
switch (ch) <case '&0': out.write('<0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) case '&b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case ''': out.{
switch (ch) if (ch <32) &out.write("&u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch ( ch ){
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <if (ch > 0xff) <out.write("&u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out{
switch (ch) &/* if (ch >= 0xff) out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) &if (str!= '0') out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch) case '<0': out.write('&0'); break; case '0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) </* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) <out.write("<u"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch (ch) <case '<b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) if (escapeSingleQuote) out.write('<'); break;{
switch (ch) if (str!= '0') <out.write("&u0"); else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00"); else if (ch 32) switch (ch) case 'b': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.{
switch (ch == '<r'){
switch (ch) &case '<b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) if (ch &32) <out.write("u00"); out.write('u00"); break; case 'b': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write('{
switch (ch) case '&'': if (escapeSingleQuote) &out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case '&b': out.write(''); out.write('b'); break; case '<n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) </* * If we have an encoded encoded encoded value, then remove it. */ if ((ch >= 0xff) || (ch > 0xff)) &out.write("<u0"); else if ((ch > 0x7f) && (ch > 0x7f)) out.write("u00"); else if (ch > 0x7f) out.write("u00"); else if (ch 32) break; case 'b': out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.{
switch (ch) case '<b': out.write('<'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case '{
switch (ch) <case '&b': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'a': out.write('a'); out.write('a'); out.write(''); out.write(''); break; case '0': out.write('0'); out.write('0'); out.write('a'); out.write('0'); out.write('a'); out.write(''); out.write('a'); break; case 'a': out.write('a'); out.write(''); out.write('a'); break; case 'a': out.{
switch (ch) &case '<'': if (escapeSingleQuote) out.write('<'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &/* if (ch >= 0xff) out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) &case 'b': out.write('&'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) <case '&'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &case '&0': out.write('<0'); break; case '&0': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write('0'); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''': out.write(''); break; case ''':{
switch (ch) &case '<b': out.write(''); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'n': out.{
switch (ch) &case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &case '<'': if (escapeSingleQuote) <out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case 'b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &/* if (ch >= 0xff) &out.write("<u0" + hex(ch)); <else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
switch (ch) <case '<b': out.write('<'); out.write('b'); break; case '&n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) <case 'b': out.write('&'); out.write('b'); break; case '<n': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case{
switch (ch) case '&b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write('n'); break; case 't': out.write(''); out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'f': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 't': out.write(''); out.write(''); break; case 'n': out.write(''); out{
switch (ch) &if (escapeSingleQuote) out.write("&u00"); else out.write("u000"); break; case '&n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write('n'); break; case 'r': out.write('r'); out.write(''); break; case 'r': out.write(''); out.write(''); break; case 'u00': out.write('u00"); out.write('u00"); break; case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'f': out.{
switch (ch) case '&'': if (escapeSingleQuote) &out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; else out.write(''); break; else switch (ch){
switch (ch) &/* * If 0xfff is in the "inline" case, use 0xff, ie. */ if (ch == 0xff) &out.write("u"); <else if (ch > 0xff) out.write("u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.{
switch ((ch 32)){
switch (ch) &<else if (ch > 0xff) &out.write("&u0" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) switch (ch) case 'b': out.write(''); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'f': out.write('');{
switch (ch) <case '&'': if (escapeSingleQuote) out.write('&'); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); break; case ''':{
switch (ch) &case '&b': out.write('<'); out.write('b'); break; case 'n': out.write(''); out.write(''); break; case 'n': out.write(''); out.write('n'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case 'n': out.write(''); out.write(''); out.write(''); break; case 'r': out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case 'f': out.write('{
switch ((long)ch){
switch (ch) &/* if (ch >= 0xff) <out.write("u0" + hex(ch)); &else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch > 0x7f) out.write("u00" + hex(ch)); else if (ch 32) out.write("u00" +{
switch (ch) case '&b': out.write('&'); out.write('b'); break; case '&n': out.write(''); out.write('r'); break; case 'f': out.write(''); out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); out.write(''); break; case ''': if (escapeSingleQuote) out.write(''); out.write(''); out.write(''); break; case ''': out.write(''); out.write(''); out.write(''); break; case ''':{
