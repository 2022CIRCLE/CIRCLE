
return new CompilerOptions();
return options;
return result;
return (options);
return CompilerOptions(options);
return compilerOptions;
return rv;
break;
return new CompilerOptions(options);
return CompilerOptions();
return false;
return NS_OK;
return wOptions;
return;
return ret;
return results;
return null;
return null;
continue;
return &options;
return (compilerOptions);
return 0;
return(options);
return retval;
return true;
return mOptions;
return true;
goto done;
return settings;
return options; break;
return setOptions;
return (compilerOptions) options;
return res;
return CompilerOptions.options;
return nullOptions;
return false;
return SetOptions(options);
return, options;
returnOptions;
return options.closurePass;
return addOptions;
return wLevel;
return *options;
return compileOptions;
return Options;
return options == null;
return values;
return CompilerOptions_options;
return allOptions;
return currentOptions;
return options = new CompilerOptions();
return AddOptions(options);
return value;
return options;  else
goto out;
return (result);
return [] options;
return status;
return defaultOptions;
goto cleanup;
return compileerOptions;
return options; */
return xoptions;
return (option);
returnCompilerOptions(options);
return flags;
return createOptions();
return theOptions;
return options.compilationLevel;
return CompilerOptions;
return false;
return (Options) options;
return endOptions;
return options, options;
return this;
return flags.options;
return compilationOptions;
return option;
returncompilerOptions;
return +options;
return CompilerOptions.Options;
return break;
return choices;
return CompilerOptions[options];
return (*options);
return nOptions;
return options.next;
return ++options;
return options || options;
return 1;
return options;  return options;
return existingOptions;
else return options;
return oldOptions;
return types;
return -1;
return
return options.options;
return FAILURE;
return options[0];
return foundOptions;
return options = CompilerOptions();
return const CompilerOptions();
return new CompilerOptions ();
return do_QueryInterface(options);
goto ret;
return flags.extraAnnotationName;
result = options; return result;
return options2;
return initOptions;
return options == 0;
return listOptions;
return (1);
return nu;
return InitOptions();
return outputOptions;
return (0);
return true;
return returnOptions;
return options.get();
return data;
return GetOptions();
return debugOptions;
return CompilerOptions_OK;
return + options;
return level;
return createOptions(options);
return flags.compilationLevel;
else return CompilerOptions(options);
return pOptions;
return EnumerateOptions(options);
return getOptions();
result = options;
return (compilerOptions)options;
return options.newOptions;
return changes;
return v;
return options; return CompilerOptions();
return params;
return options.result;
return findOptions(options);
goto fail;
return getOptions(options);
return options;  break;
return elements;
ret = options; return ret;
return val;
return retVal;
return selection;
return levels;
return options - 1;
else  return options;
return new CompilerOptions(0);
return parameters;
exit(1);
return new CompilerOptions;
return options.value;
return options = 0;
return (null!= options);
ret = options;
return options; /* XXX */
retval = options;
return new CompilerOptions(level);
return new nsOptions();
return ParseOptions(options);
return options;*/
return setOptions(options);
return (flags.extraAnnotationName);
return new CompilerOptions(1);
return CompilerOptions (options);
return options? 0 : options;
return CompilerOptions.returnVal;
return COMPILER_OPTIONS;
return options.debugOptions;
return xtbOptions;
return CompilerOptions.Options;
return new CompilerOptions(); break;
return addOptions(options);
return options;  else  break;
return options? options : options;
return options.returnVal;
if (options) return options;
return options; ;
return CompilerOptionsOptions();
return COMPILER_OPTIMIZATIONS;
return CompilerOptions_ret;
return CompilerOptions.comparator;
return options;  else if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);
return options.getBundleInfo("debug");
return options;  else  options.setCodingConvention(new ClosureCodingConvention());
return options;  else  return CompilerOptions.new CompilerOptions();
return options.comparator;
return options;  else if (Flags.smozilla)  options.setCodingConvention(new JqueryCodingConvention());  else  options.setExtraAnnotationNames(flags.extraAnnotationName);
return options;  else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives)  options.setCodingConvention(new JqueryCodingConvention());  else  options.setExtraAnnotationNames(flags.extraAnnotationName);  CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options);  if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setGenerateExports(options);
return CompilerOptions_options(options);
return options.compilationNode == null;
return options;  else if (flags.componentDebug)  level.setDebugOptionsForCompilationLevel(options);
return options;  else  if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setGenerateExports(flags.generateExports);  WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options);  if (flags.sourceFile)  options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile)  options.sourceFile = CompilationLevel.A
return fs_result;
return CompilerOptions_CreateOptions(options);
return options.copy;
return options;  else  options.setCompilationNames(flags.extraAnnotationName);
return (const CompilerOptions) options;
return options;  else  options.setSrc(flags.flags);
return CompilerOptions.CompilerOptions();
return CompilerOptions.returnValues;
return CompilerOptions_result;
return options;  else  options.setElementValue(flags.ElementValue);
return CompilerOptions.result;
return options;  else  if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives)  options.setCodingConvention(new JqueryCodingConvention());  else  options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options);  if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setGenerateExports(flags.generateExports);  WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options;  else  if (flags.flags.explicit)  level.setDebugOptionsForCompilationLevel(options);  if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);  if (flags.useExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)
return options.eInit;
return options;  if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setGenerateExports(flags.generateExports);  WarningLevel wLevel = flags.warningLevel
return if_needSecurity;
return CompilerOptions.compilationLevel;
return options;  else if (!flags.expirationName)  options.setExtraAnnotationNames(flags.extraAnnotationName);
return options;  else if (((flags.isVoidCode()) && flags.flags.version) == 0)  if (flags.isDebugChild(flags.version) && flags.version)  level.setDebugOptionsForCompilationLevel(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setGenerateExports(flags.generateExports);  WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting)  formattingOption.applyToOptions(options);
return options;  else  if (flags.extraAnnotationName)  level.setDebugOptionsForCompilationLevel(options);  if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setGenerateExports(flags.generateExports);  WarningLevel wLevel = flag
return CompilerOptions_newCompilerOptions();
return options.ccOptions;
return options.executeOptions;
return options.advanced;
return e;
return options;  else  return CompilerOptions(pluginProgID, options);
return CompilerOptions_create(options);
return options;  else  if (!Flags.extraAnnotationName)  if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);  if (flags.generateExports)  level.setGenerateExports(flags.generateExports);  WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting)  formattingOption.applyToOptions(options);
return options;  else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives)  options.setCodingConvention(new JqueryCodingConvention());  else  options.setExtraAnnotationNames(flags.extraAnnotationName);  CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options);  if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.debug)  level.setDebugOptionsForCompilationLevel(options);  if (flags.useTypesForOptimization)  level.setTypeBasedOptimizationOptions(options);  if (flags.useTypesForOptimization)  level.setType BasedOptimizationOpti
return options;  else  options.setExtraAnnotationNames(flags.extraAnnotationName);

return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else return CompilerOptions(pluginProgID, options);
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else &if (!Flags.extraAnnotationName) <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else <if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else &return CompilerOptions.new CompilerOptions();
return options; else options.setElementValue(flags.ElementValue);
return options; if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else &if (!Flags.extraAnnotationName) &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else <if (!Flags.extraAnnotationName) &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else <return CompilerOptions(pluginProgID, options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else <return CompilerOptions.new CompilerOptions();
return options; <else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else <options.setSrc(flags.flags);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else &break;
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else <if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (!Flags.extraAnnotationName) if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else options.setCompilationNames(flags.extraAnnotationName);
return options; else <if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else <if (!Flags.extraAnnotationName) if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &break;
return options; <else &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (!Flags.extraAnnotationName) <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else &if (!Flags.extraAnnotationName) if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else options.setCompilationNames(flags.extraAnnotationName);
return options; <else &if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else <if (!Flags.extraAnnotationName) <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else <return CompilerOptions.new CompilerOptions();
return options; <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; ;
return options; <else <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else <if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else <if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else
return options; if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else &if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <break;
<return CompilerOptions();
return options; else &options.setSrc(flags.flags);
return options; if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else &if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else &return CompilerOptions.new CompilerOptions();
return options; &else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; <else <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else &break;
return options; <else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else &if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; &else if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (!Flags.extraAnnotationName) &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; else <if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else &if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else <if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else &if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else <if (!Flags.extraAnnotationName) <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else <if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (!flags.expirationName) options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else <if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else <if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (!flags.expirationName) <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (!Flags.extraAnnotationName) <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; else if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; return options;
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else <if (!Flags.extraAnnotationName) &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else &if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else <options.setElementValue(flags.ElementValue);
return options; &else &if (!Flags.extraAnnotationName) &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else &if (!Flags.extraAnnotationName) &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else options.setSrc(flags.flags);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else &if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else <if (!Flags.extraAnnotationName) <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else <if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else &options.setElementValue(flags.ElementValue);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else &if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else <if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else <if (!Flags.extraAnnotationName) if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else <if (!Flags.extraAnnotationName) &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (!Flags.extraAnnotationName) if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else <options.setCodingConvention(new ClosureCodingConvention());
return options; <else &if (!Flags.extraAnnotationName) &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else &options.setCompilationNames(flags.extraAnnotationName);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else options.setCodingConvention(new ClosureCodingConvention());
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else &options.setCodingConvention(new ClosureCodingConvention());
return options; <else <if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else &if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else <if (!Flags.extraAnnotationName) if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else <options.setElementValue(flags.ElementValue);
return options; <else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; &else &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else <if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else &if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else <if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &else <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else return CompilerOptions(pluginProgID, options);
return options; <else if (!Flags.extraAnnotationName) &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else &if (!Flags.extraAnnotationName) if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <;
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else options.setCodingConvention(new ClosureCodingConvention());
return options; &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else &if (!Flags.extraAnnotationName) if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.componentDebug) <level.setDebugOptionsForCompilationLevel(options);
return options; &else &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &else options.setElementValue(flags.ElementValue);
return options; &else <if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; <else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else &if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else &if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; &else if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <return options;
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; <else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else
return options; else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else <if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; &else if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (!flags.expirationName) <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; <else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else &if (!Flags.extraAnnotationName) <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else <if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else break;
return options; else if (!Flags.extraAnnotationName) &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else <options.setCompilationNames(flags.extraAnnotationName);
else <return options;
return options; &else &if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; <else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else &if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else options.setCompilationNames(flags.extraAnnotationName);
return options; &else &if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else <if (!Flags.extraAnnotationName) &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else <if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options;
return options; &else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else <if (!Flags.extraAnnotationName) if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else &if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else <if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return CompilerOptions();
return options; break;
return options; &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else <if (!Flags.extraAnnotationName) <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (!Flags.extraAnnotationName) <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else &if (!Flags.extraAnnotationName) <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else &if (!Flags.extraAnnotationName) &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else &if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else <if (!Flags.extraAnnotationName) if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else <if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else &if (!Flags.extraAnnotationName) if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else &options.setSrc(flags.flags);
return options; <else if (!flags.expirationName) &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else <options.setCompilationNames(flags.extraAnnotationName);
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else &options.setElementValue(flags.ElementValue);
return options; &else &if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else &return CompilerOptions(pluginProgID, options);
return options; &else <if (!Flags.extraAnnotationName) <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (!Flags.extraAnnotationName) <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
&return CompilerOptions();
return options; if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (!Flags.extraAnnotationName) if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else &options.setCodingConvention(new ClosureCodingConvention());
return options; <else if (!flags.expirationName) options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else options.setElementValue(flags.ElementValue);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else <if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else <options.setCompilationNames(flags.extraAnnotationName);
<return compilerOptions;
return options; &else options.setCodingConvention(new ClosureCodingConvention());
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else return CompilerOptions.new CompilerOptions();
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (flags.componentDebug) &level.setDebugOptionsForCompilationLevel(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else &if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else &if (!Flags.extraAnnotationName) if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; <else return CompilerOptions.new CompilerOptions();
return options; &else if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; else if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else <if (!Flags.extraAnnotationName) <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else &if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else <return CompilerOptions(pluginProgID, options);
return options; else &if (!Flags.extraAnnotationName) <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else <if (!Flags.extraAnnotationName) <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else &if (!Flags.extraAnnotationName) <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &return options;
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else &if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else &if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else if (!flags.expirationName) options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; &else &if (!Flags.extraAnnotationName) &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else <if (!Flags.extraAnnotationName) &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else <if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else &if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else <if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (!Flags.extraAnnotationName) <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else &if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else <if (!Flags.extraAnnotationName) &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (flags.componentDebug) &level.setDebugOptionsForCompilationLevel(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return new CompilerOptions();
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else <options.setCodingConvention(new ClosureCodingConvention());
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else &if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &return CompilerOptions(pluginProgID, options);
return options; &else <if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else <break;
return options; <else &if (!Flags.extraAnnotationName) &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else &if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (flags.componentDebug) &level.setDebugOptionsForCompilationLevel(options);
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else <if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else &if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else &if (!Flags.extraAnnotationName) <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else <if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else <if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (flags.componentDebug) <level.setDebugOptionsForCompilationLevel(options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else &if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else &if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (!Flags.extraAnnotationName) <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else <return CompilerOptions(pluginProgID, options);
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; &else return CompilerOptions.new CompilerOptions();
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else <if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else <if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else &if (!Flags.extraAnnotationName) <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (flags.componentDebug) level.setDebugOptionsForCompilationLevel(options);
return options; &else if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else &if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else <if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (!flags.expirationName) <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else <if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
else return options;
return options; &else if (!Flags.extraAnnotationName) &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else break;
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; <else <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (!flags.expirationName) &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else <if (!Flags.extraAnnotationName) if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (!Flags.extraAnnotationName) &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else
return options; <else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else &if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; <else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (!flags.expirationName) &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else <break;
return options; &else if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else <if (!Flags.extraAnnotationName) &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else <if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return compilerOptions;
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else <options.setCodingConvention(new ClosureCodingConvention());
return options; <else &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else &if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else <if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else &return CompilerOptions(pluginProgID, options);
return options; else <if (!Flags.extraAnnotationName) &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; else &if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else <if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
<return options;
return options; <else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else <if (!Flags.extraAnnotationName) if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (flags.componentDebug) level.setDebugOptionsForCompilationLevel(options);
return options; &else &if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; <else &if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else &if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (!Flags.extraAnnotationName) <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; <else if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else <if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &;
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (!Flags.extraAnnotationName) &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &options.setCompilationNames(flags.extraAnnotationName);
return options; <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else &if (!Flags.extraAnnotationName) if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else <options.setElementValue(flags.ElementValue);
return options; &else if (!Flags.extraAnnotationName) &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else <options.setSrc(flags.flags);
return options; &else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; <else <if (!Flags.extraAnnotationName) if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else &if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else <if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (!Flags.extraAnnotationName) if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (!Flags.extraAnnotationName) if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else <return CompilerOptions.new CompilerOptions();
return options; &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (!Flags.extraAnnotationName) &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else &if (!Flags.extraAnnotationName) if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else &options.setElementValue(flags.ElementValue);
return options; &else if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else <if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else &if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (!Flags.extraAnnotationName) if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else break;
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else <if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else &if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else <if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (!Flags.extraAnnotationName) <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &else <if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else <if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else <if (!Flags.extraAnnotationName) &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; <else options.setSrc(flags.flags);
return options; else <if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else <if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
<return options;
&return options;
return options; else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (!Flags.extraAnnotationName) if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else &if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (flags.componentDebug) <level.setDebugOptionsForCompilationLevel(options);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else &if (!Flags.extraAnnotationName) &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else &options.setCodingConvention(new ClosureCodingConvention());
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; &else &options.setCompilationNames(flags.extraAnnotationName);
return options; <else if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else <if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else &if (!Flags.extraAnnotationName) <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else
break;
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else <if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else <if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else &if (!Flags.extraAnnotationName) if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.componentDebug) level.setDebugOptionsForCompilationLevel(options);
return options; else <if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; break;
return options; else if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else &if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else <options.setExtraAnnotationNames(flags.extraAnnotationName);
else &return options;
return options; <else <if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (!Flags.extraAnnotationName) if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (!Flags.extraAnnotationName) <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else &if (!Flags.extraAnnotationName) &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else <break;
return options; <else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else <options.setSrc(flags.flags);
return options; <else &if (!Flags.extraAnnotationName) if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else &return CompilerOptions.new CompilerOptions();
return options; &else <if (flags.extraAnnotationName) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else &if (flags.extraAnnotationName) <level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else <if (!Flags.extraAnnotationName) <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else <if (!Flags.extraAnnotationName) if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else &break;
return options; &else <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; &else if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; else &if (!Flags.extraAnnotationName) <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else &options.setSrc(flags.flags);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else <if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; &else <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else &if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else options.setSrc(flags.flags);
&return options;
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; <else if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; <else &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else &if (flags.flags.explicit) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (((flags.isVoidCode()) && flags.flags.version) == 0) &if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else &if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; &else <options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (!Flags.extraAnnotationName) if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; <else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; else if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options);
return options; &else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
&return compilerOptions;
return options; &else &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); <else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; &else if (((flags.isVoidCode()) && flags.flags.version) == 0) <if (flags.isDebugChild(flags.version) && flags.version) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else &if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else return CompilerOptions(pluginProgID, options);
return options; &else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options;
return options; &else &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; &else if (Flags.smozilla) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; <else if (Flags.smozilla) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else <if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) &level.setTypeBasedOptimizationOptions(options);
return options; else &if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; else if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (!Flags.extraAnnotationName) &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; else <if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; <else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); <else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) <options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; <else if (Flags.smozilla) options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName);
return options; else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else &options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setType BasedOptimizationOpti
return options; <else if (compilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else <options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(options);
return options; <else if (flags.extraAnnotationName) &level.setDebugOptionsForCompilationLevel(options); &if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flag
return options; else if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) <level.setTypeBasedOptimizationOptions(options);
return options; else <if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) &options.setCodingConvention(new JqueryCodingConvention()); &else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
return options; &else if (flags.flags.explicit) <level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); &if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel
return options; else if (((flags.isVoidCode()) && flags.flags.version) == 0) if (flags.isDebugChild(flags.version) && flags.version) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; &else &if (flags.debug) <level.setDebugOptionsForCompilationLevel(options); <if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); if (flags.sourceFile) options.sourceFile = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives; if (flags.sourceFile) options.sourceFile = CompilationLevel.A
return options; &else <if (flags.flags.explicit) &level.setDebugOptionsForCompilationLevel(options); <if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.useExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports)
return options; <else <if (!Flags.extraAnnotationName) <if (flags.debug) &level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) formattingOption.applyToOptions(options);
return options; else &if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives) options.setCodingConvention(new JqueryCodingConvention()); else options.setExtraAnnotationNames(flags.extraAnnotationName); CompilationLevel level = flags.compilationLevel; level.setDebugOptionsForCompilationLevel(options); if (flags.debug) level.setDebugOptionsForCompilationLevel(options); if (flags.useTypesForOptimization) level.setTypeBasedOptimizationOptions(options); if (flags.generateExports) level.setGenerateExports(flags.generateExports); WarningLevel wLevel = flags.warningLevel; wLevel.setOptionsForWar
