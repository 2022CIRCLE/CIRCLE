golden:
if (li.referenced) {
inference:
if (!li.referenced){
if (li.referenced){
if (li){
if (li.getReferenced()){
if (li.isReferenced()){
if (li.referenced){
if (node.referenced){
if (li == null){
if (li.get()){
if (li && li.referenced){
if (!li.isReferenced()){
if (li!= null){
if(li.referenced){
if (node.getLastChild()){
if (referenced){
if (li.get().referenced){
if (li.hasReferenced){
if (li.referenced!= 0){
if ((li.referenced)!= 0){
if (li &&!li.referenced){
if (LabelInfo.referenced){
if (li.referenced == 0){
if (li.getName()){
if (li.getType() == Token.BLOCK){
if (li.referenced.get()){
if (name.referenced){
if (id.referenced){
if (li.isReferenced){
if (node){
if (li == null){
else if (li.referenced){
if (*li.referenced){
if ((li.referenced)!= null){
if (li.isEmpty()){
if (li && (li.referenced)){
if (li.referenced!= null){
if (li.reference){
if (! li.referenced){
if (li.getLabelInfo()){
if (li.id){
if (null == li.referenced){
if (!li){
if (li.exists()){
if (node.isReferenced()){
if ((li.referenced)){
if (li!= null){
if (!li.isEmpty()){
if (&li.referenced){
if (LabelInfo li){
if (!name.equals(newName)){
if (li.label){
if (li.IsReferenced()){
if (isReferenced){
if (li.referenced == null){
if (li.getId()){
else{
if (isReferenced(li)){
if (li.Referenced){
if ( li.referenced ){
if (!referenced){
if (!li.isReferenced){
if (!li.id){
if (li.id.get()){
if (*li){
if (li.mReferenced){
if (li.getFirstChild()){
if (li.hasAttributes){
if (li.name){
if (LabelInfo(li)){
if (li.exists){
if (li.getString()){
if (name.get()){
if (NS_REFERENCED(li)){
if (li.parent){
if (li.referent){
if (LabelInfo li.referenced){
if (name.get().referenced){
if (!li.hasReferenced){
if (li.firstChild){
if (getLabelInfo(name)){
if (name.IsEmpty()){
if (name){
if (!LabelInfo.referenced){
if (name.get() == li.referenced){
if (ni.referenced){
if (!li.getReferenced()){
if (!li.referenced.get()){
if (li.IsEmpty()){
if (getLabelInfo(li)){
if (.referenced){
if (li.getID()){
if (node && li.referenced){
if (node.getFirstChild()){
if (null == li){
if (li.contain()){
if (li.getName().get()){
if (!li.referenced){
if (unreferenced){
if (li.referenced && node){
if (node.referenced){
if (li.referenced == false){
if(!li.referenced){

if (aReferenced){
if (li.getType() == Token.Type){
if (child.referenced){
if (li.getText()){
if (!li.getType()){
if (newName){
if (!li.contain()){
if (!li.exists()){
if (!node.referenced){
if (li || li.referenced){
if (li.isReferent()){
if (li.references){
if (nameNode.referenced){
if (li.getIdent()){
if (li && li.referenced){
if (li.get() == null){
if (li.getNodeInfo()){
if (li.name.get()){
if (__func__ == li.referenced){
if (li.getUniqueID()){
if (!li.Referenced){
if (s.referenced){
if (li.getLabel()){
if (li.equals(name)){
if (li.getParent()){
if (!node.isReferenced()){
if (li.getReferencedName()){
if (li.arena){
if (li.label.referenced){
if (li && (!li.referenced)){
if (name.get() == null){
if (!li.getName()){
if (li.labelInfo){
if (li.referenced && (node)){
if (li.GetReferenced()){
if (NodeUtil.referenced){
if (li.getType() == Token.Referenced){
if (null!= li){
if (li.LabelInfo){
if (!(li.referenced)){
if (!name.equals(name)){
if (li==node){
if ( (li.referenced) ){
if (li.getChildCount() > 0){
if (li.referenced > 0){
if (li.referenced &&!name){
if (id){
if (name.equals(newName)){
switch (li.referenced){
if (name.get() == '0'){
if (li.containing){
if (li.getReferences()){
if (li.getName() == name){
if (li.getUniqueName()){
if (newName.get()){
if ((li.referenced) == 0){
if (li.referenced == true){
if (!li.isReferenced(name)){
label = li.referenced; if (label){
if (li.referenced && newName){
if (li.getNodeInfo().referenced){
if ((li.referenced)!= 0){
if (name.getNameForId(li.id)){
if (li.referenced &&!node){
if (li.getType() == Token.Label){
if (li.referenced && name){
if (li.referenced!= -1){
if (node.getChildCount() > 0){
if (li.referenced)   else{
if (li.referenced && parent){
if (strcmp(li.referenced)){
if (li.getType() == Token.String){
if (li.referenced && label){
if (li.getReferenced()!= 0){
if ((li.referenced)  0){
if (li.type == Token.BLOCK){
if (li.referenced && nameNode){
if (strcmp(li, "referenced")){
if (li.referenced.get()!= 0){
if (li.referenced && li.parent){
if (li.referenced || li.parent){
if (li.getType() == Token.XUL){
if (li.referenced.get() == 0){
if (li.getType() == Token.INT){
if (li.getName().get() == name){
if ((li.referenced)!= -1){
if (li.referenced ||!name.get()){
if ((li == null) && (li.referenced)){
if (li.referenced &&!name.equals(newName)){
if (li.Referenced &&!li.name){
if (li.getType() == Token.BLOCK)  NodeUtil.tryMergeBlock(node, newChild);  compiler.reportCodeChange();  else if (li.getType() == Token.DELTY){
if (node.getParent()){
if (li.getType() == Token.STYLE_STYLE){
if (li.getType() == Token.BLOCK)  NodeUtil.tryMergeBlock(newChild);{
if (!LabelInfo.IsEmpty()){
if (li.referenced &&!refs){
if (li.referenced ||!name.equals(newName)){
if (li.referenced && name.getNameForId(node.getUnicode())){
if (li.getAttributes()!= null){
if (li.referenced ||!name.equals(name)){
if (li.name.get() == null){
if ((node == null) && (li.referenced)){
if (li.referenced && node.getName()){
if (li.getName().equals(newName)){
if (li.referenced || li.isVisited()){
if (li.referenced &&!li.name.get()){
if (li.getNodeType() == Token.T_NONE){
if (li.referenced &&!mDocument){
if (li.referenced && li.flags & ILabel_STATIC){
if ((li.referenced) && (node)){
if ((li.referenced) && li.id == name){
if (li.referenced && li.id.get()){
if (li.referenced || (node.getNameForId(li)) == 0){
if (li.getSupports()){
if (li.referenced && li.flags & LabelEnumerate){
if (li.getID()!= null){
if (li.IsContained()){
if (!li.getSupports()){
if (li.hasAlias()){
if (li.referenced && (li.referent!= 0)){
if (node.getNodeInfo() == null){
if (li.referenced &&!li.node){
if (li.getSimpleID() == &name){
if (li.hasChildren()){
if ((li.referenced && (li.tag == '0'))){
if (node.getChildren() == null)  NodeUtil.tryMergeBlock(node, node);{
if (li.get() == '/'){
if (li.getNodeType() == Token.BLOCK)  NodeUtil.tryMergeBlock(newChild);{
if (li.referenced &&!li.hasName){
if (!node.getFirstChild()){
if (li.getName().get() == kNameForId){
if (li.getType() == Token.HLOCK)  NodeUtil.tryMergeBlock(node, newChild);{
if (li.getIsNaN("").referenced){
if ((name = getNameForId(li.id)) && (li.getType() == Token.BLOCK)){
if (li.getName() == kNameNode.getString()){
if (li.referenced &&!newName){
if (li.referenced ||!li.selected){
if (li.getPropertyName().get() == PRUint32("node")){
if (li.referenced && (*li)){
if (li.Referenced &&!li.id){
if (li.get() == '0'){
if (li.name == name){
if ((node.getLastChild() && li.referenced)!= 0){
if (li.getClass().referenced){
if (!node.getInstance().referenced){
if ((name.getName() == li.id) && (node.getLastChild() == li.getFirstChild())){
if (li.getId() == li.getId()){
if (li.getName() == '#' || li.referenced){
if (li.referenced || li.label){
if (li.referenced || li.namespaceChanged){
if (li.referenced || li.tag.get()!= '0'){
if (li.getAttributes()){
if (li.getType() == Token.BLOCK)  NodeUtil.tryMergeBlock(node, newChild);  compiler.reportCodeChange();  else{
if (!(li.referenced) || (li.name.getUnicode() == '0')){
if (li.getId() == node.getName()){
if (li.getStatus() == NodeUtil.LOCK){
if (li.referenced &&!li.short){
if (!(li.isReferenced() || li.sid.get() == ':')){
if (node.getLastChild())  Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK)  NodeUtil.tryMergeBlock(newChild);  compiler.reportCodeChange();{
if (!li.getNameForId(li.id)){
if (li.referenced || li.name.get() == name.get()){
if (node.getChildCount() > 0){
if (!referenced){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); &else if (li.getType() == Token.DELTY){
if (li.contain()){
if (li.referenced || li.name.get() == name.get()){
if (li.referenced || li.parent){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); else{
if (li.containing){
if (li.isReferenced()){
if (name.referenced){
if (!(li.referenced)){
if (li.getNodeType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild);{
if (&li.referenced){
if (li.type == Token.BLOCK){
if (node.getLastChild()) &Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild); compiler.reportCodeChange();{
if (child.referenced){
if (li.getUniqueName()){
if (node.getLastChild()) &Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild); <compiler.reportCodeChange();{
if (li.isReferenced){
if (li.referenced) else{
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); else if (li.getType() == Token.DELTY){
if (li.getName() == name){
if (li.referenced && li.id.get()){
if (li.referenced) &&else{
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); else{
if (li.getReferenced()){
if (node.getNodeInfo() == null){
if (li.exists()){
if (!LabelInfo.referenced){
if (!li.getNameForId(li.id)){
if (!li.referenced){
if (NodeUtil.referenced){
if (li.getType() == Token.Type){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); <else{
if (li && li.referenced){
if (li!= null){
if (!li.contain()){
if (name.equals(newName)){
if (li.getSupports()){
if (li.labelInfo){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); else{
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); <else if (li.getType() == Token.DELTY){
if (li.getID()!= null){
if (node.getLastChild()) <Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild); compiler.reportCodeChange();{
if (li.getFirstChild()){
if (li.id){
if (li.name == name){
if (!li.exists()){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); &else{
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); &else if (li.getType() == Token.DELTY){
if (li.getType() == Token.XUL){
if ((li.referenced) && (node)){
if (node.getLastChild()) Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild); <compiler.reportCodeChange();{
if (!node.getFirstChild()){
else{
if (!li.Referenced){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); <else if (li.getType() == Token.DELTY){
if (li.referenced &&!name){
if (li.parent){
if (li.getType() == Token.HLOCK) NodeUtil.tryMergeBlock(node, newChild);{
if (LabelInfo li){
if (li.getType() == Token.HLOCK) <NodeUtil.tryMergeBlock(node, newChild);{
if (name.get() == null){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); else{
if (li.referenced || li.isVisited()){
if (li.Referenced &&!li.id){
if ((li.referenced)){
if (!(li.isReferenced() || li.sid.get() == ':')){
if (li.hasReferenced){
if (li.get() == '<0'){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); &else if (li.getType() == Token.DELTY){
label = li.referenced; if (label){
if (li.getName()){
if (li.arena){
if ((node == null) && (li.referenced)){
if (node){
if (LabelInfo(li)){
if (node.getLastChild()) <Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild); &compiler.reportCodeChange();{
if (name.get().referenced){
&if (li.referenced){
if (li.name.get() == null){
if (li.getStatus() == NodeUtil.LOCK){
if (li.firstChild){
if ((li.referenced)!= 0){
if (li.referenced){
if (li.referenced == true){
if (li.referenced && (node)){
if (!li.isReferenced()){
if (li.referenced && nameNode){
if (!li.getSupports()){
if (li.referenced && li.parent){
if (li && (!li.referenced)){
if (node.getFirstChild()){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild);{
if (li.referenced.get() == 0){
if (li.referenced &&!li.short){
if (!li.isEmpty()){
if (li.get() == '&0'){
if (s.referenced){
if (isReferenced(li)){
if (li.referenced || li.tag.get()!= '&0'){
if (li.get().referenced){
if (li!= null){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); <else{
if (li.getNodeInfo()){
if (li == null){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); <else{
if(li.referenced){
if (li.referenced == 0){
if (li.references){
if (node.getLastChild()) Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild); compiler.reportCodeChange();{
if ((node.getLastChild() && li.referenced)!= 0){
if (li.getType() == Token.INT){
if (li &&!li.referenced){
if (li.getReferences()){
if (node.getLastChild()) <Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild); &compiler.reportCodeChange();{
if (li.referenced ||!name.equals(name)){
if (li.referenced && node.getName()){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); else if (li.getType() == Token.DELTY){
if ((li.referenced && (li.tag == '&0'))){
if (!li.id){
if (null == li){
if (node.getLastChild()) &Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild); &compiler.reportCodeChange();{
if (id.referenced){
if (li.name){
if (li.label){
if (li.Referenced){
if (node.getLastChild()) &Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild); <compiler.reportCodeChange();{
if (!(li.referenced) || (li.name.getUnicode() == '&0')){
if (node.isReferenced()){
if (li.referenced || (node.getNameForId(li)) == 0){
if (!name.equals(name)){
if (node.getLastChild()) <Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild); <compiler.reportCodeChange();{
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); else if (li.getType() == Token.DELTY){
if (node.getLastChild()) Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild); &compiler.reportCodeChange();{
if (li.referenced && li.flags & LabelEnumerate){
if (li.referenced && (*li)){
if (!li.referenced){
if (li.getLabel()){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); &else{
if ((li.referenced)!= -1){
if (name){
if (li.referenced!= null){
if (getLabelInfo(name)){
if (name.get() == li.referenced){
if (li.GetReferenced()){
if (li.getPropertyName().get() == PRUint32("node")){
if (li.getName() == '#' || li.referenced){
if (node.getLastChild()){
if (li.referenced) <&else{
if (li.getAttributes()!= null){
if (node.getLastChild()) <Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild); <compiler.reportCodeChange();{
if (li.referenced == null){
if (!name.equals(newName)){
if (li.name.get()){
if ((name.getName() == li.id) && (node.getLastChild() == li.getFirstChild())){
if (node.getLastChild()) <Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild); <compiler.reportCodeChange();{
if (li.getId() == node.getName()){
if (li.getNodeType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild);{
if (node.getChildren() == null) <NodeUtil.tryMergeBlock(node, node);{
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); &else if (li.getType() == Token.DELTY){
if ((li.referenced && (li.tag == '<0'))){
if (li.getIdent()){
if (ni.referenced){
if (node.getLastChild()) <Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild); compiler.reportCodeChange();{
if (li.referenced == false){
if (li && li.referenced){
if (li.getNodeInfo().referenced){
if (li==node){
if (li.referenced ||!name.get()){
if (li.referenced && (li.referent!= 0)){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); <else{
if (li.referenced && li.flags & ILabel_STATIC){
if (!(li.referenced) || (li.name.getUnicode() == '<0')){
if (id){
if (li.getID()){
if (name.IsEmpty()){
if (!li.hasReferenced){
if (li.referenced &&!node){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); &else{
if (node.getLastChild()) Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild); &compiler.reportCodeChange();{
if (isReferenced){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); else if (li.getType() == Token.DELTY){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); <else if (li.getType() == Token.DELTY){
if (li.getName().equals(newName)){
if(!li.referenced){
if ((li == null) && (li.referenced)){
if (li.referenced) <<else{
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); &else if (li.getType() == Token.DELTY){
if (li.referenced && name.getNameForId(node.getUnicode())){
if (node.getLastChild()) &Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild); compiler.reportCodeChange();{
if (li.getIsNaN("").referenced){
if (li.getId() == li.getId()){
if (node.getLastChild()) <Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild); compiler.reportCodeChange();{
if (li == null){
if (NS_REFERENCED(li)){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); <else if (li.getType() == Token.DELTY){
if (li.mReferenced){
if (!li.getReferenced()){
if (referenced){
if (strcmp(li.referenced)){
if (li.referenced ||!li.selected){
if (null!= li){
if (li.getType() == Token.Referenced){
if (.referenced){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); <else if (li.getType() == Token.DELTY){
if (li.get() == null){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); else if (li.getType() == Token.DELTY){
if (li.referenced!= 0){
if (getLabelInfo(li)){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); &else{
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); &else{
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); &else{
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); &else{
if (li.referenced || li.label){
if (li.getNodeType() == Token.T_NONE){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); <else if (li.getType() == Token.DELTY){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild);{
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); <else{
if (!node.referenced){
if (node.getLastChild()) &Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild); &compiler.reportCodeChange();{
if (node.getLastChild()) Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild); <compiler.reportCodeChange();{
if (li.referent){
if (li.getString()){
if (li.referenced.get()!= 0){
if (li.equals(name)){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); <else{
else if (li.referenced){
if ( (li.referenced) ){
if ((li.referenced)!= null){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); <else{
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); else if (li.getType() == Token.DELTY){
if (name.get()){
if (li.getReferencedName()){
if (li.getChildCount() > 0){
if (*li.referenced){
if ((li.referenced) 0){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); <else if (li.getType() == Token.DELTY){
if (!(li.referenced) || (li.name.getUnicode() == '0')){
if (name.get() == '&0'){
if (li.getType() == Token.Label){
if (node.getChildren() == null) NodeUtil.tryMergeBlock(node, node);{
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); else{
if (node.getLastChild()) <Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild); &compiler.reportCodeChange();{
if (li.id.get()){
if (LabelInfo.referenced){
if (newName){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); else{
if (node.getLastChild()) Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild); &compiler.reportCodeChange();{
if (li.getId()){
if (node.referenced){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); <else{
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild);{
if (li.hasAttributes){
if ((li.referenced) &0){
if (LabelInfo li.referenced){
if (li.get() == '/'){
if (li.referenced &&!li.node){
if (li.label.referenced){
if (node.getLastChild()) &Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild); <compiler.reportCodeChange();{
if (!li.getName()){
if (name.get() == '0'){
if (!li.referenced.get()){
if ( li.referenced ){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); else if (li.getType() == Token.DELTY){
if (li.getSimpleID() == &name){
if (node.getLastChild()) &Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild); compiler.reportCodeChange();{
if (li.getName().get()){
if ((li.referenced) <0){
if (li.getNodeType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild);{
if (li.IsReferenced()){
if (li.getType() == Token.STYLE_STYLE){
if (node.getParent()){
if (li.getName() == kNameNode.getString()){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); <else if (li.getType() == Token.DELTY){
if (newName.get()){
if ((li.referenced) && li.id == name){
if (li.getName().get() == kNameForId){
if (li.getClass().referenced){
if (name.getNameForId(li.id)){
if (li.getLabelInfo()){
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); else{
if (li.referenced && parent){
<else{
if (li.referenced) <else{
if (null == li.referenced){
if (li.referenced ||!name.equals(newName)){
if ((li.referenced) == 0){
if (li.referenced && name){
if (li.referenced &&!newName){
if (li.getText()){
if (li.referenced){
if (node.getLastChild()) &Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild); &compiler.reportCodeChange();{
if (li.referenced && label){
if (li.hasAlias()){
if (li.referenced || li.tag.get()!= '<0'){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); else if (li.getType() == Token.DELTY){
if (li.referenced &&!li.hasName){
if (__func__ == li.referenced){
if (li.referenced || li.tag.get()!= '0'){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); &else{
if (li.getReferenced()!= 0){
if (li.referenced &&!li.name.get()){
if (li.referenced!= -1){
if (!li.isReferenced){
if (li.exists){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); &else if (li.getType() == Token.DELTY){
if (li.referenced.get()){
if (!node.isReferenced()){
if (li.LabelInfo){
if (li.referenced) &else{
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); compiler.reportCodeChange(); &else if (li.getType() == Token.DELTY){
if (!LabelInfo.IsEmpty()){
if (li.referenced && newName){
if (node.getLastChild()) Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(newChild); <compiler.reportCodeChange();{
if (li.getType() == Token.HLOCK) &NodeUtil.tryMergeBlock(node, newChild);{
if (li.referenced &&!mDocument){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); else{
if (li && (li.referenced)){
if (li.reference){
if (li.get()){
if (li.IsContained()){
if (node.referenced){
if (aReferenced){
if (li.referenced) &<else{
if (*li){
if (li.referenced || li.namespaceChanged){
if (li.getAttributes()){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); <else if (li.getType() == Token.DELTY){
if (!li.getType()){
if (li.getUniqueID()){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); &else{
if (li.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); else{
<if (li.referenced){
if (li.getType() == Token.BLOCK){
if (li.referenced &&!name.equals(newName)){
if (li.hasChildren()){
if (li.referenced && node){
if (li.getName().get() == name){
if (node && li.referenced){
if (node.getLastChild()) Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) &NodeUtil.tryMergeBlock(newChild); compiler.reportCodeChange();{
if (li || li.referenced){
if (unreferenced){
if (!li.isReferenced(name)){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); &else if (li.getType() == Token.DELTY){
if ((li.referenced)!= 0){
if (li){
if (li.isEmpty()){
if (node.getLastChild()) Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(newChild); compiler.reportCodeChange();{
if (nameNode.referenced){
if (node.getChildren() == null) &NodeUtil.tryMergeBlock(node, node);{
switch (li.referenced){
if (strcmp(li, "referenced")){
&else{
if ((li.referenced && (li.tag == '0'))){
if ((name = getNameForId(li.id)) && (li.getType() == Token.BLOCK)){
if (li.IsEmpty()){
if (li.Referenced &&!li.name){
if (name.get() == '<0'){
if (li.getParent()){
if (li.getType() == Token.BLOCK) NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); &else if (li.getType() == Token.DELTY){
if (li.referenced > 0){
if (!li){
if (li.isReferent()){
if (li.referenced &&!refs){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); &compiler.reportCodeChange(); else if (li.getType() == Token.DELTY){
if (! li.referenced){
if (!node.getInstance().referenced){
if (li.getType() == Token.String){
if (li.get() == '0'){
if (li.getType() == Token.BLOCK) <NodeUtil.tryMergeBlock(node, newChild); <compiler.reportCodeChange(); <else{
