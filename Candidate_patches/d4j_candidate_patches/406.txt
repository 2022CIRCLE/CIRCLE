golden:
return reportMatcher(Any.ANY).returnSet();
inference:
return anySet;
return ReportMatcher(Any.ANY).returnSet();
return reportMatcher(Any.ANY);
return anySet();
return anyMatcher(Any.ANY);
return Any.ANY.returnSet();
return Any.ANY;
return reportMatcher(Any.ANY).returnSet();
return ReportSet(Any.ANY);
return Any.ANY.returnSet();
return rv;
return result;
return anyMatcher(Any.ANY).returnSet();
return any.returnSet();
return ReportSet();
return (Any.ANY).returnSet();
return set(Any.ANY);
return mSet;
return any.Set();
return anySet(Any.ANY);
return Report(Any.ANY).returnSet();
return anyMatcher();
return aSet;
return reportSet(Any.ANY);
return any;
return ReportMatcher(Any.ANY);
return reportMatcher(Any).returnSet();
return Any.Set();
return any(Any.ANY);
return (any.ANY).returnSet();
return this;
return set;
return set();
return reportMatcher(Any.aNY);
return reportMatcher(Any.ANY).get();
return (Any.ANY)returnSet();
return ReportSet(Any.ANY).returnSet();
return reportMatcher(Any.ANY, 0);
return reportMatcher(any);
return retval;
return ReportSet(any.ANY);
return aAny.ANY;
return anySet.returnSet();
return (any)returnSet();
return reportMatcher(Any);
return (any.ANY)returnSet();
return (reportMatcher(Any.ANY));
return reportMatcher(any).returnSet();
return reportMatcher(Any.ANY, anySet);
return reportMatcher(Any.ANY, &anySet);
return Set(Any.ANY);
return reportMatcher(any.ANY);
return super.returnSet();
return Any.aNY.returnSet();
return any.aNY;
return Set(any.ANY);
return reportMatcher(Any.ANY, &any);
return ANY_SET;
return reportMatcher();
return ret;
return set(any.ANY);
return anything;
return any.ANY;
return ReportAny(Any.ANY);
return reportMatcher(Any.ANY).Set();
return reportMatcher(any.aNY);
return reportMatcher(Any.null).returnSet();
return Any.ANY.ReturnSet();
return aReturnSet;
return (Any.ANY);
return anySet(any.ANY);
returnAny.ANY;
return reportMatcher( Any.ANY );
return Set();
return reportMatcher().returnSet();
return ReportAnyMatcher(Any.ANY);
return Any.aNY;
return reportMatcher(Any.ANY, any);
return ReportAny(Any.ANY).returnSet();
return Any.ANY();
return ReportMatcher(any.ANY).returnSet();
return reportMatcher(Any.ANY).returnSet ();
return reportMatcher().returnSet();
return anyMatcher(any.ANY);
return reportMatcher(Any.ANY).set();
returnany.returnSet();
return mSet(Any.ANY);
return ANY.ANY;
return(Any.ANY).returnSet();
return Any.ANY().returnSet();
return returnSet(Any.ANY);
return any(Any.ANY).returnSet();
return NS_OK;
return ruleMatcher(Any.ANY).returnSet();
return Any.Any();
return (any.ANY);
return any.aNY.returnSet();
return reportMatcher (Any.ANY).returnSet ();
return reportMatcher(Any.aNY).returnSet();
return ANY_SET();
return None;
return report_any(Any.ANY);
return reportMatcher(Any.ANY).ReturnSet();
return ReportAtom(Any.ANY).returnSet();
return reportMatcher(any.ANY).returnSet();
return AnySet();
return Any.Any.ANY;
return reportMatcher(Any.IA).returnSet();
return reportMatcher(Any.get()).returnSet();
return any();
return reportMatcher(Any.ANY, null);
return reportMatcher(Any.ANY).Set();
return reportMatcher(AnyANY);
return Report(Any.ANY);
return Report(Any.ANY).returnSet();
return (any.aNY).returnSet();
return any.set();
return 0;
return *any;
return Any.any();
return reportMatcher(Any.ANON).returnSet();
return anySet(any);
return ReportSet(Any.ANY).returnSet();
return reportMatcher(any.get()).returnSet();
return Any.ANY.get().returnSet();
return reportMatcher(Any.ANY), anySet;
return Any.any.returnSet();
return reportAttributes(Any.ANY);
return res;
return reportMatcher(Any.NUM).returnSet();
return report(Any.ANY).returnSet();
return aReturnSet();
return reportMatcher(ANY).returnSet();
return status;
return anyReturnSet();
return AnyMatcher(Any.ANY);
return ANY.ANY.returnSet();
return reportMatcher( ANY.ANY );
return aAny;
return *anySet;
return Any.returnSet();
return Any;
return reportArena(Any.ANY).returnSet();
return reportMatcher(Any.ANY, this);
return Any.aNY.returnSet();
return aAny.returnSet();
return set(any);
return(Any.ANY);
returnAny.ANY.returnSet();
return reportMatcher(Any.ANY).mSet();
return allSet(Any.ANY);
return (any) reportMatcher(Any.ANY);
return AnyANY.returnSet();

return reportMatcher(Any.ANY).return();
return (anySet)returnSet();
return anyMatcher.returnSet();
return reportMatcher(AnyANY).returnSet();
return any(any.ANY);
return ReportAny.ANY.returnSet();
return getMatcher(Any.ANY).returnSet();
return(reportMatcher(Any.ANY));
return mSet();
return report(Any.ANY);
return break;
return mSet.returnSet();
return reportMatcher(Any.CNY).returnSet();
return reportAtom(Any.ANY).returnSet();
return resultSet();
return reportMatcher(any.aNY).returnSet();
return GetAny();
return reportMatcher(Any.LONG).returnSet();
Set anySet(); return NS_OK;
return Any.ANY::returnSet();
return Any(Any.ANY);
return reportMatcher(Any, Any.ANY);
return reportMatcher(Any).returnSet();
return returnAny.ANY;
return reportMatcher(Any.ANY) == 0;
result = reportMatcher(Any.ANY); return result;
return (any.aNY)returnSet();
set = reportMatcher(Any.ANY); return set;
return reportNative(Any.ANY).returnSet();
return anyMatch(Any.ANY);
return(any.ANY);
return Any.ANY.get();
return anySet.return();
return reportMatcher(Any.ANY).returnSet(0);
return type;
return NodeSet();
return Anything.ANY;
return ReportAtom(Any.ANY);
return reportMatcher(Any.ANY) || anySet;
return anythingSet;
return reportMatcher(Any.null);
return Set(any);
return reportMatcher(Any.ANY, 1);
return reportMatcher(any).returnSet();
return ReportAny();
return reportMatcher(Any.ANY).get().returnSet();
return reportMatcher(Any.aNY).returnSet();
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv))  return rv;  return rv;
return (reportMatcher(Any.ANY).returnSet());
return reportMatcher(Any.ANY).returnSet(nsIArena::any);
return reportMatcher(Any.ANY).returnSet(mBits);
return reportMatcher(Any.ANY)? Set() : set();
return aRawMatcher(Any.ANY).returnSet();
return reportMatcher(Any.ANY)? Any.ANY : anySet;
return reportMatcher(Any.ANY, &Any.ANY.returnSet);
char tmp('0'); return rv;
return reportMatcher(Any.ANY).returnSet();
if (Any.ANY)  if (mSets.ops)  if (!mSets.ops)  return NS_ERROR_OUT_OF_MEMORY;   return NS_OK;
return NS_REINTERPRET_CAST(reportMatcher(Any.ANY)).returnSet();
return reportMatcher(Any.ANY, 0).returnSet();
return reportMatcher(Any.ANY) && m_returnSet(any);
return reportMatcher(Any.ANY, true);
return NS_REINTERPRET_CAST(nsIContent*,any.ANY).returnSet();
return reportMatcher(Any.ANY).returnSet(*this);
return reportMatcher(Any.ANY).returnSet(aValue);
char *s; if (!mMatch) return NS_OK; else  return mMatch.Set(mMatch, s);
/* * In this case, a Plot of status. */ return mkRatio(*getter_AddRefs(any));
return reportMatcher(Any.ANY).returnSet(rval);
return reportMatcher(Any.ANY).returnSet(aSet);
/* XXX - just if we can't get it. */ if (mSet)  return mSet;  else  if (!mSet)  return mSet;   return mSet;
if (!aAny)  if (any)  return any; return 0;   else  if (Any.ANY)  return 1;   else  return 1;  return 0;
if(aReturnType == Any.ANY)  return 0;  if((any.ANY.SetSet) == Any.ANY)  aReturnType = Any.ANY; return NS_OK;  if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY)  return NS_OK;   return NS_OK;
if (Any.ANY) return reportMatcher(Any.ANY); else return set;
return reportMatcher(Any.ANY).returnSet(any.arena);
return reportMatcher(Any.ANY, &any.Set);
return kNC_Any.ANY;
return reportMatcher(Any.ANY).returnSet(eSet);
return reportMatcher(Any.ANY, null).returnSet();
return retval(any.ANY);
return reportMatcher(Any.ANY, This.Set);
if (IsEmpty()) return res = reportMatcher(Any.ANY); if (NS_FAILED(res)) return res; if (!Any.IsEmpty()) return res; return res;
nsAString::const_iterator iter = Any.ANY.iterator(); if (iter) return NS_OK; if (anySet) return NS_ERROR_NULL_POINTER; return NS_OK;
return reportMatcher(Any.ANY)? set(Any.ANY) : set(Any.ANY);
return reportMatcher(Any.ANY).returnSet(Set);
if ((rv = reportMatcher(Any.ANY))!= null)  rv = rv;  else  rv = aSet;  return rv;
return reportMatcher(Any.ANY).returnSet(null);
return (reportMatcher(Any.ANY)).returnSet();
return reportMatcher(Any.ANY, AllSet);
return reportMatcher(Any.ANY).returnSet(mSet);
nsresult rv; return rv;
return mAttr(Any.ANY);
return nsDependentCString(any.ANY).returnSet();
if (Any.ANY) return Set(Any.ANY); else return Set(Any.ANY);
return reportMatcher(Any.ANY)? ReportSet() : 0;
if(Any.ANY)  return (anySet);  return (reportMatcher(Any.ANY).returnSet());
if (Any.ANY)  return reportMatcher(Any.ANY);  else  if (Any.ANY)  /* If anySet is specified, do not give the system anything else. */ if (Any.ANY)  /* Set any set. */ if (Any.ANY)  return anySet;   else  return Any.ANY;  return 0;
aReturn = ReportSet(Any.ANY); if (!aReturn) return NS_ERROR_FAILURE; return NS_OK;
return nsCompatibleMatcher::ReturnSet(any.ANY);
if (IsSet())  return ReportMatcher(Any.ANY).returnSet();  return 0;
if (!anySet)  return 1;  return 0;
return (ReportSet) reportMatcher(Any.ANY).returnSet();
if (!any.aNY) return null; if (!any.set) return null; return any.returnSet();
if (any.IsEmpty())  return anySet;  return NS_OK;
rv = NS_NewISupportsArray(getter_AddRefs(rv)); if (NS_FAILED(rv))  return rv;  return NS_OK;
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv)) return rv; if (rv == Any.ANY) return rv; return rv;
return mAttrMatcher(Any.ANY).returnSet();
return gAny.ANY.returnSet();
return mSet(Any.ANY).returnSet();
if(any.ANY)  return NS_OK;  return any;
return mAttributes(Any.ANY);
if (mTest)  nsIAtom* a = (nsIAtom*)any.mTest; a.returnSet(&a);  return NS_OK;
return reportMatcher(Any.ANY, IFM_Any.IFM_Set);
if (any)  mSet = Any.ANY;  else  mSet = any;  return mSet;
return reportMatcher(Any.ANY)? Set(Set(Any.ANY)) : Set(Set(Any.ANY));
return aRawSet();
if ((NS_STATIC_CAST(rv, Any.ANY)) == 0) return NS_ERROR_NOT_INITIALIZED; return NS_OK;
if ((((RawSet)Any.ANY)!= 0) || ((RawSet)Any.ANY)!= 0)  return 0;  return 0;
rv = reportMatcher(Any.ANY).returnSet(); if (rv)  return rv;  return rv;
return mTargetReportManager.returnSet();
if (Any.ANY == aSet)  rv = aSet;  else  rv = ret;  return rv;
return reportMatcher(Any.ANY)? anySet : anySet;
return reportMatcher(Any.ANY).returnSet(mFlags);
NS_IF_RELEASE(dataSet); return NS_OK;
return reportMatcher(Any.ANY)!= 0;
return reportMatcher(Any.ANY,(int));
return reportMatcher(Any.ANY)? set : returnSet();
return kNoSet;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; else <rv = aSet; return rv;
if (any) <mSet = Any.ANY; <else <mSet = any; <return mSet;
if(aReturnType == Any.ANY) &return 0; if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if(aReturnType == Any.ANY) <return 0; if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!aAny) if (any) return any; return 0; else if (Any.ANY) return 1; else return 1; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; <else <rv = aSet; &return rv;
if(aReturnType == Any.ANY) &return 0; &if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) <return reportMatcher(Any.ANY); <else &if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; &else &rv = aSet; return rv;
if (Any.ANY == aSet) rv = aSet; &else rv = ret; <return rv;
if (any) mSet = Any.ANY; else <mSet = any; <return mSet;
if (Any.ANY == aSet) &rv = aSet; else rv = ret; return rv;
if (any) <mSet = Any.ANY; else &mSet = any; <return mSet;
if (mTest) &nsIAtom* a = (nsIAtom*)any.mTest; a.returnSet(&a); return NS_OK;
if (any) &mSet = Any.ANY; <else <mSet = any; return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; &else if (!mSet) <return mSet; return mSet;
if(aReturnType == Any.ANY) <return 0; <if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; <else <rv = aSet; return rv;
if (!aAny) &if (any) &return any; return 0; else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) &return 0; <if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if(aReturnType == Any.ANY) <return 0; <if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; <else rv = aSet; <return rv;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; <else <if (!mSet) return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; <else if (!mSet) &return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; &else <if (!mSet) return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; else if (!mSet) &return mSet; return mSet;
if (Any.ANY == aSet) <rv = aSet; <else <rv = ret; return rv;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; &else rv = aSet; return rv;
if (!aAny) if (any) &return any; return 0; <<else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) <if (mSets.ops) if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; &else rv = aSet; return rv;
if(aReturnType == Any.ANY) &return 0; <if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) return reportMatcher(Any.ANY); &else <if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) <rv = aSet; else rv = ret; return rv;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; <else <rv = aSet; <return rv;
if (Any.ANY == aSet) &rv = aSet; else rv = ret; &return rv;
if (!aAny) <if (any) return any; return 0; &<else if (Any.ANY) return 1; else return 1; return 0;
rv = NS_NewISupportsArray(getter_AddRefs(rv)); if (NS_FAILED(rv)) return rv; <return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; else &rv = aSet; &return rv;
if (any) &mSet = Any.ANY; <else &mSet = any; <return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; &else &rv = aSet; &return rv;
if(aReturnType == Any.ANY) return 0; <if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY == aSet) <rv = aSet; &else rv = ret; &return rv;
if (Any.ANY) if (mSets.ops) <if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (any) <mSet = Any.ANY; else mSet = any; return mSet;
if (Any.ANY == aSet) rv = aSet; <else <rv = ret; <return rv;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; else if (!mSet) return mSet; return mSet;
if(aReturnType == Any.ANY) return 0; &if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!aAny) &if (any) return any; return 0; else if (Any.ANY) return 1; else return 1; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; else rv = aSet; &return rv;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; else rv = aSet; <return rv;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; <else <if (!mSet) <return mSet; return mSet;
if (mTest) <nsIAtom* a = (nsIAtom*)any.mTest; a.returnSet(&a); return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; <else &rv = aSet; <return rv;
if (Any.ANY) <return reportMatcher(Any.ANY); else &if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
rv = NS_NewISupportsArray(getter_AddRefs(rv)); if (NS_FAILED(rv)) &return rv; return NS_OK;
if (Any.ANY) <return reportMatcher(Any.ANY); <else if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; &else <rv = aSet; <return rv;
if (Any.ANY) if (mSets.ops) &if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; <else rv = aSet; &return rv;
if (!aAny) <if (any) return any; return 0; &&else if (Any.ANY) return 1; else return 1; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; <else &rv = aSet; &return rv;
if (any) <mSet = Any.ANY; <else <mSet = any; return mSet;
if (Any.ANY) return reportMatcher(Any.ANY); &else &if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any.IsEmpty()) &return anySet; &return NS_OK;
if (Any.ANY == aSet) <rv = aSet; &else &rv = ret; <return rv;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; else rv = aSet; return rv;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; &else &rv = aSet; <return rv;
if (!aAny) &if (any) return any; return 0; <else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) if (mSets.ops) <if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (any) mSet = Any.ANY; &else mSet = any; <return mSet;
if(aReturnType == Any.ANY) &return 0; <if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!aAny) if (any) <return any; return 0; &<else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) return reportMatcher(Any.ANY); else if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; <else rv = aSet; <return rv;
if (any) <mSet = Any.ANY; <else <mSet = any; &return mSet;
if (Any.ANY) return reportMatcher(Any.ANY); <else if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) if (mSets.ops) if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (Any.ANY) <if (mSets.ops) &if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; <else &rv = aSet; &return rv;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; else &if (!mSet) &return mSet; return mSet;
if(aReturnType == Any.ANY) <return 0; if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) <return reportMatcher(Any.ANY); &else &if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
char tmp('0'); return rv;
if (!aAny) if (any) <return any; return 0; <&else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) return 0; &if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; &else rv = aSet; <return rv;
if(aReturnType == Any.ANY) return 0; if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) return reportMatcher(Any.ANY); &else &if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) <rv = aSet; else &rv = ret; <return rv;
if (Any.ANY == aSet) rv = aSet; <else &rv = ret; <return rv;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; else &if (!mSet) <return mSet; return mSet;
if (Any.ANY) <return reportMatcher(Any.ANY); &else <if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if(aReturnType == Any.ANY) &return 0; &if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((((RawSet)Any.ANY)!= 0) || ((RawSet)Any.ANY)!= 0) &return 0; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; <else <rv = aSet; <return rv;
if (any) <mSet = Any.ANY; else <mSet = any; return mSet;
if (Any.ANY == aSet) rv = aSet; else rv = ret; <return rv;
if (Any.ANY) <if (mSets.ops) &if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; <else if (!mSet) &return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; else if (!mSet) <return mSet; return mSet;
if (Any.ANY == aSet) &rv = aSet; <else <rv = ret; <return rv;
if (Any.ANY == aSet) rv = aSet; else &rv = ret; return rv;
if (Any.ANY) <return reportMatcher(Any.ANY); else <if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) &return reportMatcher(Any.ANY); <else if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) &if (mSets.ops) <if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if(any.ANY) return NS_OK; &return any;
if (!aAny) <if (any) return any; return 0; <&else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) &return reportMatcher(Any.ANY); <else &if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if(aReturnType == Any.ANY) &return 0; &if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
rv = NS_NewISupportsArray(getter_AddRefs(rv)); if (NS_FAILED(rv)) <return rv; return NS_OK;
if (Any.ANY) <if (mSets.ops) <if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (Any.ANY == aSet) <rv = aSet; else &rv = ret; &return rv;
if (mTest) &nsIAtom* a = (nsIAtom*)any.mTest; a.returnSet(&a); &return NS_OK;
if (Any.ANY == aSet) &rv = aSet; else <rv = ret; &return rv;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; else <if (!mSet) <return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; <else <if (!mSet) return mSet; return mSet;
if (!aAny) if (any) return any; return 0; &&else if (Any.ANY) return 1; else return 1; return 0;
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv)) &return rv; return rv;
if (any) mSet = Any.ANY; &else &mSet = any; <return mSet;
if (!aAny) <if (any) <return any; return 0; &&else if (Any.ANY) return 1; else return 1; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; &else <rv = aSet; <return rv;
if (!aAny) if (any) &return any; return 0; <else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) return reportMatcher(Any.ANY); <else &if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) if (mSets.ops) if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; <else if (!mSet) return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; <else &rv = aSet; <return rv;
if (Any.ANY == aSet) <rv = aSet; &else rv = ret; return rv;
rv = NS_NewISupportsArray(getter_AddRefs(rv)); if (NS_FAILED(rv)) <return rv; &return NS_OK;
if ((((RawSet)Any.ANY)!= 0) || ((RawSet)Any.ANY)!= 0) &return 0; <return 0;
if (Any.ANY) <return reportMatcher(Any.ANY); else <if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) &if (mSets.ops) if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (any) &mSet = Any.ANY; &else &mSet = any; &return mSet;
if (Any.ANY) <if (mSets.ops) if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (!aAny) if (any) &return any; return 0; &<else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) &if (mSets.ops) &if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (!aAny) &if (any) <return any; return 0; <&else if (Any.ANY) return 1; else return 1; return 0;
if (any) mSet = Any.ANY; else mSet = any; return mSet;
if (Any.ANY == aSet) &rv = aSet; else &rv = ret; <return rv;
if(any.ANY) &return NS_OK; return any;
if (!aAny) &if (any) return any; return 0; &else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY == aSet) &rv = aSet; &else rv = ret; &return rv;
if (!aAny) if (any) &return any; return 0; <&else if (Any.ANY) return 1; else return 1; return 0;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; <else &if (!mSet) <return mSet; return mSet;
if (any) mSet = Any.ANY; <else mSet = any; <return mSet;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; else <if (!mSet) return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; &else <rv = aSet; &return rv;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; else <rv = aSet; <return rv;
if (Any.ANY == aSet) <rv = aSet; else &rv = ret; return rv;
if (Any.ANY) <return reportMatcher(Any.ANY); else &if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
/* XXX - just if we can't get it. */ if (mSet) return mSet; else &if (!mSet) return mSet; return mSet;
if(aReturnType == Any.ANY) &return 0; &if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) &return reportMatcher(Any.ANY); &else &if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) return reportMatcher(Any.ANY); else if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; else if (!mSet) &return mSet; return mSet;
if (any) <mSet = Any.ANY; else <mSet = any; &return mSet;
if (!aAny) &if (any) <return any; return 0; &else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) &return 0; &if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; &else <rv = aSet; <return rv;
if (Any.ANY == aSet) &rv = aSet; <else &rv = ret; return rv;
if (Any.ANY) if (mSets.ops) &if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (Any.ANY) &if (mSets.ops) <if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if(aReturnType == Any.ANY) &return 0; <if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) &return reportMatcher(Any.ANY); &else <if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) <return reportMatcher(Any.ANY); &else if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) <if (mSets.ops) <if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; <else <rv = aSet; &return rv;
if (any) mSet = Any.ANY; <else &mSet = any; &return mSet;
if (Any.ANY == aSet) rv = aSet; else <rv = ret; return rv;
if (any) &mSet = Any.ANY; &else <mSet = any; &return mSet;
if(aReturnType == Any.ANY) return 0; if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) <if (mSets.ops) <if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (any) <mSet = Any.ANY; <else &mSet = any; &return mSet;
if (!aAny) &if (any) <return any; return 0; <else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY == aSet) rv = aSet; <else <rv = ret; return rv;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; &else rv = aSet; &return rv;
if (!anySet) return 1; return 0;
if(aReturnType == Any.ANY) <return 0; &if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) return reportMatcher(Any.ANY); <else &if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) rv = aSet; &else rv = ret; return rv;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; else <rv = aSet; <return rv;
if (Any.ANY == aSet) rv = aSet; <else &rv = ret; return rv;
if (Any.ANY) <if (mSets.ops) &if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) return mSet; &else if (!mSet) return mSet; return mSet;
if(aReturnType == Any.ANY) <return 0; if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; else rv = aSet; <return rv;
if (!anySet) return 1; <return 0;
if (Any.ANY) if (mSets.ops) &if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; &else <rv = aSet; return rv;
if (Any.ANY) return reportMatcher(Any.ANY); &else if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
/* XXX - just if we can't get it. */ if (mSet) return mSet; &else &if (!mSet) return mSet; return mSet;
if (Any.ANY) if (mSets.ops) if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (Any.ANY) <return reportMatcher(Any.ANY); &else <if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any) <mSet = Any.ANY; <else mSet = any; <return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; <else <rv = aSet; &return rv;
if(aReturnType == Any.ANY) &return 0; <if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) &if (mSets.ops) <if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) return mSet; <else &if (!mSet) <return mSet; return mSet;
if (Any.ANY) return reportMatcher(Any.ANY); else &if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
rv = reportMatcher(Any.ANY).returnSet(); if (rv) &return rv; &return rv;
if (Any.ANY) <return reportMatcher(Any.ANY); else &if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; <else if (!mSet) <return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; <else rv = aSet; <return rv;
rv = NS_NewISupportsArray(getter_AddRefs(rv)); if (NS_FAILED(rv)) return rv; &return NS_OK;
if (any) mSet = Any.ANY; <else mSet = any; return mSet;
if (!aAny) &if (any) &return any; return 0; &else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) <return reportMatcher(Any.ANY); else if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any.IsEmpty()) return anySet; return NS_OK;
if (any) mSet = Any.ANY; <else &mSet = any; return mSet;
if (Any.ANY == aSet) <rv = aSet; else <rv = ret; return rv;
if (Any.ANY == aSet) rv = aSet; else rv = ret; return rv;
if (!aAny) <if (any) &return any; return 0; else if (Any.ANY) return 1; else return 1; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; <else &rv = aSet; &return rv;
if (Any.ANY) <return reportMatcher(Any.ANY); &else &if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) rv = aSet; else <rv = ret; &return rv;
if (Any.ANY) &if (mSets.ops) if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if(aReturnType == Any.ANY) return 0; <if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) &if (mSets.ops) <if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (Any.ANY) &return reportMatcher(Any.ANY); else if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (!aAny) if (any) <return any; return 0; &else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) <return 0; &if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; &else &if (!mSet) &return mSet; return mSet;
if (any.IsEmpty()) <return anySet; &return NS_OK;
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv)) <return rv; return rv;
if (Any.ANY) &if (mSets.ops) <if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) return mSet; else <if (!mSet) <return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; &else if (!mSet) &return mSet; return mSet;
char *s; if (!mMatch) return NS_OK; else return mMatch.Set(mMatch, s);
if (Any.ANY) &if (mSets.ops) if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if(aReturnType == Any.ANY) &return 0; if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!aAny) if (any) return any; return 0; <else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) &return 0; if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) &if (mSets.ops) &if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (Any.ANY) <if (mSets.ops) <if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (!anySet) &return 1; &return 0;
/* XXX - just if we can't get it. */ if (mSet) return mSet; <else if (!mSet) <return mSet; return mSet;
if (any) <mSet = Any.ANY; else &mSet = any; return mSet;
if (any) mSet = Any.ANY; &else <mSet = any; &return mSet;
if (Any.ANY) &if (mSets.ops) <if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (any) &mSet = Any.ANY; &else <mSet = any; <return mSet;
if (Any.ANY) return reportMatcher(Any.ANY); else &if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) &if (mSets.ops) <if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (Any.ANY) <return reportMatcher(Any.ANY); &else if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if ((((RawSet)Any.ANY)!= 0) || ((RawSet)Any.ANY)!= 0) return 0; <return 0;
if(aReturnType == Any.ANY) return 0; if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if(aReturnType == Any.ANY) return 0; if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if(any.ANY) &return NS_OK; <return any;
if (Any.ANY == aSet) <rv = aSet; <else <rv = ret; <return rv;
if (!anySet) <return 1; &return 0;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; &else <if (!mSet) <return mSet; return mSet;
if(any.ANY) &return NS_OK; &return any;
if (!aAny) &if (any) <return any; return 0; &<else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) return reportMatcher(Any.ANY); <else <if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any.IsEmpty()) return anySet; <return NS_OK;
if (Any.ANY == aSet) &rv = aSet; else &rv = ret; &return rv;
if(aReturnType == Any.ANY) &return 0; &if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (any.IsEmpty()) <return anySet; return NS_OK;
if (any) mSet = Any.ANY; &else mSet = any; &return mSet;
if (Any.ANY) &return reportMatcher(Any.ANY); <else &if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any) &mSet = Any.ANY; else mSet = any; &return mSet;
if(Any.ANY) &return (anySet); <return (reportMatcher(Any.ANY).returnSet());
if (any) &mSet = Any.ANY; else &mSet = any; &return mSet;
if (any) &mSet = Any.ANY; else mSet = any; <return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; else if (!mSet) <return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; else rv = aSet; &return rv;
if (!aAny) if (any) &return any; return 0; else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY == aSet) <rv = aSet; &else <rv = ret; <return rv;
if(aReturnType == Any.ANY) &return 0; if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) <if (mSets.ops) <if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (!aAny) if (any) return any; return 0; &else if (Any.ANY) return 1; else return 1; return 0;
if (!aAny) if (any) <return any; return 0; &&else if (Any.ANY) return 1; else return 1; return 0;
if(Any.ANY) &return (anySet); &return (reportMatcher(Any.ANY).returnSet());
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; else &rv = aSet; &return rv;
if(Any.ANY) &return (anySet); return (reportMatcher(Any.ANY).returnSet());
/* XXX - just if we can't get it. */ if (mSet) <return mSet; else if (!mSet) &return mSet; return mSet;
if (Any.ANY) &return reportMatcher(Any.ANY); &else if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) rv = aSet; &else &rv = ret; <return rv;
if (mTest) nsIAtom* a = (nsIAtom*)any.mTest; a.returnSet(&a); return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; &else rv = aSet; &return rv;
/* XXX - just if we can't get it. */ if (mSet) return mSet; <else <if (!mSet) <return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; &else &if (!mSet) <return mSet; return mSet;
if (Any.ANY) &return reportMatcher(Any.ANY); <else if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) return reportMatcher(Any.ANY); <else if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) <if (mSets.ops) if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (Any.ANY) return reportMatcher(Any.ANY); <else if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) <rv = aSet; else rv = ret; &return rv;
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv)) &return rv; &return rv;
char *s; if (!mMatch) return NS_OK; else <return mMatch.Set(mMatch, s);
rv = NS_NewISupportsArray(getter_AddRefs(rv)); if (NS_FAILED(rv)) <return rv; <return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) return mSet; else <if (!mSet) &return mSet; return mSet;
if (!aAny) if (any) &return any; return 0; &else if (Any.ANY) return 1; else return 1; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; <else rv = aSet; return rv;
if (Any.ANY) <return reportMatcher(Any.ANY); <else &if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) <return reportMatcher(Any.ANY); <else <if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any) <mSet = Any.ANY; &else mSet = any; return mSet;
if(any.ANY) return NS_OK; <return any;
if (Any.ANY == aSet) <rv = aSet; <else rv = ret; &return rv;
if (Any.ANY == aSet) rv = aSet; else <rv = ret; <return rv;
if (Any.ANY == aSet) rv = aSet; <else rv = ret; <return rv;
rv = NS_NewISupportsArray(getter_AddRefs(rv)); if (NS_FAILED(rv)) return rv; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; &else &rv = aSet; <return rv;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; &else if (!mSet) &return mSet; return mSet;
if (Any.ANY) if (mSets.ops) <if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv)) return rv; &return rv;
if (Any.ANY) <return reportMatcher(Any.ANY); &else <if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) <return reportMatcher(Any.ANY); <else &if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (!anySet) &return 1; <return 0;
if (!aAny) <if (any) <return any; return 0; else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) <return 0; if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (mTest) &nsIAtom* a = (nsIAtom*)any.mTest; a.returnSet(&a); <return NS_OK;
if(aReturnType == Any.ANY) &return 0; if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; else <rv = aSet; &return rv;
if (IsSet()) <return ReportMatcher(Any.ANY).returnSet(); return 0;
if (Any.ANY == aSet) rv = aSet; <else rv = ret; return rv;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; &else &if (!mSet) &return mSet; return mSet;
if (!aAny) <if (any) &return any; return 0; <<else if (Any.ANY) return 1; else return 1; return 0;
if (!aAny) <if (any) <return any; return 0; &else if (Any.ANY) return 1; else return 1; return 0;
if (any) mSet = Any.ANY; else <mSet = any; &return mSet;
if (Any.ANY) <if (mSets.ops) &if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (Any.ANY) &return reportMatcher(Any.ANY); <else <if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) if (mSets.ops) if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if(aReturnType == Any.ANY) &return 0; &if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((((RawSet)Any.ANY)!= 0) || ((RawSet)Any.ANY)!= 0) <return 0; <return 0;
if (any) mSet = Any.ANY; else mSet = any; <return mSet;
if (Any.ANY) &return reportMatcher(Any.ANY); &else <if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) <if (mSets.ops) &if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; else &if (!mSet) return mSet; return mSet;
if (!aAny) &if (any) &return any; return 0; &&else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY == aSet) &rv = aSet; else <rv = ret; <return rv;
if (any) &mSet = Any.ANY; else &mSet = any; return mSet;
if (Any.ANY) &if (mSets.ops) if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if(aReturnType == Any.ANY) &return 0; <if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (IsSet()) &return ReportMatcher(Any.ANY).returnSet(); &return 0;
if (any) mSet = Any.ANY; else &mSet = any; &return mSet;
if (Any.ANY == aSet) <rv = aSet; &else &rv = ret; &return rv;
if (Any.ANY) <if (mSets.ops) if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; else <rv = aSet; &return rv;
if (any) mSet = Any.ANY; &else &mSet = any; &return mSet;
if (Any.ANY == aSet) rv = aSet; <else &rv = ret; &return rv;
if (any) <mSet = Any.ANY; &else &mSet = any; return mSet;
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv)) <return rv; <return rv;
if (any) <mSet = Any.ANY; else &mSet = any; &return mSet;
if (Any.ANY == aSet) rv = aSet; &else <rv = ret; &return rv;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; else &rv = aSet; <return rv;
/* XXX - just if we can't get it. */ if (mSet) return mSet; <else &if (!mSet) return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; &else <rv = aSet; &return rv;
if (any) &mSet = Any.ANY; <else <mSet = any; <return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; else rv = aSet; <return rv;
if(aReturnType == Any.ANY) return 0; <if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if(aReturnType == Any.ANY) return 0; if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (any.IsEmpty()) &return anySet; <return NS_OK;
if (!aAny) <if (any) <return any; return 0; <&else if (Any.ANY) return 1; else return 1; return 0;
if (!aAny) <if (any) return any; return 0; &else if (Any.ANY) return 1; else return 1; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; &else <rv = aSet; &return rv;
/* XXX - just if we can't get it. */ if (mSet) return mSet; <else &if (!mSet) &return mSet; return mSet;
if (Any.ANY == aSet) <rv = aSet; &else <rv = ret; return rv;
if(aReturnType == Any.ANY) return 0; <if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) &return reportMatcher(Any.ANY); else <if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if ((((RawSet)Any.ANY)!= 0) || ((RawSet)Any.ANY)!= 0) <return 0; &return 0;
if (Any.ANY == aSet) rv = aSet; else &rv = ret; &return rv;
/* XXX - just if we can't get it. */ if (mSet) return mSet; else <if (!mSet) return mSet; return mSet;
if (mTest) nsIAtom* a = (nsIAtom*)any.mTest; a.returnSet(&a); <return NS_OK;
if(aReturnType == Any.ANY) <return 0; &if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (any) &mSet = Any.ANY; &else <mSet = any; return mSet;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; <else &if (!mSet) &return mSet; return mSet;
if (any) <mSet = Any.ANY; <else &mSet = any; return mSet;
if (Any.ANY == aSet) &rv = aSet; &else &rv = ret; return rv;
if (Any.ANY) &if (mSets.ops) <if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; else <if (!mSet) &return mSet; return mSet;
if(aReturnType == Any.ANY) <return 0; if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; &else &rv = aSet; &return rv;
if (IsSet()) return ReportMatcher(Any.ANY).returnSet(); &return 0;
if ((((RawSet)Any.ANY)!= 0) || ((RawSet)Any.ANY)!= 0) &return 0; &return 0;
if (!aAny) &if (any) return any; return 0; <&else if (Any.ANY) return 1; else return 1; return 0;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; <else <if (!mSet) &return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; &else &rv = aSet; &return rv;
if (!aAny) &if (any) return any; return 0; <<else if (Any.ANY) return 1; else return 1; return 0;
if (any) &mSet = Any.ANY; &else &mSet = any; return mSet;
if ((((RawSet)Any.ANY)!= 0) || ((RawSet)Any.ANY)!= 0) return 0; return 0;
if (any) mSet = Any.ANY; else &mSet = any; <return mSet;
if (Any.ANY) &return reportMatcher(Any.ANY); else &if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) return reportMatcher(Any.ANY); <else <if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (IsSet()) &return ReportMatcher(Any.ANY).returnSet(); return 0;
if (Any.ANY == aSet) &rv = aSet; &else <rv = ret; &return rv;
if (Any.ANY == aSet) &rv = aSet; else &rv = ret; return rv;
if(aReturnType == Any.ANY) <return 0; <if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; <else if (!mSet) <return mSet; return mSet;
if ((((RawSet)Any.ANY)!= 0) || ((RawSet)Any.ANY)!= 0) <return 0; return 0;
if (any) mSet = Any.ANY; else <mSet = any; return mSet;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; &else <if (!mSet) &return mSet; return mSet;
if (any) &mSet = Any.ANY; <else &mSet = any; return mSet;
if (Any.ANY) if (mSets.ops) <if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
char tmp('<0'); return rv;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; &else if (!mSet) &return mSet; return mSet;
if (Any.ANY) return reportMatcher(Any.ANY); <else &if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any) <mSet = Any.ANY; else mSet = any; <return mSet;
if (Any.ANY) <if (mSets.ops) if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (Any.ANY) <if (mSets.ops) &if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (Any.ANY) &if (mSets.ops) &if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (Any.ANY) if (mSets.ops) <if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if(aReturnType == Any.ANY) return 0; &if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; &else <rv = aSet; return rv;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; <else <if (!mSet) <return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; &else rv = aSet; <return rv;
if (Any.ANY) &return reportMatcher(Any.ANY); else <if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if(aReturnType == Any.ANY) <return 0; <if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!aAny) if (any) return any; return 0; <<else if (Any.ANY) return 1; else return 1; return 0;
if(Any.ANY) <return (anySet); &return (reportMatcher(Any.ANY).returnSet());
if (!aAny) &if (any) &return any; return 0; <&else if (Any.ANY) return 1; else return 1; return 0;
if (!aAny) if (any) <return any; return 0; <<else if (Any.ANY) return 1; else return 1; return 0;
rv = NS_NewISupportsArray(getter_AddRefs(rv)); if (NS_FAILED(rv)) &return rv; <return NS_OK;
if (Any.ANY == aSet) &rv = aSet; &else &rv = ret; &return rv;
if (!aAny) &if (any) &return any; return 0; <else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) return 0; if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!aAny) <if (any) return any; return 0; <else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) <return 0; if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; else &if (!mSet) <return mSet; return mSet;
if (!aAny) <if (any) return any; return 0; else if (Any.ANY) return 1; else return 1; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; <else rv = aSet; &return rv;
if (Any.ANY) if (mSets.ops) &if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if(aReturnType == Any.ANY) return 0; <if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; <else rv = aSet; return rv;
if (Any.ANY == aSet) <rv = aSet; &else rv = ret; <return rv;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; &else <if (!mSet) <return mSet; return mSet;
if (Any.ANY) if (mSets.ops) <if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (Any.ANY == aSet) rv = aSet; <else rv = ret; &return rv;
if (Any.ANY) if (mSets.ops) &if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if(aReturnType == Any.ANY) <return 0; &if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if(aReturnType == Any.ANY) return 0; &if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) if (mSets.ops) <if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (Any.ANY) &if (mSets.ops) if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (Any.ANY) &return reportMatcher(Any.ANY); <else &if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) return reportMatcher(Any.ANY); &else &if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any) mSet = Any.ANY; &else &mSet = any; return mSet;
if(aReturnType == Any.ANY) return 0; &if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) &if (mSets.ops) &if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (!aAny) <if (any) &return any; return 0; <else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) &if (mSets.ops) &if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (any) &mSet = Any.ANY; else &mSet = any; <return mSet;
if(aReturnType == Any.ANY) &return 0; if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!aAny) <if (any) &return any; return 0; &else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) &if (mSets.ops) &if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; else <rv = aSet; &return rv;
if (Any.ANY) &if (mSets.ops) &if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; else <rv = aSet; return rv;
if(aReturnType == Any.ANY) return 0; if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((((RawSet)Any.ANY)!= 0) || ((RawSet)Any.ANY)!= 0) return 0; &return 0;
if(aReturnType == Any.ANY) return 0; <if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if(aReturnType == Any.ANY) <return 0; <if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY == aSet) rv = aSet; &else <rv = ret; return rv;
if (!aAny) <if (any) <return any; return 0; &<else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) &return reportMatcher(Any.ANY); <else if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; else if (!mSet) return mSet; return mSet;
if (Any.ANY) &if (mSets.ops) if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (!aAny) <if (any) &return any; return 0; <&else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY == aSet) &rv = aSet; <else &rv = ret; &return rv;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; <else rv = aSet; return rv;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; <else rv = aSet; &return rv;
if(any.ANY) <return NS_OK; &return any;
if (Any.ANY) <if (mSets.ops) &if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (Any.ANY) <return reportMatcher(Any.ANY); <else if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any.IsEmpty()) &return anySet; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; <else &if (!mSet) return mSet; return mSet;
if (any) &mSet = Any.ANY; else <mSet = any; return mSet;
if (Any.ANY) &if (mSets.ops) if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if(Any.ANY) return (anySet); return (reportMatcher(Any.ANY).returnSet());
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; else rv = aSet; return rv;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; <else &rv = aSet; <return rv;
if (any) mSet = Any.ANY; <else <mSet = any; <return mSet;
if(aReturnType == Any.ANY) <return 0; &if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!aAny) <if (any) <return any; return 0; <else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) return 0; if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) <return reportMatcher(Any.ANY); <else <if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) <rv = aSet; else <rv = ret; &return rv;
if (Any.ANY) return reportMatcher(Any.ANY); else <if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) &return reportMatcher(Any.ANY); &else &if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) return reportMatcher(Any.ANY); else if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv)) &return rv; <return rv;
if (!aAny) <if (any) &return any; return 0; &<else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY) if (mSets.ops) if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; else rv = aSet; &return rv;
if (Any.ANY) if (mSets.ops) &if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (any) mSet = Any.ANY; &else <mSet = any; <return mSet;
if (any) &mSet = Any.ANY; else mSet = any; return mSet;
if (Any.ANY) &return reportMatcher(Any.ANY); else &if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if(aReturnType == Any.ANY) <return 0; &if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; else <rv = aSet; return rv;
if (Any.ANY) <return reportMatcher(Any.ANY); else <if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; &else <if (!mSet) return mSet; return mSet;
if (!aAny) &if (any) return any; return 0; &<else if (Any.ANY) return 1; else return 1; return 0;
if(Any.ANY) return (anySet); &return (reportMatcher(Any.ANY).returnSet());
if (Any.ANY) <if (mSets.ops) <if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (any) &mSet = Any.ANY; <else <mSet = any; &return mSet;
if (Any.ANY == aSet) rv = aSet; &else <rv = ret; <return rv;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; else rv = aSet; return rv;
if (any) &mSet = Any.ANY; else <mSet = any; <return mSet;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; <else <if (!mSet) return mSet; return mSet;
if (any) mSet = Any.ANY; <else mSet = any; &return mSet;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; else <if (!mSet) <return mSet; return mSet;
if (Any.ANY) <if (mSets.ops) if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if(aReturnType == Any.ANY) &return 0; &if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; else <if (!mSet) &return mSet; return mSet;
if (any) &mSet = Any.ANY; &else &mSet = any; <return mSet;
if (any) &mSet = Any.ANY; &else mSet = any; return mSet;
if (Any.ANY) return reportMatcher(Any.ANY); else <if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if(any.ANY) <return NS_OK; return any;
if (Any.ANY == aSet) &rv = aSet; &else <rv = ret; <return rv;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; else <rv = aSet; <return rv;
if (Any.ANY) &if (mSets.ops) &if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (Any.ANY == aSet) &rv = aSet; <else rv = ret; <return rv;
if (Any.ANY) if (mSets.ops) if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; <else if (!mSet) return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; else &if (!mSet) &return mSet; return mSet;
if(aReturnType == Any.ANY) return 0; &if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (IsSet()) return ReportMatcher(Any.ANY).returnSet(); return 0;
if (any) <mSet = Any.ANY; &else &mSet = any; <return mSet;
rv = reportMatcher(Any.ANY).returnSet(); if (rv) <return rv; <return rv;
if (Any.ANY) &return reportMatcher(Any.ANY); &else if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if(aReturnType == Any.ANY) &return 0; &if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (IsSet()) <return ReportMatcher(Any.ANY).returnSet(); &return 0;
if(Any.ANY) <return (anySet); return (reportMatcher(Any.ANY).returnSet());
if (any) mSet = Any.ANY; <else <mSet = any; return mSet;
if (Any.ANY) <return reportMatcher(Any.ANY); &else if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) <if (mSets.ops) &if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; &else if (!mSet) return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; else &rv = aSet; return rv;
if (any) &mSet = Any.ANY; else <mSet = any; &return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; else &rv = aSet; &return rv;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; &else &rv = aSet; return rv;
if (Any.ANY == aSet) <rv = aSet; &else &rv = ret; return rv;
if (Any.ANY) <if (mSets.ops) <if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (Any.ANY == aSet) &rv = aSet; &else &rv = ret; <return rv;
if (Any.ANY) <return reportMatcher(Any.ANY); &else &if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) if (mSets.ops) &if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (any.IsEmpty()) return anySet; &return NS_OK;
if (Any.ANY) &if (mSets.ops) if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; else &rv = aSet; return rv;
if(Any.ANY) return (anySet); <return (reportMatcher(Any.ANY).returnSet());
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; <else &rv = aSet; return rv;
if (Any.ANY) &return reportMatcher(Any.ANY); else &if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) &if (mSets.ops) <if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (Any.ANY == aSet) rv = aSet; &else rv = ret; &return rv;
if (!aAny) <if (any) <return any; return 0; <<else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) return 0; <if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) &if (mSets.ops) &if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (!aAny) <if (any) &return any; return 0; &&else if (Any.ANY) return 1; else return 1; return 0;
if (mTest) nsIAtom* a = (nsIAtom*)any.mTest; a.returnSet(&a); &return NS_OK;
if (Any.ANY) if (mSets.ops) <if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; <else <rv = aSet; return rv;
if (any) mSet = Any.ANY; else mSet = any; &return mSet;
if (Any.ANY) <if (mSets.ops) if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (!aAny) <if (any) return any; return 0; <<else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY == aSet) rv = aSet; &else &rv = ret; &return rv;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; &else if (!mSet) <return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; <else <rv = aSet; <return rv;
if (Any.ANY) if (mSets.ops) if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; &else &if (!mSet) return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; else &rv = aSet; <return rv;
if (Any.ANY) return reportMatcher(Any.ANY); else &if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; <else &rv = aSet; return rv;
if (IsSet()) &return ReportMatcher(Any.ANY).returnSet(); <return 0;
if (mTest) <nsIAtom* a = (nsIAtom*)any.mTest; a.returnSet(&a); <return NS_OK;
if (Any.ANY == aSet) &rv = aSet; else rv = ret; <return rv;
if (!anySet) <return 1; return 0;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; <else if (!mSet) &return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; else &if (!mSet) <return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; else &if (!mSet) &return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; &else if (!mSet) <return mSet; return mSet;
if (Any.ANY == aSet) &rv = aSet; else <rv = ret; return rv;
if (any) <mSet = Any.ANY; &else <mSet = any; <return mSet;
if (Any.ANY) &return reportMatcher(Any.ANY); else if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) &return reportMatcher(Any.ANY); &else &if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
rv = reportMatcher(Any.ANY).returnSet(); if (rv) return rv; return rv;
rv = reportMatcher(Any.ANY).returnSet(); if (rv) return rv; &return rv;
/* XXX - just if we can't get it. */ if (mSet) return mSet; <else if (!mSet) return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; <else &if (!mSet) <return mSet; return mSet;
if (any) &mSet = Any.ANY; &else mSet = any; <return mSet;
if(aReturnType == Any.ANY) <return 0; if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY == aSet) rv = aSet; else &rv = ret; <return rv;
if(any.ANY) return NS_OK; return any;
if (Any.ANY) <return reportMatcher(Any.ANY); <else <if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) &rv = aSet; &else rv = ret; return rv;
if (Any.ANY) &return reportMatcher(Any.ANY); else if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) if (mSets.ops) if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (Any.ANY) <if (mSets.ops) if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if(aReturnType == Any.ANY) return 0; &if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; else &if (!mSet) return mSet; return mSet;
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv)) <return rv; &return rv;
if (any) &mSet = Any.ANY; &else mSet = any; &return mSet;
if (any) &mSet = Any.ANY; <else mSet = any; &return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; &else &rv = aSet; <return rv;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; else <if (!mSet) return mSet; return mSet;
if (Any.ANY) return reportMatcher(Any.ANY); &else if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) <rv = aSet; <else &rv = ret; return rv;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; else &rv = aSet; return rv;
if (Any.ANY == aSet) <rv = aSet; <else rv = ret; return rv;
if (Any.ANY) <if (mSets.ops) if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if(aReturnType == Any.ANY) <return 0; if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!anySet) return 1; &return 0;
if (Any.ANY) return reportMatcher(Any.ANY); &else if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any) <mSet = Any.ANY; <else &mSet = any; <return mSet;
if (Any.ANY) &if (mSets.ops) if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (Any.ANY == aSet) <rv = aSet; else <rv = ret; <return rv;
if ((rv = reportMatcher(Any.ANY))!= null) rv = rv; <else <rv = aSet; return rv;
if (IsSet()) <return ReportMatcher(Any.ANY).returnSet(); <return 0;
if (IsSet()) return ReportMatcher(Any.ANY).returnSet(); <return 0;
if (any) <mSet = Any.ANY; <else mSet = any; &return mSet;
if (Any.ANY) <return reportMatcher(Any.ANY); else if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) &rv = aSet; <else <rv = ret; &return rv;
if (Any.ANY) return reportMatcher(Any.ANY); else <if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) &rv = aSet; &else rv = ret; <return rv;
if (Any.ANY) return reportMatcher(Any.ANY); &else <if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY) &return reportMatcher(Any.ANY); &else <if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any) <mSet = Any.ANY; &else <mSet = any; return mSet;
if(aReturnType == Any.ANY) return 0; &if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (any) &mSet = Any.ANY; <else mSet = any; <return mSet;
if(aReturnType == Any.ANY) <return 0; <if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; <else <if (!mSet) &return mSet; return mSet;
char *s; if (!mMatch) return NS_OK; else &return mMatch.Set(mMatch, s);
/* XXX - just if we can't get it. */ if (mSet) return mSet; &else &if (!mSet) &return mSet; return mSet;
if (any) mSet = Any.ANY; <else <mSet = any; &return mSet;
if (any) mSet = Any.ANY; &else <mSet = any; return mSet;
if (Any.ANY) <if (mSets.ops) <if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; &else &if (!mSet) return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; &else <if (!mSet) <return mSet; return mSet;
if (any) <mSet = Any.ANY; &else mSet = any; <return mSet;
rv = reportMatcher(Any.ANY).returnSet(); if (rv) <return rv; return rv;
if (Any.ANY == aSet) <rv = aSet; else rv = ret; <return rv;
if(Any.ANY) <return (anySet); <return (reportMatcher(Any.ANY).returnSet());
if (Any.ANY) if (mSets.ops) if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (!anySet) &return 1; return 0;
if (Any.ANY == aSet) <rv = aSet; &else <rv = ret; &return rv;
if(aReturnType == Any.ANY) return 0; if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) <return reportMatcher(Any.ANY); <else if (Any.ANY) &/* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if(any.ANY) <return NS_OK; <return any;
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv)) return rv; return rv;
if (Any.ANY) <return reportMatcher(Any.ANY); else if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any) &mSet = Any.ANY; <else mSet = any; return mSet;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; else if (!mSet) <return mSet; return mSet;
if (Any.ANY) &return reportMatcher(Any.ANY); <else <if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
/* XXX - just if we can't get it. */ if (mSet) return mSet; <else <if (!mSet) &return mSet; return mSet;
if (!aAny) if (any) return any; return 0; <&else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) <return 0; &if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY == aSet) <rv = aSet; <else &rv = ret; <return rv;
if (Any.ANY == aSet) rv = aSet; else rv = ret; &return rv;
if (Any.ANY) if (mSets.ops) &if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (Any.ANY) &return reportMatcher(Any.ANY); &else if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if(aReturnType == Any.ANY) <return 0; <if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY == aSet) rv = aSet; &else &rv = ret; return rv;
if (mTest) <nsIAtom* a = (nsIAtom*)any.mTest; a.returnSet(&a); &return NS_OK;
if (!aAny) &if (any) return any; return 0; &&else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) &return 0; <if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if(aReturnType == Any.ANY) &return 0; if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!aAny) if (any) <return any; return 0; <else if (Any.ANY) return 1; else return 1; return 0;
if (Any.ANY == aSet) &rv = aSet; &else <rv = ret; return rv;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; <else &if (!mSet) &return mSet; return mSet;
if(aReturnType == Any.ANY) &return 0; <if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY == aSet) &rv = aSet; <else &rv = ret; <return rv;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; &else <if (!mSet) &return mSet; return mSet;
if (any) <mSet = Any.ANY; else mSet = any; &return mSet;
rv = reportMatcher(Any.ANY).returnSet(); if (rv) &return rv; <return rv;
if (Any.ANY == aSet) &rv = aSet; <else rv = ret; &return rv;
if(aReturnType == Any.ANY) <return 0; &if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) if (mSets.ops) &if (!mSets.ops) <return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (!aAny) if (any) &return any; return 0; &&else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) return 0; &if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY) return reportMatcher(Any.ANY); <else <if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (Any.ANY == aSet) rv = aSet; <else <rv = ret; &return rv;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; &else rv = aSet; return rv;
/* XXX - just if we can't get it. */ if (mSet) return mSet; &else &if (!mSet) <return mSet; return mSet;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; &else if (!mSet) return mSet; return mSet;
rv = reportMatcher(Any.ANY).returnSet(); if (rv) <return rv; &return rv;
if (Any.ANY == aSet) <rv = aSet; <else rv = ret; <return rv;
if (Any.ANY) return reportMatcher(Any.ANY); &else <if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any.IsEmpty()) <return anySet; <return NS_OK;
if (!aAny) &if (any) <return any; return 0; <<else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) <return 0; if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!anySet) <return 1; <return 0;
if(aReturnType == Any.ANY) &return 0; if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (!aAny) &if (any) &return any; return 0; &<else if (Any.ANY) return 1; else return 1; return 0;
if(aReturnType == Any.ANY) &return 0; if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; &else rv = aSet; &return rv;
if(aReturnType == Any.ANY) <return 0; &if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
rv = reportMatcher(Any.ANY).returnSet(); if (NS_FAILED(rv)) return rv; <return rv;
if (Any.ANY == aSet) <rv = aSet; <else <rv = ret; &return rv;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; &else rv = aSet; <return rv;
rv = NS_NewISupportsArray(getter_AddRefs(rv)); if (NS_FAILED(rv)) &return rv; &return NS_OK;
rv = reportMatcher(Any.ANY).returnSet(); if (rv) &return rv; return rv;
if (any) <mSet = Any.ANY; &else &mSet = any; &return mSet;
if (any) mSet = Any.ANY; else &mSet = any; return mSet;
if (Any.ANY == aSet) &rv = aSet; <else rv = ret; return rv;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; <else &if (!mSet) return mSet; return mSet;
if (!aAny) if (any) return any; return 0; &<else if (Any.ANY) return 1; else return 1; return 0;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; &else <rv = aSet; return rv;
if (Any.ANY) if (mSets.ops) <if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (Any.ANY) <if (mSets.ops) &if (!mSets.ops) &return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (any) <mSet = Any.ANY; <else mSet = any; return mSet;
if(aReturnType == Any.ANY) &return 0; <if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (any) mSet = Any.ANY; &else mSet = any; return mSet;
if (Any.ANY == aSet) &rv = aSet; <else <rv = ret; return rv;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; &else &rv = aSet; return rv;
if (any) &mSet = Any.ANY; <else &mSet = any; &return mSet;
if(aReturnType == Any.ANY) <return 0; <if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; &if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if ((rv = reportMatcher(Any.ANY))!= null) <rv = rv; <else &rv = aSet; return rv;
if (Any.ANY) &return reportMatcher(Any.ANY); <else <if (Any.ANY) </* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
if (any) <mSet = Any.ANY; &else mSet = any; &return mSet;
if(aReturnType == Any.ANY) return 0; <if((any.ANY.SetSet) == Any.ANY) &aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (Any.ANY == aSet) <rv = aSet; <else &rv = ret; &return rv;
if (Any.ANY) &return reportMatcher(Any.ANY); else <if (Any.ANY) /* If anySet is specified, do not give the system anything else. */ if (Any.ANY) /* Set any set. */ if (Any.ANY) return anySet; else return Any.ANY; return 0;
/* XXX - just if we can't get it. */ if (mSet) return mSet; else if (!mSet) return mSet; return mSet;
if (!aAny) if (any) <return any; return 0; else if (Any.ANY) return 1; else return 1; return 0;
rv = reportMatcher(Any.ANY).returnSet(); if (rv) return rv; <return rv;
if(aReturnType == Any.ANY) return 0; <if((any.ANY.SetSet) == Any.ANY) aReturnType = Any.ANY; return NS_OK; if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
char tmp('&0'); return rv;
/* XXX - just if we can't get it. */ if (mSet) <return mSet; &else &if (!mSet) <return mSet; return mSet;
if (!aAny) &if (any) <return any; return 0; else if (Any.ANY) return 1; else return 1; return 0;
if (any) <mSet = Any.ANY; &else <mSet = any; &return mSet;
/* XXX - just if we can't get it. */ if (mSet) return mSet; &else <if (!mSet) &return mSet; return mSet;
if (!aAny) &if (any) &return any; return 0; <<else if (Any.ANY) return 1; else return 1; return 0;
if (any) mSet = Any.ANY; <else &mSet = any; <return mSet;
if(aReturnType == Any.ANY) <return 0; <if((any.ANY.SetSet) == Any.ANY) <aReturnType = Any.ANY; return NS_OK; <if(Any.ANY.SetSet(any.ANY.SetSet) == Any.ANY) return NS_OK; return NS_OK;
if (any) <mSet = Any.ANY; else <mSet = any; <return mSet;
if (!aAny) &if (any) <return any; return 0; &&else if (Any.ANY) return 1; else return 1; return 0;
/* XXX - just if we can't get it. */ if (mSet) &return mSet; &else <if (!mSet) return mSet; return mSet;
if ((rv = reportMatcher(Any.ANY))!= null) &rv = rv; else &rv = aSet; <return rv;
if (Any.ANY) <if (mSets.ops) <if (!mSets.ops) return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
