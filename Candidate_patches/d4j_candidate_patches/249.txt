golden:
(new NodeTraversal(compiler, this)).traverse(root);
inference:
NodeTraversal(compiler, this);
(nodeTraversal(compiler, this)).traverse(root);
NodeTraversal(compiler, this).traverse(root);
nodeTraversal(compiler, this);

(NodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler)).traverse(root);
(new NodeTraversal()).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, root)).traverse(root);
(new NodeTraversal(node, this)).traverse(root);
(new NodeTraversal(compiler, this));
(new NodeTraversal(compiler, &this)).traverse(root);
NodeTraversal().traverse(root);
((new NodeTraversal(compiler, this))).traverse(root);
(nsNodeTraversal(compiler, this)).traverse(root);
nodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).trim(root);
(new NodeTraversal(this)).traverse(root);
(new NodeTraversal(node)).traverse(root);
(new NodeTraversal(component, this)).traverse(root);
(new NodeTraversal(compiler, &root)).traverse(root);
(new NodeTraversal(compiler, this)).translate(root);
nodeTraversal(compiler, this).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root));
NodeTraversal::traverse(root);
(new CompilerTraversal(this)).traverse(root);
(new NodeTraversal(root)).traverse(root);
NodeTraversal(compiler, this));
NodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal (compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).trace(root);
new NodeTraversal(compiler, this));
(new NodeTraversal(compiler, this, this)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(node);
(new NodeTraversal(compiler, this)).traverse();
NodeTraversal.traverse(root);
return (new NodeTraversal(compiler, this)).traverse(root);
nodeTraversal(compiler, this).traverse(root);
(new NodeTraversal(null, this)).traverse(root);
(new DOMNodeTraversal(compiler, this)).traverse(root);
nodeTraversal(compiler, this));
(new nodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal(self, this)).traverse(root);
(new NodeTraversal(compiler, 0)).traverse(root);
(new NodeTraversal(compiler, this)).trail(root);
NodeTraversal().traverse(root);
root = new NodeTraversal(compiler, this);
NodeTraversal (compiler, this);
(new NodeTraversal(compiler, this), root);
(new NullNodeTraversal(compiler, this)).traverse(root);
NodeTraversal (compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(&root);
(new NodeTraversal(compiler, this))).traverse(root);
(new SubtreeTraversal(compiler, this)).traverse(root);
(new NewNodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, null)).traverse(root);
(new NodeTraversal(&compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)). Traverse(root);
(new NodeTraversal(comparator, this)).traverse(root);
(new NodeTraversal(compiler, this)));
(new FreeNodeTraversal(compiler, this)).traverse(root);
(new PathTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).remove(root);
(new NodeTraversal(compiler))).traverse(root);
(NODE_TRAVERSAL(compiler, this)).traverse(root);
NodeTraversal::traverse(root)
(new ConstNodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, this, root)).traverse(root);
(new SimpleNodeTraversal(compiler, this)).traverse(root);
NodeTraversal(compiler, this, root);
NodeTraversal(compiler, this); (void)traverse(root);
(new NodeTraversal(compiler, this)), root);
return new NodeTraversal(compiler, this);
(new NodeTraversal(compiler, this)).traverse(root, 1);
nodeTraversal(compiler, this) = root;
NodeTraversal (compiler, this).traverse(root);
(new NodeTraversal(compiler, this)).teardown(root);
(new NodeTraversal(compiler, this)).traverse (root);
const NodeTraversal(compiler, this)).traverse(root);
(new RootTraversal(compiler, this)).traverse(root);
(new void NodeTraversal(compiler, this)).traverse(root);
(new InternalNodeTraversal(compiler, this)).traverse(root);
(new LogTraversal(compiler, this)).traverse(root);
((nodeTraversal(compiler, this))).traverse(root);
(nodeTraversal(compiler, this))).traverse(root);
(new NodeTraversal(this)).traverse(root));
NodeTraversal(compiler, this).traverse(root);
(new NodeTraversal(path, this)).traverse(root);
(new voidTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).reverse(root);
nodeTraversal.traverse(root);
(new NodeTraversal(compiler, this)).traverse(root, this);
(nodeTraversals(compiler, this)).traverse(root);
return new NodeTraversal(compiler, this));
(new const NodeTraversal(compiler, this)).traverse(root);
((NodeTraversal(compiler, this))).traverse(root);
(new NodeTraversal(compiler, *this)).traverse(root);
(new NodeTraversal (compiler, this)).traverse (root);
(new NodeTraversal(child, this)).traverse(root);
(new HandleTraversal(compiler, this)).traverse(root);
(new charTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(aRoot);
const NodeTraversal(compiler, this).traverse(root);
(new void Traversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(path);
(new NodeTraversal(compiler, this)).init(root);
root = (new NodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, node)).traverse(root);
(new NodeTraversal(compiler, this), this)).traverse(root);
(new AtomTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(*root);
(new NodeTraversal(entry, this)).traverse(root);
(new NodeTraversal(compiler, this)).move(root);
NodeTraversal(compiler, root);
(new NodeTraversal(compiler, this)).travel(root);
(new NodeTraversal(compiler, this)) .traverse(root);
new NodeTraversal(compiler, this)).traverse(root);
(new ComponentTraversal(compiler, this)).traverse(root);
new NodeTraversal(compiler, this);
(new NodeTraversal(dev, this)).traverse(root);
nodeTraversal(compiler, this); (void)traverse(root);
(new TreeTraversal(compiler, this)).traverse(root);
NodeTraversal(compiler);
(new NodeTraversal(nodeTraversal)).traverse(root);
const NodeTraversal(compiler, this).traverse(root);
(new NodeTraversal(compiler, root))).traverse(root);
(new NodeTraversal(compiler, this)).traverse(this);
(new NodeTraversal(aCompiler, this)).traverse(root);
(NodeTraversal()).traverse(root);
(new NodeTraversal(compiler, this)).mTraverse(root);
this.traverse(root);
(new NodeTraversal(builder, this)).traverse(root);
NodeTraversal(compiler, this)
(new DirectoryTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, self)).traverse(root);
(new NodeTraversal())).traverse(root);
(new NodeTraversal(this, this)).traverse(root);
(new NodeTraversal(compiler, this), &root);
(new NodeTraversal(compiler, this)).swap(root);
((new NodeTraversal(compiler, this)).traverse(root));
(NewNodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root + 1);
NS_TRACE((NodeTraversal(compiler, this)));
(new NodeTraversal(compiler, this)).free(root);
NodeTraversal (compiler, this));
(nodeTraversal()).traverse(root);
NODE_TRAVERSAL(compiler, this);
(new NodeTraversal(compiler, this)).TRANS(root);
(new NodeTraversal(type, this)).traverse(root);
(new NodeTraversal(compiler, this)).tree(root);
(new NodeTraversal(compiler)).traverse(root));
(new NodeTraversal(compiler, this)).trim();
(new NodeTraversal(compiler, this), this).traverse(root);
(new NodeTraversal(compiler, this)).extract(root);
nodeTraversal().traverse(root);
(new NodeTraversal(compiler, root)).traverse();
(new NodeTraversal(compiler, this)).visit(root);
(NodeTraversal(compiler, this));
new NodeTraversal().traverse(root);
(new NodeTraversal(this))).traverse(root);
NodeTraversal2(compiler, this);
(new NodeTraversal(compiler, this)).traverse(root, root);
(new NodeTraversal(compiler, this)).traverse(v);
(new NodeTraversal(compiler, this)).traverse(source);
(new NodeTraversal(compiler, this, root));
(new NodeTraversal(compiler, this)).traverse(Root);
(new NodeTraversal(compiler, this)).traverse(s);
(new NodeTraversal(compiler));
(new NodeTraversal(compiler, this)).assign(root);
(new NodeTraversal(compiler, this)).recycle(root);
(new NodeTraversal(compiler, this)).traverse(self);
(new NodeTraversal(compiler, this)).expand(root);
(new NodeTraversal(compiler, this)).traverse(parent);
return NodeTraversal(compiler, this);
(new NodeTraversal(compiler, this)).traverse(base);
(new NodeTraversal(compiler, this)).traverse(root, path);
(new NodeTraversal(compiler, this) ).traverse(root);
(NodeTraversal(compiler, this)).traverse(root));
super(root);
(new NodeTraversal(compiler, this)).traverse(name);
NodeTraversal();
nodes.traverse(root);
(new NodeTraversal(compiler, this)).traverse(c);
(new NodeTraversal(compiler, this)).traverse(root, 2);
(new NodeTraversal(compiler, this)).traverse(root);)
root = (new NodeTraversal(compiler, this)).traverse();
NodeTraverse(compiler, this);
free(root);
(compiler.traverse(root));
new NodeTraversal(compiler);
super.traverse(root);
(new NodeTraversal(compiler, this)).traverse(src, root);
(new NodeTraversal(compiler, this)).traverse(root.get());
(new NodeTraversal(compiler, this)).traverse(node.get());
(new NodeTraversal(compiler, this, &root)).traverse(root);
(new NodeTraversal(compiler, this)).tr_oneuse();
(new NodeTraversal(compiler, this)).traverse(root, 0);
(new NodeTraversal(compiler, this)).traverse(null);
(new NodeTraversal(compiler, this, aTraverse)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root, aExtraTrailer);
(new NodeTraversal(compiler, this)).traverse(root, null);
(new NodeTraversal(compiler, this, flags)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root); /* In this case, no dummy. */
(new NodeTraversal(compiler, this)).traverse(root, nodeType);
(new NodeTraversal(compiler, this)).traverse(root, node);
(new NodeTraversal(compiler, this)).traverse(str);
(new NodeTraversal(compiler, this, &dummy)).traverse(root);
(new NodeTraversal(nsLayoutAtoms::compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root, mHash);
(new NodeTraversal(compiler, this)).traverse(root); /* not defined */
(new NodeTraversal(compiler, this)).traverse(result);
(new NodeTraversal(compiler, this)).traverse((NodeTraversal*)root);
(new NodeTraversal(compiler, this)).traverse((void **)root);
(new NodeTraversal(compiler, this)).traverse(strlen(root));
(new NodeTraversal(compiler, this)).traverse(root)  1);
(new NodeTraversal(compiler, this)).traverse(root)  (nodeTraversal(compiler, this)).next();
(new NodeTraversal(compiler, this)).traverse(root, parent);
(new NodeTraversal(compiler, this)).removeElement(root);
(new NodeTraversal(nsComponent::compiler, this)).traverse(root);
(new NodeTraversal(compiler, this, null)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(aNode, aNode.root);
(new NodeTraversal(compiler, this, &mTraverse)).traverse(root);
(new NodeTraversal(compiler, this, fp)).traverse(root);
(new NodeTraversal(compiler, this, this.next)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(resources.root);
(new NodeTraversal(compiler, this, &val)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(cr);
(new NodeTraversal(compiler, this, "/")).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root, idx);
(new NodeTraversal(compiler, this)).traverse(root, false);
(new NodeTraversal(compiler, this, recurse)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root.replace('0','0'));
(new NodeTraversal(compiler, this)).traverse(origin);
(new NodeTraversal(compiler, this)).traverse(root)
(new NodeTraversal(compiler, this, mSessionHistory)).traverse(root);
(new NodeTraversal(compiler, this)).save_parent(root);
(new NodeTraversal(compiler, this)).traverse(recycle);
(new NodeTraversal(compiler, this)).traverse(root, p);
(new NodeTraversal(compiler, this)).traverse(root, ctx);
(new NodeTraversal(compiler, this, 0)).traverse(root);
(new NodeTraversal(compiler, this, this)).traverse(root, this);
(new NodeTraversal(compiler, this)).traverse(recv);
(new NodeTraversal(compiler, this, null)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root, flags);
(new NodeTraversal(compiler, this)).traverse(root.remove());
(new NodeTraversal(compiler, this)).srcr_root(root);
(new NodeTraversal(compiler, this)).traverse(ctxt);
(new NodeTraversal(compiler, this, &r)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root)  0;
(new NodeTraversal(compiler, this)).traverse(root, &ret);
(new NodeTraversal(compiler, this)).traverse(root, root + 1);
(new NodeTraversal(compiler, this)).traverse(root, idle));
(new NodeTraversal(compiler, this)).traverse((nsISupports**)root);
(new NodeTraversal(compiler, this)).traverse(root, p.p_info.p_info.p_info);
(new NodeTraversal(compiler, this)).traverse(node.root);
(new NodeTraversal(compiler, this)).traverse(root, nodeInfo);
(new NodeTraversal(compiler, this)).save(root);
(new NodeTraversal(compiler, this)).traverse((void *)root);
(new NodeTraversal(compiler, this)).traverse(root, rv);
(new NodeTraversal(compiler, this)).trcasecmp(root);
(new NodeTraversal(compiler, this, &p)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(mRoot);
(new NodeTraversal(compiler, this, fs)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root, ptr, ptr.tr_class);
(new NodeTraversal(compiler, this)).traverse(segment);
(new NodeTraversal(compiler, this)).traverse(root); return 0;
(new NodeTraversal(compiler, this)).traverse(root, rootLoading);
(new NodeTraversal(compiler, this)).traverse(root, mArena);
(new NodeTraversal(compiler, this)).strdup(root);
(new NodeTraversal(compiler, this)).traverse(root) || root.get();
(new NodeTraversal(compiler, this)).traverse(ref.next);
(new NodeTraversal(compiler, this)).traverse(root, new NodeTraversal(external));
(new NodeTraversal(compiler, this)).txt(root);
(new NodeTraversal(compiler, this)).traverse(root); return;
(new NodeTraversal(compiler, this, &aChild)).traverse(root);
(new NodeTraversal(compiler, this, p)).traverse(root);
(new NodeTraversal(compiler, this, root, null))).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root, &nodeTraversal);
(new NodeTraversal(compiler, this)).traverse(root, sizeof(root));
(new NodeTraversal(compiler, this, true)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root, iv);
(new NodeTraversal(compiler, this)).traverse(s)? root : root;
(new NodeTraversal(compiler, this)).traverse(root.GetNodeType());
(new NodeTraversal(compiler, this)).traverse(root, -1);
(new NodeTraversal(nsLayoutCtrl(compiler, this))).traverse(root);
(new NodeTraversal(compiler, this, &aMatch)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root, true);
(new NodeTraversal(compiler)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root.replace('<0','0'));
(new NodeTraversal(compiler, this)).traverse(root) &1);
(new NodeTraversal(compiler, this)).traverse(root.replace('<0','&0'));
(new NodeTraversal(compiler, this)).traverse(root) 1);
(new NodeTraversal(compiler, this)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root.replace('0','0'));
(new NodeTraversal(compiler, this)).traverse(root.replace('0','<0'));
(new NodeTraversal(compiler, this)).traverse(root.replace('<0','<0'));
(new NodeTraversal(compiler, this)).traverse(root) &(nodeTraversal(compiler, this)).next();
(new NodeTraversal(compiler, this)).traverse(root) 0;
(new NodeTraversal(compiler, this)).traverse(root.replace('&0','0'));
(new NodeTraversal(compiler, this)).traverse(root.replace('&0','&0'));
(new NodeTraversal(compiler, this)).traverse(root.replace('0','&0'));
(new NodeTraversal(compiler, this)).traverse(root)
(new NodeTraversal(compiler, this)).traverse(root) <1);
(new NodeTraversal(compiler, this)).traverse(root) <0;
(new NodeTraversal(this)).traverse(root);
(new NodeTraversal(compiler, this)).traverse(root) &0;
(new NodeTraversal(compiler, this)).traverse(root.replace('&0','<0'));
(new NodeTraversal(compiler, this)).traverse(root) <(nodeTraversal(compiler, this)).next();
(new NodeTraversal(compiler, this)).traverse(root) (nodeTraversal(compiler, this)).next();
