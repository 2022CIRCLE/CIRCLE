return invocation.callRealMethod();
return answer;
return InvocationOnMock(invocation);
return 0;
return NS_OK;
return (invocation.callRealMethod());
return (invocation).callRealMethod();
return answer(invocation);
return rv;
return (invocation).callRealMethod();
return invocation;
return invocation.realMethod();
return null;
return (invocation.callRealMethod());
return ret;
return invocation.returnValue();
return mInstance.callRealMethod();
return invocation.callRealMethod(invocation);
return _InvocationOnMock(invocation);
return mInvocation.callRealMethod();
return(invocation.callRealMethod());
return!invocation.callRealMethod();
return invocation.RealMethod();
return aInstance.callRealMethod();
return null;
return (invocation) invocation.callRealMethod();
return invocation.realMethod;
return invocation.returnCode();
return Answer(invocation);
return res;

return self.invocation.callRealMethod();
return do_QueryInterface(invocation);
return &invocation.callRealMethod();
return(invocation);
return reply;
return invocation.RealMethod();
return (invocation);
return _result;
return invocation.returnCode;
return callRealMethod(invocation);
return retval;
return InvocationOnMock();
return invocation.result;
return invocation.returnValue;
return _invocation.callRealMethod();
return invocation.callRealMethod(request);
return invocation.returnRealMethod();
return invocation.returnValue();
return invocation.callRealMethod(true);
return mInstance.callRealMethod();
return invocation.callRealMethod();
return invocation.get().callRealMethod();
return mInvocation.callRealMethod();
return (0);
return invocation.callRealMethod(null);
return invocation.callRealMethod(0);
return invocation.realMethod();
return answer(invocation.callRealMethod());
return invocation.get().callRealMethod();
return invocation.callRealMethod(null);
return invocation.callRealMethod(null);
return result;
return invocation.callRealMethod(false);
return(invocation).callRealMethod();
return invocation.callRealMethod(&invocation);
return;
return &invocation.callRealMethod();
return invocation.CallRealMethod();
return CallRealMethod(invocation);
return invocation.returnMethod();
return aInvocation.callRealMethod();
result = invocation.callRealMethod(); return result;
return (invocation)invocation.callRealMethod();
return invocation.returnRealMethod();
return response;
return invocation.requestRealMethod();
return -1;
return invocation.CallRealMethod();
return invocation.reallyRealMethod();
return (invocation)!invocation.callRealMethod();
return invocation.callRealMethod(null);
return this;
return, invocation.callRealMethod();
return invocation.callRealMethod(invocation);
return invocation.returnCode;
return invocation.callRealMethod(InvocationOnMock);
return (void) invocation.callRealMethod();
return answer(invocation, 0);
return (void)invocation.callRealMethod();
return NS_ERROR_FAILURE;
return nsCRT::strdup(invocation);
return (invocation)(invocation.callRealMethod());
return invocation.callRealMethod ();
return invocation.returnMethod();
return invocation.clear();
return invocation.callRealMethod(true);
return (invocation).realMethod();
return invocation.result;
return __func__;
return true;
return invocation.callRealMethod(this);
return invocation.callRealMethod(0);
return invocation.returnCode();
return aInvocation.callRealMethod();
return invocation.get().realMethod();
return invocation.callRealMethod(false);
return void* invocation.callRealMethod();
return invocation.returnValue;
return _("InvocationOnMock");
return _instance.callRealMethod();
return invocation.callRealMethod(false);
return invocation.return();
return _instance.callRealMethod();
return __result;
#endif return invocation.callRealMethod();
return mInstance.callRealMethod(invocation);
return invocation.callRealMethod ();
return CallQueryInterface(invocation);
return nsInstanceOf(invocation);
return invocation.asyncRealMethod();
return invocation == null;
return invocation.next();
return invocation.callRealMethod(&invocation);
return false;
return Answer();
return CallQueryInterface(invocation, &rv);
#endif return invocation.callRealMethod();
return nsCRT::RealMethod(invocation);
return _retval;
return invocation.calRealMethod();
NS_RELEASE(invocation); return NS_OK;
invocation.callRealMethod();
return invocation.reference();
return invocation.removeMethod();
return invocation.callRealMethod(void);
return invocation.returnType();
return answer (invocation);
return InvocationOnMock().callRealMethod();
return InvocationMethod(invocation);
return _instanceOf(invocation);
return invocation.callRealMethod(result);
return _InstanceOf(invocation);
invocation.callRealMethod();
invocation.callRealMethod(); return 0;
invocation.callRealMethod(); return NS_OK;
return answer();
return invocation.callRealMethod(request);
return invocation.callRealMethod;
invocation = invocation; return NS_OK;
return invocation.init();
return (invocation).returnValue;
return InvocationOnMock(invocation, null);
return INvocationOnMock(invocation);
return invocation.callRealMethod(*invocation);
return _ret;
return mInstance;
return _INVALID_ARGS;
return invocation.callReal();
return answering;
return invocation.callRealMethod(0, 0);
return 1;
return __retval;
return v;
return invocation.callRealMethod(*this);
return invocation.callRealMethod(aMethod);
rv = invocation.callRealMethod();
return invocation.request.realMethod();
return invocation.get();
if (invocation)  return 0;  return 0;
return true;
return invocation.callRealMock();
return _REQUEST_REJECTED;
invocation.callRealMethod(); return 0;
*aResult = invocation; return NS_OK;
return invocation.returnMethod;
return REQUEST_REJECTED;
return (invocation!= null);
result = invocation.callRealMethod(); return result;
return (invocation)!=0;
invocation.callRealMethod(); return NS_OK;
return xstrdup(invocation);
return (invocation)(invocation);
NS_IF_RELEASE(invocation); return NS_OK;
return (invocation).returnCode;
return mInvocation.realMethod;
return invocation.callRealMethod(false);
return invocation.asyncReal();
return invocation.callRealMethod(rv);
ret = invocation.callRealMethod();
return invocation.asyncRealMethod();
rv = invocation.callRealMethod();
return invocation.callRealMethod(0, 0);
return __func__(invocation);
return _invoke(invocation);
invocation.callRealMethod(); return (0);
return _instance.returnValue();
return cb.realMethod();
return _REGERR_REQUEST_REJECTED;
return void *invocation.callRealMethod();
return invocation.callRealMethod(nsDependentCString());
if (!invocation.callRealMethod()) return 0; return 0;
return _INVALID_ARG;
return invocation.return();
if (!invocation.dv_flags) return invocation.callRealMethod(); return 0;
return mAsync.result.get();
return invocation.callRealMethod( ptr );
return freq;
if (invocation.instance!= null)  return invocation.instance.invocation.realMethod();  return 0;
nsresult rv = invocation.callRealMethod(); if (rv)  nsCOMPtrnsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv;  return rv;
if (invocation.method) return ObjectCallOperate(invocation, aPtr, aInstance); if (!aInstance) return null; return 0;
if (invocation.callRealMethod)  return 0;  return 0;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable())  return 0;   return null;
if (invocation)  return rv;  return invocation.callRealMethod();
return invocation.calendarRealMethod();
return invocation.callRealMethod(NS_REINTERPRET_CAST(InvocationOnMock*, invocation));
if (!invocation.callRealMethod)  return NS_OK;  if (!invocation.callRealMethod())  return NS_ERROR_NULL_POINTER;  return NS_OK;
return ctx_instanceOf(invocation);
if (invocation) return ret; return invocation.callRealMethod();
if (!invocation.callRealMethod) return null;  return invocation.callRealMethod();
return fprintf(stderr, "request:n");
Object obj; invocation.doSelect(&obj); if (obj)  if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;  if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;
return _("invocation");
if (invocation.return)  return invocation.return;  return null;
return (invocation)(void)(realMethod);
return _INIT_REFCNT();
return nsCRT::result? invocation.callRealMethod() : 0;
if (invocation) return invocation.callRealMethod(); return 0;
return invocation.return_Method();
if (invocation.init(mOwner))  LOG(L_ERR, "invocation: InvocationOnMock: answer: %s", invocation.get()); return -1;  return 0;
return fInstance.result.result;
Object* answer; if (invocation)  return 0;  if (!invocation) return 0;  return 0;
/* The Object answer */ return aNodeInfo.InvocationOnMock();
if (!invocation.callRealMethod)  return 0;  return 0;
return (invocation)? invocation.callRealMethod() : 0;
if (invocation.get() == null)  return 0;  return 0;
return invocation.callRealMethod(aNodeInfo);
return m_result.callRealMethod();
if (invocation.mInstance) return mInstance.realMethod(); return NS_OK;
return invocation.callRealMethod(aCallback);
if (invocation)  rv = invocation.callRealMethod(); if (NS_FAILED(rv))  return rv;  /* XXX: if it's not the answer to ask */ return rv;
Object do_QueryInterface(invocation); return mOwner.DoAssert(do_QueryInterface(invocation));
return _(invocation).callRealMethod();
return mObject.callRealMethod();
NS_ADDREF(mOwner); return mOwner.Return();
return __retval.answer;
/* * To handle a possible request on the object * handler. */ if (!invocation.callRealMethod()) return;
return nsCRT::return_anonymous_instance(invocation);
return mOwner.callRealMethod();
return __retval? invocation.callRealMethod() : 0;
if (invocation.callRealMethod()) return 0; return 0;
return _("really answer");
return invocation.calloc(1, invocation.getOffset());
NS_ASSERTION(!invocation.callRealMethod(), "invocation failed"); NS_ADDREF(invocation); return NS_OK;
return m_eventReason;
return invocation.calloc();
ret = invocation.callRealMethod(); if (ret!= null)  ret = NS_OK; goto done;  ret = invocation.callRealMethod(); if (ret == null) goto done; return ret;  return ret;
if (!invocation.callRealMethod()) return NS_OK; if (invocation.name)  return NS_ERROR_OUT_OF_MEMORY;  return NS_OK;
if (invocation.mOwner) return Object_Received; if (invocation.mOwner) return Object_Received; invocation.mOwner.EndOwner(invocation); return Object_Received;
rv = _invoke(&invocation); if (NS_FAILED(rv)) return rv; return rv;
return aRequest.return_no_memory;
if (!invocation.callRealMethod) return null; return 0;
return invocation.request.reallyInitialized;
return (invocation)(InvocationOnMock).realMethod();
return ObjectHandler.return_Method(invocation);
return _instance.returnCode(invocation, msg, null, &null);
if (invocation)  return invocation.callRealMethod();  return 0;
return fprintf(stderr, "request:<n");
return fprintf(stderr, "request:n");
if (invocation.init(mOwner)) LOG(L_ERR, "invocation: InvocationOnMock: answer: %s", invocation.get()); return -1; &return 0;
ret = invocation.callRealMethod(); if (ret!= null) ret = NS_OK; goto done; <ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; &return ret;
if (!invocation.callRealMethod) &return NS_OK; <if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; return NS_OK;
nsresult rv = invocation.callRealMethod(); if (rv) &nsCOMPtrnsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; return rv;
if (!invocation.callRealMethod) &return NS_OK; <if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; return NS_OK;
if (invocation.init(mOwner)) <LOG(L_ERR, "invocation: InvocationOnMock: answer: %s", invocation.get()); return -1; return 0;
if (invocation) rv = invocation.callRealMethod(); if (NS_FAILED(rv)) &return rv; /* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod) &return 0; return 0;
if (invocation.callRealMethod) &return 0; <return 0;
if (!invocation.callRealMethod) return null; &return invocation.callRealMethod();
if (invocation.return) return invocation.return; <return null;
if (!invocation.callRealMethod()) return NS_OK; if (invocation.name) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; <if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; return NS_OK;
nsresult rv = invocation.callRealMethod(); if (rv) &nsCOMPtr<nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; &return rv;
Object* answer; if (invocation) <return 0; if (!invocation) return 0; <return 0;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) return 0; <<return null;
if (!invocation.callRealMethod) <return 0; &return 0;
if (!invocation.callRealMethod) <return NS_OK; <if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; &return NS_OK;
if (!invocation.callRealMethod) &return NS_OK; &if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod()) return NS_OK; if (invocation.name) <return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (!invocation.callRealMethod) return null; <return invocation.callRealMethod();
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) return 0; <&return null;
nsresult rv = invocation.callRealMethod(); if (rv) &nsCOMPtrnsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; &return rv;
if (invocation.instance!= null) &return invocation.instance.invocation.realMethod(); &return 0;
if (!invocation.callRealMethod) return NS_OK; if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; return NS_OK;
if (invocation) return rv; <return invocation.callRealMethod();
nsresult rv = invocation.callRealMethod(); if (rv) &nsCOMPtr<nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; <return rv;
nsresult rv = invocation.callRealMethod(); if (rv) &nsCOMPtr&nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; &return rv;
if (!invocation.callRealMethod) return 0; return 0;
if (invocation) rv = invocation.callRealMethod(); if (NS_FAILED(rv)) &return rv; </* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod) &return NS_OK; <if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; <return NS_OK;
nsresult rv = invocation.callRealMethod(); if (rv) nsCOMPtrnsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; &return rv;
nsresult rv = invocation.callRealMethod(); if (rv) <nsCOMPtr&nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; return rv;
if (invocation.get() == null) return 0; &return 0;
if (!invocation.callRealMethod) <return NS_OK; &if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; <return NS_OK;
if (invocation) <rv = invocation.callRealMethod(); if (NS_FAILED(rv)) &return rv; &/* XXX: if it's not the answer to ask */ return rv;
if (invocation) &return invocation.callRealMethod(); return 0;
if (!invocation.callRealMethod) return NS_OK; &if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; return NS_OK;
Object* answer; if (invocation) &return 0; if (!invocation) return 0; &return 0;
if (!invocation.callRealMethod) &return NS_OK; if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod) <return 0; <return 0;
if (invocation.get() == null) <return 0; &return 0;
if (!invocation.callRealMethod) &return NS_OK; <if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; return NS_OK;
Object obj; invocation.doSelect(&obj); if (obj) <if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK; if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;
if (!invocation.callRealMethod) &return NS_OK; if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; &return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) &ret = NS_OK; goto done; &ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; <return ret;
if (invocation) &return invocation.callRealMethod(); <return 0;
if (!invocation.callRealMethod) &return NS_OK; if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; <if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; <if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; return NS_OK;
if (!invocation.callRealMethod) &return NS_OK; if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; &return NS_OK;
if (invocation.init(mOwner)) &LOG(L_ERR, "invocation: InvocationOnMock: answer: %s", invocation.get()); return -1; &return 0;
if (!invocation.callRealMethod) return NS_OK; <if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; return NS_OK;
Object obj; invocation.doSelect(&obj); if (obj) <if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK; <if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;
if (!invocation.callRealMethod) return NS_OK; <if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; &return NS_OK;
Object* answer; if (invocation) &return 0; &if (!invocation) return 0; &return 0;
if (!invocation.callRealMethod()) return NS_OK; if (invocation.name) &return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (!invocation.callRealMethod) return NS_OK; &if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; <return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) <ret = NS_OK; goto done; ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; &return ret;
if (invocation.init(mOwner)) <LOG(L_ERR, "invocation: InvocationOnMock: answer: %s", invocation.get()); return -1; <return 0;
if (!invocation.callRealMethod) return 0; &return 0;
Object* answer; if (invocation) &return 0; <if (!invocation) return 0; &return 0;
if (invocation.return) return invocation.return; &return null;
if (!invocation.callRealMethod) &return NS_OK; &if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; &return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; &return NS_OK;
if (invocation) <rv = invocation.callRealMethod(); if (NS_FAILED(rv)) return rv; /* XXX: if it's not the answer to ask */ return rv;
if (invocation) rv = invocation.callRealMethod(); if (NS_FAILED(rv)) return rv; /* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod) <return NS_OK; &if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; &if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; return NS_OK;
if (invocation) return 0; <return 0;
if (invocation.instance!= null) return invocation.instance.invocation.realMethod(); <return 0;
if (invocation) &return 0; &return 0;
nsresult rv = invocation.callRealMethod(); if (rv) <nsCOMPtrnsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; return rv;
if (!invocation.callRealMethod) <return NS_OK; <if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; &return NS_OK;
Object obj; invocation.doSelect(&obj); if (obj) if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK; <if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;
if (invocation) &rv = invocation.callRealMethod(); if (NS_FAILED(rv)) &return rv; </* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod) return NS_OK; <if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; return NS_OK;
Object* answer; if (invocation) <return 0; <if (!invocation) return 0; &return 0;
if (!invocation.callRealMethod) return NS_OK; if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) &ret = NS_OK; goto done; &ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; &return ret;
if (invocation.return) <return invocation.return; return null;
if (invocation.get() == null) <return 0; return 0;
if (!invocation.callRealMethod) return NS_OK; &if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; return NS_OK;
nsresult rv = invocation.callRealMethod(); if (rv) nsCOMPtr<nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; <return rv;
if (invocation) <rv = invocation.callRealMethod(); if (NS_FAILED(rv)) &return rv; /* XXX: if it's not the answer to ask */ return rv;
return invocation.callRealMethod();
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) &return 0; return null;
nsresult rv = invocation.callRealMethod(); if (rv) &nsCOMPtr&nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; return rv;
if (!invocation.callRealMethod) <return NS_OK; if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; &return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod) &return NS_OK; &if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; &return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) ret = NS_OK; goto done; &ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; return ret;
if (invocation.init(mOwner)) &LOG(L_ERR, "invocation: InvocationOnMock: answer: %s", invocation.get()); return -1; return 0;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) return 0; return null;
if (!invocation.callRealMethod) return NS_OK; if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; &return NS_OK;
if (invocation) &rv = invocation.callRealMethod(); if (NS_FAILED(rv)) <return rv; &/* XXX: if it's not the answer to ask */ return rv;
if (invocation) rv = invocation.callRealMethod(); if (NS_FAILED(rv)) <return rv; </* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod) return NS_OK; <if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; &return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) &ret = NS_OK; goto done; &ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; return ret;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) <return 0; <<return null;
if (!invocation.callRealMethod) &return NS_OK; &if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) <ret = NS_OK; goto done; ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; return ret;
ret = invocation.callRealMethod(); if (ret!= null) <ret = NS_OK; goto done; &ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; &return ret;
if (!invocation.callRealMethod) &return NS_OK; if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; return NS_OK;
if (invocation.return) &return invocation.return; &return null;
Object* answer; if (invocation) &return 0; <if (!invocation) return 0; return 0;
<return invocation.callRealMethod();
if (invocation) <return 0; &return 0;
if (invocation) <return invocation.callRealMethod(); return 0;
if (invocation.init(mOwner)) &LOG(L_ERR, "invocation: InvocationOnMock: answer: %s", invocation.get()); return -1; <return 0;
if (!invocation.callRealMethod) <return NS_OK; &if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; return NS_OK;
if (invocation.instance!= null) <return invocation.instance.invocation.realMethod(); &return 0;
Object obj; invocation.doSelect(&obj); if (obj) &if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK; &if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) <return 0; <&return null;
Object obj; invocation.doSelect(&obj); if (obj) if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK; &if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; <if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod()) return NS_OK; if (invocation.name) &return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) <return 0; return null;
Object* answer; if (invocation) &return 0; &if (!invocation) return 0; <return 0;
Object obj; invocation.doSelect(&obj); if (obj) &if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK; if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; &return NS_OK;
if (invocation.instance!= null) &return invocation.instance.invocation.realMethod(); <return 0;
ret = invocation.callRealMethod(); if (ret!= null) <ret = NS_OK; goto done; &ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; <return ret;
Object* answer; if (invocation) <return 0; &if (!invocation) return 0; return 0;
if (invocation.instance!= null) return invocation.instance.invocation.realMethod(); &return 0;
if (invocation.return) return invocation.return; return null;
ret = invocation.callRealMethod(); if (ret!= null) <ret = NS_OK; goto done; <ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; <return ret;
if (!invocation.callRealMethod()) return NS_OK; if (invocation.name) <return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) &return 0; <return null;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) return 0; &return null;
ret = invocation.callRealMethod(); if (ret!= null) <ret = NS_OK; goto done; &ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; return ret;
if (invocation.instance!= null) <return invocation.instance.invocation.realMethod(); return 0;
if (invocation) <return 0; return 0;
if (!invocation.callRealMethod) &return NS_OK; &if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; &return NS_OK;
Object* answer; if (invocation) return 0; if (!invocation) return 0; <return 0;
ret = invocation.callRealMethod(); if (ret!= null) &ret = NS_OK; goto done; <ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; <return ret;
if (invocation) &return rv; &return invocation.callRealMethod();
if (invocation.callRealMethod) return 0; <return 0;
Object obj; invocation.doSelect(&obj); if (obj) &if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK; <if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) &ret = NS_OK; goto done; ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; &return ret;
Object* answer; if (invocation) &return 0; <if (!invocation) return 0; <return 0;
nsresult rv = invocation.callRealMethod(); if (rv) <nsCOMPtr<nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; <return rv;
if (invocation) rv = invocation.callRealMethod(); if (NS_FAILED(rv)) <return rv; /* XXX: if it's not the answer to ask */ return rv;
if (invocation.instance!= null) <return invocation.instance.invocation.realMethod(); <return 0;
if (invocation) rv = invocation.callRealMethod(); if (NS_FAILED(rv)) return rv; &/* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod()) return NS_OK; if (invocation.name) return NS_ERROR_OUT_OF_MEMORY; &return NS_OK;
if (invocation) return rv; &return invocation.callRealMethod();
nsresult rv = invocation.callRealMethod(); if (rv) nsCOMPtr&nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; return rv;
if (invocation) &rv = invocation.callRealMethod(); if (NS_FAILED(rv)) <return rv; </* XXX: if it's not the answer to ask */ return rv;
Object obj; invocation.doSelect(&obj); if (obj) <if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK; &if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; <return NS_OK;
if (invocation.get() == null) &return 0; &return 0;
<return invocation.callRealMethod();
Object* answer; if (invocation) &return 0; if (!invocation) return 0; <return 0;
nsresult rv = invocation.callRealMethod(); if (rv) &nsCOMPtr&nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; <return rv;
if (invocation) rv = invocation.callRealMethod(); if (NS_FAILED(rv)) &return rv; &/* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod()) return NS_OK; if (invocation.name) &return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
if (invocation) return invocation.callRealMethod(); <return 0;
if (!invocation.callRealMethod) return NS_OK; &if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; &return NS_OK;
if (!invocation.callRealMethod) return NS_OK; &if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; &if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; return NS_OK;
&return invocation.callRealMethod();
if (invocation.callRealMethod) return 0; return 0;
if (!invocation.callRealMethod) return NS_OK; <if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; <return NS_OK;
if (invocation) return invocation.callRealMethod(); return 0;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) &return 0; &<return null;
if (invocation) <rv = invocation.callRealMethod(); if (NS_FAILED(rv)) <return rv; /* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod) return NS_OK; <if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; <return NS_OK;
if (invocation) return 0; &return 0;
if (invocation) &return rv; return invocation.callRealMethod();
ret = invocation.callRealMethod(); if (ret!= null) <ret = NS_OK; goto done; ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; <return ret;
if (!invocation.callRealMethod) <return NS_OK; <if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; &return NS_OK;
Object* answer; if (invocation) return 0; &if (!invocation) return 0; <return 0;
if (!invocation.callRealMethod) return NS_OK; if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; &return NS_OK;
Object* answer; if (invocation) &return 0; &if (!invocation) return 0; return 0;
if (invocation) &return 0; <return 0;
if (!invocation.callRealMethod()) return NS_OK; if (invocation.name) return NS_ERROR_OUT_OF_MEMORY; <return NS_OK;
nsresult rv = invocation.callRealMethod(); if (rv) &nsCOMPtr<nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; return rv;
nsresult rv = invocation.callRealMethod(); if (rv) &nsCOMPtrnsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; <return rv;
if (invocation.get() == null) return 0; return 0;
Object* answer; if (invocation) return 0; <if (!invocation) return 0; &return 0;
nsresult rv = invocation.callRealMethod(); if (rv) nsCOMPtr<nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; &return rv;
nsresult rv = invocation.callRealMethod(); if (rv) <nsCOMPtr&nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; &return rv;
return invocation.callRealMethod();
if (invocation.callRealMethod) <return 0; return 0;
if (invocation.get() == null) <return 0; <return 0;
if (invocation) <return invocation.callRealMethod(); &return 0;
Object* answer; if (invocation) return 0; &if (!invocation) return 0; return 0;
if (!invocation.callRealMethod) <return NS_OK; if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; return NS_OK;
if (!invocation.callRealMethod) <return NS_OK; &if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; &return NS_OK;
Object* answer; if (invocation) <return 0; <if (!invocation) return 0; <return 0;
nsresult rv = invocation.callRealMethod(); if (rv) <nsCOMPtr<nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; &return rv;
if (!invocation.callRealMethod) <return 0; return 0;
if (invocation) <rv = invocation.callRealMethod(); if (NS_FAILED(rv)) return rv; </* XXX: if it's not the answer to ask */ return rv;
if (invocation) &rv = invocation.callRealMethod(); if (NS_FAILED(rv)) return rv; &/* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod) return NS_OK; &if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; &return NS_OK;
if (invocation.instance!= null) &return invocation.instance.invocation.realMethod(); return 0;
if (invocation) &return rv; <return invocation.callRealMethod();
if (!invocation.callRealMethod) <return NS_OK; <if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; <return NS_OK;
if (invocation) return invocation.callRealMethod(); &return 0;
if (invocation) &return 0; return 0;
Object* answer; if (invocation) return 0; <if (!invocation) return 0; <return 0;
if (!invocation.callRealMethod) &return NS_OK; <if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; <return NS_OK;
if (invocation) <return 0; <return 0;
ret = invocation.callRealMethod(); if (ret!= null) <ret = NS_OK; goto done; <ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; &return ret;
if (invocation) &rv = invocation.callRealMethod(); if (NS_FAILED(rv)) return rv; /* XXX: if it's not the answer to ask */ return rv;
nsresult rv = invocation.callRealMethod(); if (rv) <nsCOMPtrnsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; &return rv;
Object* answer; if (invocation) return 0; <if (!invocation) return 0; return 0;
if (!invocation.callRealMethod) <return NS_OK; if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; return NS_OK;
nsresult rv = invocation.callRealMethod(); if (rv) nsCOMPtrnsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; <return rv;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) <return 0; &&return null;
if (invocation) <rv = invocation.callRealMethod(); if (NS_FAILED(rv)) <return rv; &/* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod) <return NS_OK; &if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; <return NS_OK;
&return invocation.callRealMethod();
nsresult rv = invocation.callRealMethod(); if (rv) <nsCOMPtr<nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; return rv;
if (invocation) rv = invocation.callRealMethod(); if (NS_FAILED(rv)) return rv; </* XXX: if it's not the answer to ask */ return rv;
if (invocation.callRealMethod) &return 0; &return 0;
ret = invocation.callRealMethod(); if (ret!= null) ret = NS_OK; goto done; ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; &return ret;
if (invocation) &rv = invocation.callRealMethod(); if (NS_FAILED(rv)) &return rv; &/* XXX: if it's not the answer to ask */ return rv;
if (invocation.callRealMethod) <return 0; <return 0;
Object* answer; if (invocation) return 0; &if (!invocation) return 0; &return 0;
if (!invocation.callRealMethod) return NS_OK; &if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; &return NS_OK;
if (!invocation.callRealMethod) return NS_OK; if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; &return NS_OK;
if (invocation.get() == null) return 0; <return 0;
if (!invocation.callRealMethod) &return 0; &return 0;
if (!invocation.callRealMethod) &return NS_OK; if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; return NS_OK;
if (invocation.return) <return invocation.return; <return null;
if (invocation.instance!= null) return invocation.instance.invocation.realMethod(); return 0;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) &return 0; <&return null;
if (invocation) <rv = invocation.callRealMethod(); if (NS_FAILED(rv)) <return rv; </* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) return 0; &&return null;
ret = invocation.callRealMethod(); if (ret!= null) &ret = NS_OK; goto done; ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; return ret;
if (!invocation.callRealMethod) return NS_OK; if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; return NS_OK;
nsresult rv = invocation.callRealMethod(); if (rv) nsCOMPtrnsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; return rv;
if (invocation.init(mOwner)) LOG(L_ERR, "invocation: InvocationOnMock: answer: %s", invocation.get()); return -1; <return 0;
if (!invocation.callRealMethod) &return NS_OK; if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; <return NS_OK;
if (invocation.return) &return invocation.return; return null;
if (invocation.get() == null) &return 0; return 0;
ret = invocation.callRealMethod(); if (ret!= null) <ret = NS_OK; goto done; <ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; return ret;
if (!invocation.callRealMethod) <return NS_OK; <if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) &ret = NS_OK; goto done; <ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; return ret;
if (invocation.return) <return invocation.return; &return null;
nsresult rv = invocation.callRealMethod(); if (rv) <nsCOMPtr&nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; <return rv;
if (invocation) &rv = invocation.callRealMethod(); if (NS_FAILED(rv)) return rv; </* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) <return 0; <return null;
Object* answer; if (invocation) return 0; if (!invocation) return 0; return 0;
if (invocation.init(mOwner)) <LOG(L_ERR, "invocation: InvocationOnMock: answer: %s", invocation.get()); return -1; &return 0;
if (invocation) <rv = invocation.callRealMethod(); if (NS_FAILED(rv)) &return rv; </* XXX: if it's not the answer to ask */ return rv;
ret = invocation.callRealMethod(); if (ret!= null) &ret = NS_OK; goto done; <ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; &return ret;
if (invocation.callRealMethod) <return 0; &return 0;
if (!invocation.callRealMethod) return NS_OK; <if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; <return NS_OK;
return invocation.callRealMethod();
if (!invocation.callRealMethod) <return NS_OK; if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; return NS_OK;
Object obj; invocation.doSelect(&obj); if (obj) if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK; if (!obj) return NS_ERROR_NULL_POINTER; return NS_OK;
if (!invocation.callRealMethod) return NS_OK; if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; <return NS_OK;
if (invocation) return rv; return invocation.callRealMethod();
if (!invocation.callRealMethod) &return NS_OK; if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; &return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) ret = NS_OK; goto done; &ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; <return ret;
nsresult rv = invocation.callRealMethod(); if (rv) <nsCOMPtrnsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; <return rv;
nsresult rv = invocation.callRealMethod(); if (rv) nsCOMPtr<nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; return rv;
if (!invocation.callRealMethod) &return NS_OK; &if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; return NS_OK;
if (invocation) rv = invocation.callRealMethod(); if (NS_FAILED(rv)) <return rv; &/* XXX: if it's not the answer to ask */ return rv;
if (invocation) <rv = invocation.callRealMethod(); if (NS_FAILED(rv)) return rv; &/* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod) &return NS_OK; &if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; return NS_OK;
if (invocation) &rv = invocation.callRealMethod(); if (NS_FAILED(rv)) &return rv; /* XXX: if it's not the answer to ask */ return rv;
ret = invocation.callRealMethod(); if (ret!= null) ret = NS_OK; goto done; <ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; return ret;
if (!invocation.callRealMethod) &return NS_OK; &if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; <return NS_OK;
if (invocation.callRealMethod) return 0; &return 0;
Object* answer; if (invocation) <return 0; &if (!invocation) return 0; <return 0;
if (invocation.return) &return invocation.return; <return null;
ret = invocation.callRealMethod(); if (ret!= null) &ret = NS_OK; goto done; ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; <return ret;
nsresult rv = invocation.callRealMethod(); if (rv) nsCOMPtr&nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; &return rv;
Object* answer; if (invocation) <return 0; if (!invocation) return 0; &return 0;
if (invocation) &rv = invocation.callRealMethod(); if (NS_FAILED(rv)) <return rv; /* XXX: if it's not the answer to ask */ return rv;
if (!invocation.callRealMethod) return NS_OK; <if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; return NS_OK;
Object* answer; if (invocation) &return 0; if (!invocation) return 0; return 0;
Object* answer; if (invocation) <return 0; if (!invocation) return 0; return 0;
if (invocation) <return rv; &return invocation.callRealMethod();
if (!invocation.callRealMethod) return NS_OK; &if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; return NS_OK;
if (!invocation.callRealMethod) &return NS_OK; if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; return NS_OK;
return fprintf(stderr, "request:&n");
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) <return 0; &<return null;
if (!invocation.callRealMethod) &return NS_OK; <if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; &return NS_OK;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) &return 0; &return null;
if (!invocation.callRealMethod) &return NS_OK; &if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; <return NS_OK;
Object* answer; if (invocation) <return 0; &if (!invocation) return 0; &return 0;
if (!invocation.callRealMethod) &return NS_OK; <if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; <return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) ret = NS_OK; goto done; <ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; <return ret;
if (!invocation.callRealMethod) return 0; <return 0;
if (!invocation.callRealMethod) &return NS_OK; <if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; &return NS_OK;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) return 0; &<return null;
Object* answer; if (invocation) <return 0; <if (!invocation) return 0; return 0;
if (invocation) &return invocation.callRealMethod(); &return 0;
if (!invocation.callRealMethod) return NS_OK; if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod) return NS_OK; if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; <return NS_OK;
nsresult rv = invocation.callRealMethod(); if (rv) nsCOMPtr&nsIContent> cv; rv = invocation.callRealMethod(getter_AddRefs(cv)); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; rv = cv.invocation.removeAttributes(cv); if (NS_FAILED(rv)) return rv; <return rv;
if (!invocation.callRealMethod) <return NS_OK; &if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; &return NS_OK;
if (invocation) return 0; return 0;
ret = invocation.callRealMethod(); if (ret!= null) ret = NS_OK; goto done; ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; <return ret;
if (!invocation.callRealMethod) return NS_OK; &if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; <return NS_OK;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) &return 0; &&return null;
if (invocation) <return invocation.callRealMethod(); <return 0;
if (invocation) <return rv; <return invocation.callRealMethod();
if (!invocation.callRealMethod) <return NS_OK; &if (!invocation.callRealMethod()) <return NS_ERROR_NULL_POINTER; &return NS_OK;
ret = invocation.callRealMethod(); if (ret!= null) ret = NS_OK; goto done; &ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; &return ret;
if (!invocation.callRealMethod) &return NS_OK; <if (!invocation.callRealMethod()) &return NS_ERROR_NULL_POINTER; &return NS_OK;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) <return 0; &return null;
if (invocation.init(mOwner)) LOG(L_ERR, "invocation: InvocationOnMock: answer: %s", invocation.get()); return -1; return 0;
Object* answer; if (invocation) return 0; if (!invocation) return 0; &return 0;
ret = invocation.callRealMethod(); if (ret!= null) ret = NS_OK; goto done; ret = invocation.callRealMethod(); if (ret == null) goto done; return ret; return ret;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) &return 0; <<return null;
if (!invocation.callRealMethod) return null; return invocation.callRealMethod();
if (!invocation.callRealMethod) &return 0; <return 0;
if (invocation.get() == null) &return 0; <return 0;
if (!invocation.callRealMethod) return NS_OK; <if (!invocation.callRealMethod()) return NS_ERROR_NULL_POINTER; &return NS_OK;
if (invocation.callRealMethod) &return 0; return 0;
if (!invocation.callRealMethod()) return NS_OK; if (invocation.name) <return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (!invocation.callRealMethod()) return null; if (invocation.isDestroyable()) return 0; <return null;
if (invocation) <return rv; return invocation.callRealMethod();
