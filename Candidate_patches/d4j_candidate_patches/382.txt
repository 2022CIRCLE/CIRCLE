golden:
if (compiler != null && !compiler.hasRegExpGlobalReferences()) { if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) { return false; } else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) { Node param = nameNode.getNext(); if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; } } }  return true;
inference:
return true;
return false;
return result;

return compiler.hasRegExpGlobalReferences();
return!compiler.hasRegExpGlobalReferences();
return false;
return true;
return compiler!= null &&!compiler.hasRegExpGlobalReferences();
return (compiler!= null);
return nameNode.getFirstChild();
return true;
return true;
return compiler.hasRegExpGlobalReferences();
return compiler!= null;
break;
return null;
return compiler!= null && compiler.hasRegExpGlobalReferences();
return rv;
return compiler == null;
return 0;
return!compiler;
return ret;
return compiler.hasRegExpGlobalReferences(compiler);
return compiler;
return count;
return functionCallHasSideEffects(compiler, compiler);
return 1;
return!compiler &&!compiler.hasRegExpGlobalReferences();
return (compiler == null);
return compiler == null &&!compiler.hasRegExpGlobalReferences();
return (compiler == null);
return nameNode;
return compiler == null;
return (compiler!= null && compiler.hasRegExpGlobalReferences());
return code;
return compiler == null &&!compiler.hasRegExpGlobalReferences();
return (true);
return functionCallHasSideEffects(nameNode, compiler);
return compiler!= null &&!compiler.hasRegExpGlobalReferences();
return false;
return compiler.hasRegExpGlobalReferences(nameNode);
return (compiler == null &&!compiler.hasRegExpGlobalReferences());
return compiler.hasRegExpGlobalReferences(compiler);
return null;
if (!compiler.hasRegExpGlobalReferences())  return false;
return break;
return NS_OK;
return compiler.hasRegExpGlobalReferences()? true : false;
return(compiler!= null);
return (0);
return res;
return functionCallHasSideEffects(node, compiler);
return (!compiler.hasRegExpGlobalReferences());
return false;
if (compiler!= null)  return true;
return this;
return (compiler!= null) && compiler.hasRegExpGlobalReferences();
return, true;
return (compiler == null &&!compiler.hasRegExpGlobalReferences());
if (compiler!= null)  return false;
return verbose;
return (1);
return type;
return(compiler);
return Compiler(compiler);
return compiler!= null;
return reference;
return retval;
return error;
return nameNode.getFirstChild().getType() == Token.STRING;
return;
return contiguous;
return (compiler &&!compiler.hasRegExpGlobalReferences());
return (compiler!= null);
return compiler!= null &&!compiler.hasRegExpGlobalReferences());
return compiler.hasRegExpGlobalReferences()? false : false;
return flags;
return (compiler!= null)? true : false;
return -1;
return compiler.hasRegExpGlobalReferences(&compiler);
return value;
return nameNode.getFirstChild().getType();
return compileer!= null &&!compiler.hasRegExpGlobalReferences();
return (compiler!= null || compiler.hasRegExpGlobalReferences());
return binding;
return compiler.hasRegExpGlobalReferences(nameNode);
if (compiler == null)  return false;
Return true;
return return true;
if (compiler!= null) return false;
return compiler &&!compiler.hasRegExpGlobalReferences();
return compiler!=null;
return compiler!= null && compiler.hasRegExpGlobalReferences();
return!compiler.hasRegExpGlobalReferences()? true : false;
return(true);
return compileer.hasRegExpGlobalReferences();
returncompiler!= null &&!compiler.hasRegExpGlobalReferences();
return compiler == null && compiler.hasRegExpGlobalReferences();
return compiler.hasRegExpGlobalReferences()? false : true;
result = compiler.hasRegExpGlobalReferences(); return result;
return found;
return match;
return (compiler.hasRegExpGlobalReferences());
return valid;
return (compiler);
return it;
return!compiler.hasRegExpGlobalReferences(compiler);
return null;
return pass;
return functionCallHasSideEffects(compiler, compiler, compiler);
return param;
return!compiler.hasRegExpGlobalReferences(nameNode);
return (compiler!= null)? true : true;
return nameNode.hasFirstChild();
else return true;
#endif return true;
return (compiler == null)? true : false;
return (compiler == null || compiler.hasRegExpGlobalReferences());
return Compiler.hasRegExpGlobalReferences(compiler);
return (compiler == null || compiler.hasRegExpGlobalReferences());
return isValid;
return fake;
return (compiler.hasRegExpGlobalReferences());
return (false);
return (compiler == null)? true : false;
return target;
return complete;
return success;
if (compiler!= null) return true;
return nameNode.isNoSideEffectsCall();
if (!compiler.hasRegExpGlobalReferences())  return true;
if (!compiler.hasRegExpGlobalReferences()) return false;
if (compiler == null)  return true;
return &compiler.hasRegExpGlobalReferences();
return compiler.hasRegExpGlobalReferences()? true : false;
return!compiler.hasRegExpGlobalReferences()? false : false;
return (null);
return compiler.hasRegExpGlobalReferences(&compiler);
return functionCallHasSideEffects(nameNode, compiler, compiler);
return compiler == 0;
return compiler!= null && Compiler.hasRegExpGlobalReferences();
return compiler.hasRegExpGlobalReferences(node);
return (false);
return regExpGlobalReferences;
return (compiler == null);
return (compiler!= null,!compiler.hasRegExpGlobalReferences());
return *compiler;
return prev;
return functionCallHasSideEffects(compiler);
return Compiler.false;
return functionCallHasSideEffects(compiler, nameNode, compiler);
return compiler==null;
return (compiler!= null)? false : true;
return codeCallHasSideEffects(compiler, compiler);
return compiler == null;
returncompiler.hasRegExpGlobalReferences();
return &compiler;
if (compiler == null)  return false;
return super.functionCallHasSideEffects(compiler, compiler);
Node param = nameNode.getNext();
if (compiler)  return true;
return len;
return (compiler!= null && Compiler.hasRegExpGlobalReferences());
returncompiler!= null;
return compiler.hasRegExpGlobalReferences()? true : true;
return isEmpty;
return Compiler(compiler, compiler);
return!compiler.hasRegExpGlobalReferences()? false : true;
return assert(compiler!= null);
return (!compiler.hasRegExpGlobalReferences())? true : false;
return (compiler == null && compiler.hasRegExpGlobalReferences());
return __func__;
return (!compiler &&!compiler.hasRegExpGlobalReferences());
return REGEXP_METHODS;
return nameNode.hasNext();
continue;
return (compiler!= null && compiler.hasRegExpGlobalReferences())
return nameNode.getFirstChild();
if (compiler!= null) return compiler.hasRegExpGlobalReferences();
return node.getFirstChild();
return nameNode.GetFirstChild();
return compiler.hasRegExpGlobalReferences(nameNode, compiler);
return isExpect;
return (compiler == null && compiler.hasRegExpGlobalReferences());
return (compiler!=null);
return bool(compiler);
return compiler!= null && compiler.hasRegExpGlobalReferences());
return (compiler!= null &&!compiler.hasRegExpGlobalReferences());
if (compiler!= null &&!compiler.hasRegExpGlobalReferences())  if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;   return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences())  if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;    return true;
return CompilerUtils.createGlobalReference(compiler, nameNode.getFirstChild(), compiler, nameNode.getFirstChild());
return Compiler.getInstance().mInstanceOwner().HasIgnoreProperty("compiler", compiler, compiler);
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return (compiler!= null &&!compiler.hasRegExpGlobalReferences())? true : false;
return compiler == null && compiler == null;
if (compiler!= null)  if (compiler.hasRegExpGlobalReferences())  if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;    return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences())  if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;    return true;
return mError;
return (compiler!= null &&!compiler.hasRegExpGlobalReferences())? 0 : false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences())  return false;
return (compiler!= null &&!compiler.hasRegExpGlobalReferences())?!compiler.hasRegExpGlobalReferences() : false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;   return true;
return bool_comparator;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP)  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;   return true;
if (compiler!= null)  if (!compiler.hasRegExpGlobalReferences())  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true;
return Compiler.findReference(compiler, null, &compiler);
if (compiler!= null &&!compiler.hasRegExpGlobalReferences())  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;    return true;
return COMPILE_EMPTY_PROP;
return (compiler!= null &&!compiler.hasRegExpGlobalReferences())? false : true;
return (compiler!= null)? Compiler.hasRegExpGlobalReferences() : false;
if (compiler!= null)  if (compiler.hasRegExpGlobalReferences())  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return Compiler_return(compiler, &compiler, &compiler, &compiler, null);
return Compiler.HasRegExpGlobalReferences(compiler);
if (compiler!= null &&!compiler.hasRegExpGlobalReferences())  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return (compiler!= null); return (compiler!= null)? Compiler.hasRegExpGlobalReferences() : Compiler.hasRegExpGlobalReferences();
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; return Compiler(compiler, compiler);
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;    return true;
return (compiler!= null &&!compiler.hasRegExpGlobalReferences())? false : false;
return nameNode.getFirstChild().getType() == Token.STRING && strcmp(nameNode.getLastChild().getString(), &compiler) == Token.STRING? 1 : 2;
if (compiler!= null)  if (compiler.hasRegExpGlobalReferences())  if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;   return true;
return COMPILER_HAS_RESULT_VALUE;
return compiler == null? nameNode.getFirstChild() : null;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences())  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return CompilerOfType(nameNode);
return CompilerOpFlags(compiler, compiler);
if (compiler!= null)  if (!compiler.hasRegExpGlobalReferences())  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;    return true;
return COMPILEER_CONTROL_EVENTS;
return isReturn;
return CompilerFactory(compiler, compiler);
return (compiler!= null)? compiler.hasRegExpGlobalReferences() : true;
return (compiler!= null &&!compiler.hasRegExpGlobalReferences())? true : true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences())  return true;
return isTrue;
return CompilerToAssert(compiler,compiler);
if (compiler!= null &&!compiler.hasRegExpGlobalReferences())  return false;  else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return aNameChanged;
return Comparisons(compiler,compiler,compiler.hasRegExpGlobalReferences());
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return ef_func_isExpect;
return (compiler!= null &&!compiler.hasRegExpGlobalReferences())? NS_OK : false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false;  else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false;  else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType() == Token.STRING ||!nameNode.getFirstChild().getType() == Token.STRING
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&<return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (!compiler.hasRegExpGlobalReferences()) <return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler == null) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (!compiler.hasRegExpGlobalReferences()) &return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (!compiler.hasRegExpGlobalReferences()) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler == null) &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler) <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&<return true;
if (compiler!= null) &return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&&return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType() == Token.STRING ||!nameNode.getFirstChild().getType() == Token.STRING
if (compiler == null) <return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<<return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType() == Token.STRING ||!nameNode.getFirstChild().getType() == Token.STRING
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType() == Token.STRING ||!nameNode.getFirstChild().getType() == Token.STRING
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler == null) return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
<return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler == null) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<<return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<<return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&<return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType() == Token.STRING ||!nameNode.getFirstChild().getType() == Token.STRING
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&&return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler == null) &return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&<return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler == null) &return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<<return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<return true;
&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (!compiler.hasRegExpGlobalReferences()) <return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler == null) <return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType() == Token.STRING ||!nameNode.getFirstChild().getType() == Token.STRING
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType() == Token.STRING ||!nameNode.getFirstChild().getType() == Token.STRING
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler) return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType() == Token.STRING ||!nameNode.getFirstChild().getType() == Token.STRING
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<<return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType() == Token.STRING ||!nameNode.getFirstChild().getType() == Token.STRING
if (compiler!= null) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler == null) <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<<return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (!compiler.hasRegExpGlobalReferences()) &return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&<return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&<return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&&return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<&return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING &&!nameNode.getFirstChild().getType() == Token.STRING ||!nameNode.getFirstChild().getType() == Token.STRING
if (!compiler.hasRegExpGlobalReferences()) return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler) &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false;
if (compiler!= null) if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &&&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <<return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
return eif(compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) &if (!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return false; if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &<&return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) &return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; &return true;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) return true; if (nameNode.getFirstChild().getType() == Token.REGEXP) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; <return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) &if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) if (!compiler.hasRegExpGlobalReferences()) return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) <return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) &if (compiler.hasRegExpGlobalReferences()) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null) <if (compiler.hasRegExpGlobalReferences()) if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) &return false; else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
if (compiler!= null) return null_compiler; if (compiler.hasRegExpGlobalReferences()) <return false; <else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) <Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false;
if (compiler!= null &&!compiler.hasRegExpGlobalReferences()) <if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) return false; &else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) Node param = nameNode.getNext(); if (param!= null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; return true;
