
columnData.removeValue(columnKey);
rowData.removeValue(columnKey.get());
columnData.removeValue(columnKey);
this.rowData.removeValue(columnKey);
rowData.removeElement(columnKey);
rv = rowData.removeValue(columnKey);
if (rowData) rowData.removeValue(columnKey);
rowData.removeValue(columnKey, true);
rowData.removeValue(columnKey);
if (rowData) rowData.removeValue(columnKey);
colData.removeValue(columnKey);
rowData.removeValue(columnKey, null);
this.rows.removeValue(columnKey);
rowData.removeValue(columnKey, this);
rowData.remove(columnKey.get());
this.rowData.removeValue(columnKey);
rowData.removeValue(columnKey, false);
this.columnKeys.remove(columnKey);
rowData.removeElementAt(columnKey);
rowData.removeValue(columnKey, 0);
(void) rowData.removeValue(columnKey);
aRowData.removeValue(columnKey);
rowData.removeValue(columnKey);
rowData.remove(columnKey);
rowData.removeValue(columnKey.get());
removeColumn(columnKey);
rowData.removeElementValue(columnKey);
this.rows.remove(columnKey);
rowData.removeValue(&columnKey);
result = rowData.removeValue(columnKey);
rowData.removeValue(columnKey, true);
return rowData.removeValue(columnKey);
columnKey.removeValue(columnKey);
rowData = rowData.removeValue(columnKey);
columnData = rowData.removeValue(columnKey);
rowData.RemoveValue(columnKey);
cellData.removeValue(columnKey);
nrowData.removeValue(columnKey);
nrows.removeValue(columnKey);
rowData.remove(columnKey, true);
rowData.removeKey(columnKey);
delete rowData;
rowData.removeValues(columnKey);
this.rowData.removeValue(columnKey);
rowData.removeValue( columnKey );
rowData.RemoveValue(columnKey);
break;
rows.removeValue(columnKey);
rowData.removeValue(columnKey, null);
rowData.remove(columnKey);
(void)rowData.removeValue(columnKey);
iterator.remove(columnKey);
rowData.removeValue(columnKey, this);
data.removeValue(columnKey);
rowData.removeValue(columnKey, false);
rowData.remove(columnKey, false);
value.removeValue(columnKey);
rowData.removeElement(columnKey);
this.rows.removeElement(columnKey);
rowData.remove(columnKey, null);
rowData.removeValue(columnKey.GetUnicode());
RowData.removeValue(columnKey);
tableData.removeValue(columnKey);
rowData.removeAll(columnKey);
val = rowData.removeValue(columnKey);
ret = rowData.removeValue(columnKey);
iterator.removeValue(columnKey);
else  rowData.removeValue(columnKey);
rv = rowData.removeValue(columnKey);
rowData.removeValue(key);
colData.removeValue(columnKey);
this.rows.removeValue(columnKey);
delete columnKey;
columnKey = rowData.removeValue(columnKey);
rowData.removeObject(columnKey);
rowData = (DefaultKeyedValues) iterator.next();
rowData.removeValue(columnKey, -1);
else rowData.removeValue(columnKey);
mRowData.removeValue(columnKey);
rowData.removeValue(columnKey, 0);
itemData.removeValue(columnKey);
rowData.remove(columnKey, 0);
getRowData().removeValue(columnKey);
rowData.removeString(columnKey);
aValue.removeValue(columnKey);
mData.removeValue(columnKey);
rowData.removeChild(columnKey);
rowData.setValue(columnKey);
rowData.removeStringValue(columnKey);
table.removeValue(columnKey);
rowData.remove(columnKey, this);
rowData.removeInt(columnKey);
this.columnKeys.removeValue(columnKey);
aColumnData.removeValue(columnKey);
rowData.removeValue(columnKey, 1);
PRInt32 rowData.removeValue(columnKey);
item.removeValue(columnKey);
rowData.removeValue(ColumnKey);
this.rowData.removeValue(columnKey);
aData.removeValue(columnKey);
this.columns.removeValue(columnKey);
rowData = columnKey;
rowData.clear();
columnData.remove(columnKey);
cellData.removeValue(columnKey);
this.columnKeys.removeElement(columnKey);
rowData.removeIntValue(columnKey);
rowData.removeValue(columnKey.mValue);
if (rowData) columnData.removeValue(columnKey);
this.columns.remove(columnKey);
self.rowData.removeValue(columnKey);
rowData.removeEmptyValue(columnKey);
res = rowData.removeValue(columnKey);
rowData.removeValue(rowKey);
nsCRT::free(columnKey);
cols.removeValue(columnKey);
rowData.removeValue(tableKey);
rowData.removeKey(columnKey);
rowData.removeValue(columnKey, value);
tableData.removeValue(columnKey);
rowData.removeValue(columnKey)
retval = rowData.removeValue(columnKey);
val.removeValue(columnKey);
rowData.removeValue(value);
columns.removeValue(columnKey);
rowData.addValue(columnKey);
nsresult rv;
col = rowData.removeValue(columnKey);
container.removeValue(columnKey);
r = rowData.removeValue(columnKey);
rowData.removeValue(columnKey, &rowData);
rowData = null;
i = rowData.removeValue(columnKey);
rowData.removeValue(this.columnKey);
rowData.removeValue(columnName);
rowData.removeValue(columnKey.trim());
rowData.removeValue(columnKey, false);
rowData.removeValue(columnKey, flags);
rowData.removeValue(column);
rowData.removeValue(aColumnKey);
free(columnKey);
rowData.removeData(columnKey);
rowData.remove(columnKey)
rowData.remove(columnKey, &columnKey);
rowData.put(columnKey);
rowData.removeValue(columnKey == null);
return rowData;
rowData.removeValue(columnKey, &this);
rowData.remove(columnKey.GetUnicode());
rowData.removeValue(columnKey, true);
rowData.remove(columnKey.get());
rowData = this.rows;
if (columnKey == null)  return;
rowData.removeValue(columnKey.cstr());
removeColumn(rowData);
if (columnKey == null) return;
if (!columnKey)  return;
int i;
rowData.removeValue(columnKey.Length());
rowData.removeValue(columnKey + 1);
rv = columnData.removeValue(columnKey);
rowData.removeValue(columnKey, data);
rowData.remove(columnKey, &columnData);
return 0;
rowData.removeValue(columnKey,this);
rowData.removeValue(columnKey, aValue);
columnData = rowData;
rowData.removeValue(columnKeys[0]);
rowData.removeValue(columnKey, -1);
rowData = rowData;
rowData.removeValue(columnKey, '0');
rowData.removeValue(columnKey.mKey);
rowData.removeValue(columnKey,true);
rowData.removeValue(columnKey, &iterator);
rowData.removeValue(columnKey, iterator);
continue;
rowData.removeValue(columnKey, null, null);
rowData.removeValue(columnKey, aCol);
rowData.removeValue(columnKey, nil);
rowData.removeValue(columnKey, rv);
rowData.removeValue(columnKey, 0, 0);
rowData.removeValue(columnKey, &rv);
rowData.removeValue(columnKey, columnKey);
rowData.removeValue(columnKey, &column);
rowData.removeValue(columnKey, this.rows);
rowData = (DefaultKeyedValues)iterator.next();
columnData = (DefaultKeyedValues) iterator.next();
rowData.removeValue(columnKey == 0);
rowData.removeValue(columnKey, &data);
rowData.remove(columnKey, &columnKeys);
if (!columnKey)  rowData.removeValue(columnKey);
if (columnKey)  fprintf(stderr, "%s: Removing Column" % columnKey);  else  fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData)  if (columnKey)  /* delete the column */  else  columnData.removeValue(columnKey);
if (columnKey)  nsAutoString tmp; rowData.removeValue(tmp);  else  nsAutoString tmp;
if (columnKey)  rowData.removeValue(columnKey);
rowData.removeValue(columnKey, this.rows);
if (rowData!= null)  if (columnKey)  nsCRT::free(columnKey);
if (columnKey) rowData.removeValue(columnKey);
if (columnKey)  if (columnKey)  PRInt32 i; if ((i = rowData.keySet.Count()) == 0)  rowData.removeValue(columnKey);  else  rowData.removeValue(columnKey);
if (columnKey && rowData) rowData.removeValue(columnKey);
this.columnData.removeValue(columnKey);
else  nsColumnData::RemoveValue(columnKey);
if (columnKey && columnKey)  if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys)  this.columnKeys.remove(columnKey);  else  if (columnKey!= this.columnKeys)  this.columnKeys.remove(columnKey);  else  this.columnKeys.remove(columnKey);
if (!this.columns)  return 0;
if (rowData.removeValue(columnKey) == null)  return 0;
if (columnKey == null)  if (columnKey == null)  if (columnKey == null)  if (columnKey == null)  if (columnKey == null)  /* not a valid value, this has been discarded */ if (columnKey == null)  /* ignore the values that are missing in the column. */  else  */
rowData.removeValue(columnKey, &columnKey);
if (columnKey == 0)  mData = new DefaultKeyedValues(columnKey); if (mData == 0)  if (mData == null)  mData = new DefaultKeyedValues(columnKey);
if (columnKey == null)  if (columnKey.value == null)  delete [] col;
if (rowData)  rowData.removeValue(columnKey);
if (columnKey == null)  /* Remove column in the row. */ rowData.removeValue(columnKey);
if (columnKey)  rowData.removeValue(columnKey);  else  /* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey)  rv = rowData.removeValue(columnKey); if (NS_FAILED(rv))  if (aColumn)  /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);  else  /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
rowData.removeValue(columnKey, &dummyKey);
if (columnKey)  nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation)  nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation);  else  if (colDirtyLocation)  nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation;  else  nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (!columnKey)   DefaultKeyedValues es; es = (DefaultKeyedValues) iterator.next(); es.removeValue(es);
rowData.removeValue((ConstKey*)columnKey);
rowData.removeValue(columnKey, (DefaultKeyedValues **)&columnKey);
if (columnKey)  rowData.removeValue(columnKey);  else  if (columnKey)   else  *columnKey = null;
/* XXX */ if (this.rowData.get() == (defaultKeyedValues)) rowData.removeValue(columnKey);
if (columnKey)  DefaultKeyedValues &= ((PRInt32)rowData.get()).value;  else  *columnKey = 0;
if (columnKey && rowData.removeValue(columnKey))  delete columnKey;
rowData.removeValue(columnKey.mIsComparator());
rdfData.removeValue(columnKey);
rowData.removeValue(columnKey, &rowData.len);
if (columnKey && columnData)  if (!ColValues.get(columnKey))  colValues.remove(columnKey);   else  if (columnKey.mValue == kValues.get(columnKey.mValue))  if (!ColValues.get(columnKey.mValue))
if (!columnKey)  if (columnKey)  rowData.removeValue(columnKey);
rowData.removeValue(columnKey, getter_AddRefs(columnKey));
rowData.removeValue(columnKey, eRemove);
rowData.removeValue(columnKey, (nsIArena*)&columnKey);
if (rowData && columnKey)  rowData.removeValue(columnKey);  else  nsAutoString value; if (!this.rows.isEmpty())  nsString value; if ((nsString)this.rows.elementAt(i))!= value)  PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK;   else  PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i  columnKey; i++)  nsString *s = columnKey; if (s)  *s = s;  *s = s;   else  *s = s;    else  if (s == '0')  *s = s;  else  *
rowData.removeValue(columnKey, mKey);
if (!columnKey)  PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex)  if (columnIndex  columnIndex)  return;  if (columnIndex = columnIndex)  break;
rowData.removeValue(rowData.columnKey);
if (!rowData)  return 0;
if (columnKey!= '_') rowData.removeValue(columnKey);
if (columnKey)  if (rowData.removeValue(columnKey))  if (aColumnKey)  aColumnKey.Remove(columnKey);
if (columnKey == null)  rv = rowData.removeValue(columnKey);  else  rv = -1;
rowData.removeValue(rowData.columnKey);
if (rowData)  rowData.removeValue(columnKey);  else  rowData.removeValue(columnKey);
rowData.removeValue(columnKey, rowData.len);
/* XXX Remove all columns in the database */ columnKeys = &columnKeys; /* Remove all columns in the database */
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) return rv;
if (columnKey == this.columns.len)  nsAutoString columnKey; columnKey.AssignWithConversion(columnKey);  else  nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
/* XXX need to remove the row */ rv = rowData.removeValue(columnKey); if (NS_FAILED(rv))  pkgUnlock(); pkgUnlock();
this.columnKeys.removeElementAt(columnKey);
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey)  rowData.removeValue(columnKey);  else  this.rows.remove(columnKey);
if (columnKey == '>')  if (columnKey == '=')  /* XXX ::RemoveColumn(columnKey);  else  /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>')  if (columnKey == '')  /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance()))  if (columnKey == '')  /* skip */  else  /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance()))  /* skip this entry because the entry will also come before the key has been set. */  else  /
nsAutoString columnKey; columnKey.GetColCount(&columnKey); if (!columnKey) return NS_ERROR_NULL_POINTER;
rowData.removeValue(columnKey, getter_AddRefs(columnKey));
if (rowData!= null)  if (columnKey)  if (columnKey == null)  rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey == -1)  DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData)  rowData.removeValue(columnKey);  else  PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i  colIndex; i++)  if (colIndex  colIndex)  if (colIndex  columnIndex)  if (colIndex >= i)  if (colIndex)  i = i;  else  i = rowData.Count();    else  if (colIndex  columnIndex)    else  if (colIndex  columnIndex)  columnIndex++;    else  i = i;
if (!columnKey)  if (!this.columnKeys.equals(columnKey))  this.columnKeys.remove(columnKey); return;
if (columnKey == this.columns.value)  if (columnData.keyEquals(columnKey))  if (columnKey)  nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
rowData.removeValue(columnKey, kNameSpaceID_None);
if (columnKey!= mData)  int i;
rowData.removeValue(columnKey, null);
nsRecycle(rowData, columnKey);
if (columnKey)  aColKey = (aColKey) columnKey;  else  aColKey = 0;
rowData.remove(columnKey.mValue);
for (columnKey = (columnKey = 0); columnKey  0; columnKey++)  nsresult rv;
if (columnKey)  if (columnKey)  nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val);  else  val.RemoveValue(val);
rdf_removeValue(columnKey);
nsresult rv; rv = rowData.removeValue(columnKey);
if (columnKey == this.column)  rowData.removeValue(columnKey);
if (columnKey)  rowData.removeValue(columnKey);  else  if (columnKey.mCurrentElement!= null)  nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
nsIAtom* atomKey; aCurrentRecycler.mAtoms.mAtom = (nsIAtom*)atomKey; nsIAtom* atomKey = (nsIAtom*)atomKey;
if (rowData!= null)  for (i = 0; i  columns.size; i++)  if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey)  if (noColIndex == 0)  aColIndex = null;   else  aColIndex = null;
if (!rowData.isEmpty())  delete rowData;  else  rowData.removeValue(columnKey);
/*RemoveColumn(columnKey); */
if (columnKey)  rowData.removeValue(columnKey);  else  this.rows.removeElementAt(columnKey);
if (rowData)  if (columnKey)  nsKeyKey* colKey = nsKey::e_ColKey;   else  nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
rowData.removeValue(columnKey, rowData.db_type);
if (columnKey == kNC_columnKey)  retval = NS_OK;
if (columnKey)  aRowData.removeValue(columnKey);
if (rowData.hasValue(columnKey))  if (columnKey.mKey == &columnKey.mName)    if (columnKey.mValue == &columnKey.mKey)  if (rowData.mValue == &columnKey.mKey)  if (rowData.mValue == &columnKey.mValue)  rowData.mValue = &columnKey;  else  if (rowData.mValue == &columnKey.mValue)  rowData.mValue = &columnKey;  else
rowData.removeValue(columnKey, (void**) &columnData);
if (columnKey == '_')  delete columnKey;
rowData.removeValue(columnKey, &this.columnKeys);
if (columnKey!= '0')  /* do this on the new row. */ return;
columnData = (DefaultKeyedValues) iterator.next(); rowData.removeValue(columnKey);
if (!rowData)  if (columnKey)  /* * Do the first check that the row data has been removed, remove it */ rowData.removeValue(columnKey);
rv = __removeColumn(columnKey); if (NS_FAILED(rv)) return;
/* * If we are in a different field we want to remove the first column * if we do not have a column, just return this * new column. */ rowData.removeValue(columnKey); */
if (! rowData.removeValue(columnKey))  return NS_OK;
rowData.removeValue(columnKey, rowData.keys);
if (rowData)  /* delete rowData.removeValue(columnKey);  else  /* * Remove the row in the column. */

if (columnKey) &rowData.removeValue(columnKey); <else <if (columnKey) <else *columnKey = null;
if (columnKey == null) rv = rowData.removeValue(columnKey); <else rv = -1;
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else &if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); <else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData!= null) &for (i = 0; i &columns.size; i++) <if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) <if (rowData.removeValue(columnKey)) &if (aColumnKey) aColumnKey.Remove(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) &if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey == this.columns.len) <nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); else nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (rowData!= null) if (columnKey) if (columnKey == null) <rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) <aColKey = (aColKey) columnKey; else aColKey = 0;
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); <else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData!= null) &if (columnKey) nsCRT::free(columnKey);
if (!rowData.isEmpty()) &delete rowData; &else <rowData.removeValue(columnKey);
if (columnKey == '>') <if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) <&&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
for (columnKey = (columnKey = 0); columnKey <0; columnKey++) nsresult rv;
if (columnKey == null) if (columnKey == null) <if (columnKey == null) <if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData) <if (columnKey) </* delete the column */ &else columnData.removeValue(columnKey);
if (columnKey == '>') &if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); <else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) <&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex &columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey && columnData) <if (!ColValues.get(columnKey)) colValues.remove(columnKey); &<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData && columnKey) <rowData.removeValue(columnKey); else nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (!rowData.isEmpty()) delete rowData; else rowData.removeValue(columnKey);
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) rowData.removeValue(columnKey); else if (columnKey) <else *columnKey = null;
if (rowData) <if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; &&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) rowData.removeValue(columnKey); &else &if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
<if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); &else &nsAutoString tmp;
if (rowData) &if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; <<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) &if (columnKey) <nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData) if (columnKey) </* delete the column */ else &columnData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else &if (columnKey) &else *columnKey = null;
if (rowData) <if (columnKey) /* delete the column */ <else columnData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); else </* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) if (noColIndex == 0) <aColIndex = null; &<else aColIndex = null;
if (columnKey == null) <if (columnKey == null) if (columnKey == null) if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData) </* delete rowData.removeValue(columnKey); else /* * Remove the row in the column. */
if (columnKey) <rowData.removeValue(columnKey); else <this.rows.removeElementAt(columnKey);
if (columnKey == null) <if (columnKey == null) <if (columnKey == null) <if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == '>') <if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) <DefaultKeyedValues &= &((PRInt32)rowData.get()).value; <else <*columnKey = 0;
<if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); else nsAutoString tmp;
if (columnKey) &rowData.removeValue(columnKey); else </* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == '>') &if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <if (columnKey) &nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) &rowData.removeValue(columnKey); <else &this.rows.removeElementAt(columnKey);
if (columnKey) &if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) if (columnKey) <nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData && columnKey) &rowData.removeValue(columnKey); else <nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) <if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData) &if (columnKey) &/* delete the column */ <else columnData.removeValue(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex &columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey == this.columns.value) &if (columnData.keyEquals(columnKey)) <if (columnKey) <nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey == 0) <mData = new DefaultKeyedValues(columnKey); if (mData == 0) if (mData == null) <mData = new DefaultKeyedValues(columnKey);
if (columnKey == '>') <if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); &else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) &rowData.removeValue(columnKey); &else <if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &rowData.removeValue(columnKey); &else <if (columnKey) &else *columnKey = null;
if (columnKey) <aColKey = (aColKey) columnKey; &else aColKey = 0;
if (columnKey && columnData) <if (!ColValues.get(columnKey)) colValues.remove(columnKey); <else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); <else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &rowData.removeValue(columnKey); <else &if (columnKey) &else *columnKey = null;
if (columnKey == this.columns.len) <nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); <else &nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey == this.columns.value) &if (columnData.keyEquals(columnKey)) <if (columnKey) nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) &if (noColIndex == 0) <aColIndex = null; <<else aColIndex = null;
if (columnKey == '>') <if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData && columnKey) &rowData.removeValue(columnKey); else &nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData) &if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; &&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <rowData.removeValue(columnKey); else <if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey && columnData) &if (!ColValues.get(columnKey)) <colValues.remove(columnKey); &else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData) <if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; &else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (rowData) &if (columnKey) &/* delete the column */ else columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) &nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (!rowData) if (columnKey) &/* * Do the first check that the row data has been removed, remove it */ rowData.removeValue(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) <if (columnKey) <nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey == '>') if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); &else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData) &if (columnKey) &/* delete the column */ &else &columnData.removeValue(columnKey);
if (rowData) if (columnKey) /* delete the column */ else columnData.removeValue(columnKey);
<for (columnKey = (columnKey = 0); columnKey <0; columnKey++) nsresult rv;
if (columnKey) &rowData.removeValue(columnKey); else &if (columnKey) <else *columnKey = null;
if (rowData) <if (columnKey) /* delete the column */ <else <columnData.removeValue(columnKey);
if (rowData) &rowData.removeValue(columnKey); &else &rowData.removeValue(columnKey);
if (rowData) &if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; <else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <if (rowData.removeValue(columnKey)) if (aColumnKey) &aColumnKey.Remove(columnKey);
if (columnKey) if (columnKey) <nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (rowData!= null) if (columnKey) <if (columnKey == null) <rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) if (columnKey) nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (!columnKey) <return;
&if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); &else nsAutoString tmp;
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); <else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData!= null) for (i = 0; i &columns.size; i++) if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) DefaultKeyedValues &= &((PRInt32)rowData.get()).value; <else &*columnKey = 0;
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey == '>') if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); &else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); &else &nsAutoString tmp;
if (columnKey && columnData) &if (!ColValues.get(columnKey)) colValues.remove(columnKey); &&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey == null) if (columnKey == null) &if (columnKey == null) <if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData!= null) &for (i = 0; i <columns.size; i++) &if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex <columnIndex) &return; if (columnIndex = columnIndex) break;
<if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); else nsAutoString tmp;
if (rowData) &if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; <<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData!= null) <for (i = 0; i <columns.size; i++) if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &rowData.removeValue(columnKey); &else &if (columnKey) &else *columnKey = null;
if (!columnKey) <<DefaultKeyedValues es; es = (DefaultKeyedValues) iterator.next(); es.removeValue(es);
if (columnKey) &DefaultKeyedValues &= <((PRInt32)rowData.get()).value; else &*columnKey = 0;
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &rowData.removeValue(columnKey); else &if (columnKey) else *columnKey = null;
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey == null) &if (columnKey == null) &if (columnKey == null) &if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == '>') if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); <else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex &columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) <DefaultKeyedValues &= ((PRInt32)rowData.get()).value; <else *columnKey = 0;
if (rowData!= null) if (columnKey) <if (columnKey == null) &rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else &this.rows.removeElementAt(columnKey);
if (columnKey) &if (noColIndex == 0) <aColIndex = null; &&else aColIndex = null;
if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); &else nsAutoString tmp;
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex &columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) <if (noColIndex == 0) aColIndex = null; &<else aColIndex = null;
if (columnKey) rowData.removeValue(columnKey); else /* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex columnIndex) <return; if (columnIndex = columnIndex) break;
if (rowData) <if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; &else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData) &if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData) if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
&if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); <else nsAutoString tmp;
if (columnKey && columnData) &if (!ColValues.get(columnKey)) colValues.remove(columnKey); <&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData && columnKey) rowData.removeValue(columnKey); else &nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) <if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey && columnData) <if (!ColValues.get(columnKey)) <colValues.remove(columnKey); &<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData) &if (columnKey) /* delete the column */ <else columnData.removeValue(columnKey);
if (columnKey == '>') <if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); &else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
for (columnKey = (columnKey = 0); columnKey &0; columnKey++) <nsresult rv;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); &else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex <columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey == null) </* Remove column in the row. */ rowData.removeValue(columnKey);
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) <&&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
<if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); &else <nsAutoString tmp;
if (columnKey == '>') if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); &else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) &if (columnKey) nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); &else val.RemoveValue(val);
&for (columnKey = (columnKey = 0); columnKey &0; columnKey++) &nsresult rv;
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else &this.rows.removeElementAt(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); <else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &if (columnKey) &nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); &else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) if (noColIndex == 0) <aColIndex = null; <else aColIndex = null;
if (rowData) if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; &else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData) &if (columnKey) &/* delete the column */ else &columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); <else &nsAutoString tmp;
if (columnKey) <rowData.removeValue(columnKey); &else if (columnKey) else *columnKey = null;
if (columnKey) if (noColIndex == 0) aColIndex = null; <<else aColIndex = null;
if (columnKey) &if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey == '>') if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); <else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == this.columns.value) &if (columnData.keyEquals(columnKey)) if (columnKey) &nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (rowData) &/* delete rowData.removeValue(columnKey); &else /* * Remove the row in the column. */
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex <columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); else if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); &else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == 0) mData = new DefaultKeyedValues(columnKey); if (mData == 0) if (mData == null) <mData = new DefaultKeyedValues(columnKey);
if (columnKey && columnData) &if (!ColValues.get(columnKey)) &colValues.remove(columnKey); else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
else nsColumnData::RemoveValue(columnKey);
if (columnKey) if (columnKey) &nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); <else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData) rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey == this.columns.value) if (columnData.keyEquals(columnKey)) &if (columnKey) &nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (rowData && columnKey) &rowData.removeValue(columnKey); else &nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == null) &if (columnKey == null) <if (columnKey == null) <if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData!= null) if (columnKey) &if (columnKey == null) &rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey == null) &if (columnKey == null) if (columnKey == null) &if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &DefaultKeyedValues &= ((PRInt32)rowData.get()).value; &else <*columnKey = 0;
if (columnKey == null) return;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex <columnIndex) return; if (columnIndex = columnIndex) break;
if (rowData!= null) &if (columnKey) <nsCRT::free(columnKey);
if (rowData && columnKey) &rowData.removeValue(columnKey); else &nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &if (columnKey) <nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) &DefaultKeyedValues &= ((PRInt32)rowData.get()).value; <else &*columnKey = 0;
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) <rowData.removeValue(columnKey); else this.rows.remove(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else &if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) if (columnKey) nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey == '>') &if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData) &rowData.removeValue(columnKey);
if (columnKey == null) <rv = rowData.removeValue(columnKey); &else &rv = -1;
if (columnKey) <if (columnKey) <nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) &rowData.removeValue(columnKey); &else if (columnKey) <else *columnKey = null;
rowData.remove(columnKey);
if (rowData) <rowData.removeValue(columnKey); &else &rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else </* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
<if (rowData.removeValue(columnKey) == null) &return 0;
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <if (noColIndex == 0) aColIndex = null; else aColIndex = null;
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); <else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &fprintf(stderr, "%s: Removing Column" % columnKey); <else fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData!= null) if (columnKey) if (columnKey == null) rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey == this.columns.value) if (columnData.keyEquals(columnKey)) &if (columnKey) nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) &&<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
<for (columnKey = (columnKey = 0); columnKey &0; columnKey++) nsresult rv;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); <else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey!= '0') /* do this on the new row. */ return;
if (columnKey == null) <if (columnKey == null) if (columnKey == null) if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey!= '0') &/* do this on the new row. */ return;
if (rowData && columnKey) &rowData.removeValue(columnKey); <else <nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData) <if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; <<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData) &/* delete rowData.removeValue(columnKey); <else </* * Remove the row in the column. */
if (columnKey == null) &if (columnKey == null) if (columnKey == null) &if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) &<<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) &DefaultKeyedValues &= ((PRInt32)rowData.get()).value; <else <*columnKey = 0;
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) <&<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) <if (noColIndex == 0) <aColIndex = null; &&else aColIndex = null;
if (rowData) if (columnKey) </* delete the column */ <else <columnData.removeValue(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData) &rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey == 0) <mData = new DefaultKeyedValues(columnKey); if (mData == 0) &if (mData == null) &mData = new DefaultKeyedValues(columnKey);
if (columnKey == null) <if (columnKey == null) <if (columnKey == null) &if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (rowData) <rowData.removeValue(columnKey); <else <rowData.removeValue(columnKey);
if (columnKey == '>') if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <rowData.removeValue(columnKey); else &if (columnKey) else *columnKey = null;
if (columnKey) &rowData.removeValue(columnKey); &else &this.rows.removeElementAt(columnKey);
if (columnKey) &DefaultKeyedValues &= &((PRInt32)rowData.get()).value; else &*columnKey = 0;
if (rowData && columnKey) &rowData.removeValue(columnKey); else <nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData) if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; &<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <aColKey = (aColKey) columnKey; <else &aColKey = 0;
if (columnKey == null) if (columnKey == null) if (columnKey == null) if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) rowData.removeValue(columnKey); else <this.rows.removeElementAt(columnKey);
if (rowData!= null) for (i = 0; i <columns.size; i++) &if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey == null) rv = rowData.removeValue(columnKey); <else <rv = -1;
if (columnKey == 0) &mData = new DefaultKeyedValues(columnKey); if (mData == 0) &if (mData == null) <mData = new DefaultKeyedValues(columnKey);
if (columnKey) if (noColIndex == 0) &aColIndex = null; &&else aColIndex = null;
if (columnKey == '>') if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); <else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <rowData.removeValue(columnKey); &else &if (columnKey) &else *columnKey = null;
if (columnKey && columnData) &if (!ColValues.get(columnKey)) &colValues.remove(columnKey); &&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <rowData.removeValue(columnKey); <else this.rows.removeElementAt(columnKey);
if (columnKey && columnData) &if (!ColValues.get(columnKey)) &colValues.remove(columnKey); &else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData) &if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; &&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) DefaultKeyedValues &= ((PRInt32)rowData.get()).value; &else *columnKey = 0;
if (columnKey) if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
<else &nsColumnData::RemoveValue(columnKey);
if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); <else <nsAutoString tmp;
if (columnKey) <rowData.removeValue(columnKey); <else &if (columnKey) &else *columnKey = null;
if (columnKey) &fprintf(stderr, "%s: Removing Column" % columnKey); else fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey == null) <if (columnKey == null) <if (columnKey == null) if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == '>') if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); <else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) &rowData.removeValue(columnKey); else &/* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) rowData.removeValue(columnKey); else <if (columnKey) <else *columnKey = null;
if (rowData && columnKey) <rowData.removeValue(columnKey); else &nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &DefaultKeyedValues &= &((PRInt32)rowData.get()).value; &else &*columnKey = 0;
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex &columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey == null) if (columnKey == null) if (columnKey == null) <if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
&if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); else <nsAutoString tmp;
if (columnKey) rowData.removeValue(columnKey); <else this.rows.removeElementAt(columnKey);
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <DefaultKeyedValues &= <((PRInt32)rowData.get()).value; &else *columnKey = 0;
if (columnKey == this.column) <rowData.removeValue(columnKey);
if (columnKey) aColKey = (aColKey) columnKey; else aColKey = 0;
if (columnKey) rowData.removeValue(columnKey); &else &if (columnKey) else *columnKey = null;
if (rowData) &if (columnKey) &/* delete the column */ <else <columnData.removeValue(columnKey);
if (rowData) &if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; <else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData) rowData.removeValue(columnKey); else <rowData.removeValue(columnKey);
if (columnKey && columnData) <if (!ColValues.get(columnKey)) colValues.remove(columnKey); <<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <rowData.removeValue(columnKey); else <if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &rowData.removeValue(columnKey); <else if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) <DefaultKeyedValues &= ((PRInt32)rowData.get()).value; else &*columnKey = 0;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) aColKey = (aColKey) columnKey; &else <aColKey = 0;
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) if (noColIndex == 0) <aColIndex = null; &&else aColIndex = null;
if (columnKey) DefaultKeyedValues &= ((PRInt32)rowData.get()).value; <else <*columnKey = 0;
if (columnKey) <rowData.removeValue(columnKey); &else &/* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) <DefaultKeyedValues &= ((PRInt32)rowData.get()).value; &else &*columnKey = 0;
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData) &/* delete rowData.removeValue(columnKey); &else &/* * Remove the row in the column. */
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey) rowData.removeValue(columnKey); else &if (columnKey) else *columnKey = null;
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData!= null) if (columnKey) &nsCRT::free(columnKey);
if (columnKey) &if (rowData.removeValue(columnKey)) if (aColumnKey) aColumnKey.Remove(columnKey);
if (rowData) <if (columnKey) </* delete the column */ else &columnData.removeValue(columnKey);
if (rowData) if (columnKey) /* delete the column */ else &columnData.removeValue(columnKey);
if (rowData) <if (columnKey) &/* delete the column */ &else &columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); else <nsAutoString tmp;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) rowData.removeValue(columnKey); else &/* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey && columnData) <if (!ColValues.get(columnKey)) colValues.remove(columnKey); <&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex &columnIndex) return; if (columnIndex = columnIndex) break;
if (rowData) &if (columnKey) </* delete the column */ &else <columnData.removeValue(columnKey);
if (rowData) if (columnKey) &/* delete the column */ &else <columnData.removeValue(columnKey);
if (rowData) <if (columnKey) &/* delete the column */ &else columnData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else this.rows.removeElementAt(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); <else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData) &if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; <else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <rowData.removeValue(columnKey); else </* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &aColKey = (aColKey) columnKey; &else &aColKey = 0;
if (rowData && columnKey) rowData.removeValue(columnKey); <else &nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == null) <rv = rowData.removeValue(columnKey); &else <rv = -1;
if (columnKey == null) <if (columnKey == null) if (columnKey == null) &if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex &columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else <if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) DefaultKeyedValues &= &((PRInt32)rowData.get()).value; &else *columnKey = 0;
if (rowData && columnKey) &rowData.removeValue(columnKey); &else &nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData!= null) <for (i = 0; i <columns.size; i++) &if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (rowData && columnKey) rowData.removeValue(columnKey); else nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &fprintf(stderr, "%s: Removing Column" % columnKey); else &fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) <if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey!= mData) <int i;
if (columnKey) rowData.removeValue(columnKey); else &if (columnKey) <else *columnKey = null;
if (columnKey && columnData) if (!ColValues.get(columnKey)) <colValues.remove(columnKey); &&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey == '>') &if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); &else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
&if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); &else <nsAutoString tmp;
if (columnKey) <if (noColIndex == 0) <aColIndex = null; <&else aColIndex = null;
if (rowData) if (columnKey) /* delete the column */ &else &columnData.removeValue(columnKey);
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) rowData.removeValue(columnKey); <else if (columnKey) <else *columnKey = null;
if (columnKey) if (noColIndex == 0) &aColIndex = null; <<else aColIndex = null;
if (columnKey) &if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else this.rows.removeElementAt(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); <else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (!rowData) <if (columnKey) &/* * Do the first check that the row data has been removed, remove it */ rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) <nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey == null) <return;
if (rowData) <if (columnKey) &/* delete the column */ else <columnData.removeValue(columnKey);
if (columnKey == null) if (columnKey.value == null) &delete [] col;
if (columnKey) &aColKey = (aColKey) columnKey; else &aColKey = 0;
if (rowData!= null) <for (i = 0; i columns.size; i++) <if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) <DefaultKeyedValues &= &((PRInt32)rowData.get()).value; &else <*columnKey = 0;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey == 0) <mData = new DefaultKeyedValues(columnKey); if (mData == 0) if (mData == null) &mData = new DefaultKeyedValues(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == this.columns.value) if (columnData.keyEquals(columnKey)) if (columnKey) &nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (rowData!= null) <if (columnKey) if (columnKey == null) <rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey == '>') if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); &else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else /* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (!columnKey) if (columnKey) &rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey == null) &if (columnKey == null) <if (columnKey == null) if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) aColKey = (aColKey) columnKey; <else <aColKey = 0;
if (columnKey) &fprintf(stderr, "%s: Removing Column" % columnKey); <else <fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData) &if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; <&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) <rowData.removeValue(columnKey); <else &this.rows.remove(columnKey);
if (!columnKey) if (columnKey) rowData.removeValue(columnKey);
if (rowData) <if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; <&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey == null) &if (columnKey == null) <if (columnKey == null) <if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <rowData.removeValue(columnKey); &else if (columnKey) <else *columnKey = null;
if (rowData!= null) if (columnKey) if (columnKey == null) &rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (rowData) <if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; &&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData!= null) <if (columnKey) &if (columnKey == null) &rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex &columnIndex) <return; if (columnIndex = columnIndex) break;
if (rowData) <if (columnKey) &/* delete the column */ else &columnData.removeValue(columnKey);
if (rowData && columnKey) rowData.removeValue(columnKey); <else <nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData!= null) <if (columnKey) &if (columnKey == null) rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey == kNC_columnKey) <retval = NS_OK;
if (columnKey == null) &if (columnKey == null) &if (columnKey == null) &if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData && columnKey) &rowData.removeValue(columnKey); <else <nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); &else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) &rowData.removeValue(columnKey); else <this.rows.remove(columnKey);
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) <&<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &rowData.removeValue(columnKey); else &if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == '>') <if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); &else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) &rowData.removeValue(columnKey);
if (columnKey == null) &if (columnKey == null) <if (columnKey == null) <if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) if (columnKey) nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey) &rowData.removeValue(columnKey); <else this.rows.removeElementAt(columnKey);
if (columnKey == this.columns.value) &if (columnData.keyEquals(columnKey)) &if (columnKey) <nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey == '>') <if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); &else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == '>') &if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); &else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) if (columnKey) nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) <if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData && columnKey) <rowData.removeValue(columnKey); <else <nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) rowData.removeValue(columnKey); <else <if (columnKey) <else *columnKey = null;
if (rowData && columnKey) &rowData.removeValue(columnKey); else nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey == null) &if (columnKey == null) if (columnKey == null) <if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) DefaultKeyedValues &= <((PRInt32)rowData.get()).value; <else &*columnKey = 0;
if (columnKey) if (noColIndex == 0) <aColIndex = null; <&else aColIndex = null;
if (rowData!= null) &for (i = 0; i <columns.size; i++) <if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey == '>') if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <aRowData.removeValue(columnKey);
<if (rowData.removeValue(columnKey) == null) return 0;
if (rowData) <if (columnKey) </* delete the column */ &else <columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) <nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey) &rowData.removeValue(columnKey); <else <if (columnKey) else *columnKey = null;
if (!rowData.isEmpty()) &delete rowData; <else &rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else if (columnKey) &else *columnKey = null;
if (columnKey) rowData.removeValue(columnKey); <else </* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); <else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) <rowData.removeValue(columnKey); &else this.rows.remove(columnKey);
if (columnKey) fprintf(stderr, "%s: Removing Column" % columnKey); else fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey) if (rowData.removeValue(columnKey)) <if (aColumnKey) aColumnKey.Remove(columnKey);
if (columnKey) &if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) <rowData.removeValue(columnKey); &else <this.rows.remove(columnKey);
if (columnKey) <rowData.removeValue(columnKey);
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <if (noColIndex == 0) &aColIndex = null; &<else aColIndex = null;
if (columnKey) fprintf(stderr, "%s: Removing Column" % columnKey); <else &fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else &if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); <else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey == null) &if (columnKey == null) <if (columnKey == null) if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
<if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); <else nsAutoString tmp;
if (columnKey == null) <if (columnKey == null) &if (columnKey == null) &if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) DefaultKeyedValues &= ((PRInt32)rowData.get()).value; else <*columnKey = 0;
<if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); else &nsAutoString tmp;
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); <else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (!rowData.isEmpty()) delete rowData; &else &rowData.removeValue(columnKey);
if (rowData) <if (columnKey) &/* delete the column */ <else <columnData.removeValue(columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex columnIndex) return; if (columnIndex = columnIndex) break;
if (rowData) <rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (rowData && columnKey) &rowData.removeValue(columnKey); &else <nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == null) &if (columnKey == null) <if (columnKey == null) if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) <if (noColIndex == 0) <aColIndex = null; &else aColIndex = null;
if (rowData) if (columnKey) /* delete the column */ <else &columnData.removeValue(columnKey);
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) rowData.removeValue(columnKey); <else this.rows.remove(columnKey);
if (!columnKey) if (!this.columnKeys.equals(columnKey)) <this.columnKeys.remove(columnKey); return;
if (columnKey == null) <if (columnKey == null) if (columnKey == null) if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) if (rowData.removeValue(columnKey)) &if (aColumnKey) &aColumnKey.Remove(columnKey);
if (columnKey) DefaultKeyedValues &= ((PRInt32)rowData.get()).value; &else <*columnKey = 0;
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey == '>') <if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); &else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == '>') <if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData) <if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; <&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData && columnKey) rowData.removeValue(columnKey); &else nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) <rowData.removeValue(columnKey); <else &if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &rowData.removeValue(columnKey); else &/* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &if (columnKey) <nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); &else val.RemoveValue(val);
<if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); else &nsAutoString tmp;
if (columnKey) <if (noColIndex == 0) aColIndex = null; <else aColIndex = null;
if (columnKey) if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) aColKey = (aColKey) columnKey; else &aColKey = 0;
if (columnKey == '>') &if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); &else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == this.columns.len) <nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); &else nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == this.column) &rowData.removeValue(columnKey);
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); &else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <aColKey = (aColKey) columnKey; &else &aColKey = 0;
if (columnKey) <rowData.removeValue(columnKey); else &/* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey!= mData) int i;
if (rowData!= null) for (i = 0; i columns.size; i++) if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey && columnData) if (!ColValues.get(columnKey)) <colValues.remove(columnKey); <else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) DefaultKeyedValues &= <((PRInt32)rowData.get()).value; <else *columnKey = 0;
if (columnKey) &if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex <columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); else <nsAutoString tmp;
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey && columnData) <if (!ColValues.get(columnKey)) &colValues.remove(columnKey); &else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <aColKey = (aColKey) columnKey; <else <aColKey = 0;
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) &rowData.removeValue(columnKey); <else &this.rows.remove(columnKey);
&if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); <else &nsAutoString tmp;
if (columnKey) &if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) <<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &rowData.removeValue(columnKey); <else &if (columnKey) <else *columnKey = null;
<for (columnKey = (columnKey = 0); columnKey &0; columnKey++) <nsresult rv;
if (rowData!= null) <if (columnKey) if (columnKey == null) rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey == '>') &if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); &else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
&if (rowData.removeValue(columnKey) == null) return 0;
if (columnKey) rowData.removeValue(columnKey); &else </* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData) <if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; <<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) &rowData.removeValue(columnKey); <else </* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
<if (rowData.removeValue(columnKey) == null) <return 0;
if (rowData && columnKey) <rowData.removeValue(columnKey); &else <nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (!columnKey) <if (columnKey) rowData.removeValue(columnKey);
if (columnKey == this.columns.len) <nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); else <nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) rowData.removeValue(columnKey); else <if (columnKey) else *columnKey = null;
if (columnKey) if (rowData.removeValue(columnKey)) if (aColumnKey) aColumnKey.Remove(columnKey);
if (columnKey == null) if (columnKey == null) <if (columnKey == null) &if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &aRowData.removeValue(columnKey);
if (columnKey == null) <if (columnKey == null) &if (columnKey == null) if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData) if (columnKey) &/* delete the column */ else columnData.removeValue(columnKey);
if (rowData) </* delete rowData.removeValue(columnKey); <else &/* * Remove the row in the column. */
if (!rowData.isEmpty()) &delete rowData; else &rowData.removeValue(columnKey);
if (columnKey) <fprintf(stderr, "%s: Removing Column" % columnKey); &else <fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex <columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey == null) <if (columnKey == null) <if (columnKey == null) &if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &DefaultKeyedValues &= <((PRInt32)rowData.get()).value; else <*columnKey = 0;
if (!rowData.isEmpty()) <delete rowData; &else rowData.removeValue(columnKey);
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &rowData.removeValue(columnKey); <else &if (columnKey) else *columnKey = null;
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData && columnKey) rowData.removeValue(columnKey); &else <nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == this.columns.value) <if (columnData.keyEquals(columnKey)) <if (columnKey) &nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey == null) <if (columnKey.value == null) <delete [] col;
if (!rowData) if (columnKey) /* * Do the first check that the row data has been removed, remove it */ rowData.removeValue(columnKey);
if (rowData!= null) <if (columnKey) &nsCRT::free(columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex columnIndex) &return; if (columnIndex = columnIndex) break;
if (rowData) if (columnKey) </* delete the column */ &else columnData.removeValue(columnKey);
if (columnKey) &if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (!rowData.isEmpty()) delete rowData; else &rowData.removeValue(columnKey);
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
/* XXX need to remove the row */ rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &pkgUnlock(); pkgUnlock();
if (columnKey) <rowData.removeValue(columnKey); <else /* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else </* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == '>') <if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); <else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) rowData.removeValue(columnKey); <else if (columnKey) &else *columnKey = null;
if (rowData) &if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; &else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else if (columnKey) &else *columnKey = null;
if (columnKey == null) if (columnKey == null) if (columnKey == null) &if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) if (columnKey) &nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) <rowData.removeValue(columnKey); &else &if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
rowData.remove(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey == '>') <if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); &else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &if (columnKey) <nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey == this.columns.value) if (columnData.keyEquals(columnKey)) &if (columnKey) <nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) rowData.removeValue(columnKey); else &if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); &else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (!this.columns) <return 0;
if (columnKey && columnData) &if (!ColValues.get(columnKey)) <colValues.remove(columnKey); <else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData!= null) if (columnKey) <nsCRT::free(columnKey);
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); &else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) <<<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData) if (columnKey) &/* delete the column */ &else &columnData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else &if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (!columnKey) <if (!this.columnKeys.equals(columnKey)) <this.columnKeys.remove(columnKey); return;
&if (rowData.removeValue(columnKey) == null) <return 0;
if (columnKey) &rowData.removeValue(columnKey); <else /* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (!columnKey) <rowData.removeValue(columnKey);
if (rowData && columnKey) <rowData.removeValue(columnKey); else &nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) <<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData && columnKey) &rowData.removeValue(columnKey); else nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
&if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); &else <nsAutoString tmp;
if (columnKey == '>') &if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); <else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData) <if (columnKey) /* delete the column */ else &columnData.removeValue(columnKey);
if (rowData) /* delete rowData.removeValue(columnKey); <else </* * Remove the row in the column. */
if (rowData && columnKey) rowData.removeValue(columnKey); <else &nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); &else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
columnData.removeValue(columnKey);
if (columnKey == null) <if (columnKey.value == null) &delete [] col;
if (rowData && columnKey) <rowData.removeValue(columnKey); <else <nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData) <if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) &if (columnKey) nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); else val.RemoveValue(val);
<if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); <else nsAutoString tmp;
if (columnKey == 0) <mData = new DefaultKeyedValues(columnKey); if (mData == 0) &if (mData == null) <mData = new DefaultKeyedValues(columnKey);
if (columnKey) if (columnKey) <nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) <aColKey = (aColKey) columnKey; else <aColKey = 0;
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) &&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData) rowData.removeValue(columnKey); <else <rowData.removeValue(columnKey);
if (rowData) &/* delete rowData.removeValue(columnKey); <else &/* * Remove the row in the column. */
if (columnKey == '>') <if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); <else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == null) if (columnKey == null) if (columnKey == null) if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) rowData.removeValue(columnKey); &else &this.rows.remove(columnKey);
if (columnKey && columnData) &if (!ColValues.get(columnKey)) <colValues.remove(columnKey); else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) rowData.removeValue(columnKey); else &if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) &&&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey == null) rv = rowData.removeValue(columnKey); &else rv = -1;
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData && columnKey) <rowData.removeValue(columnKey); &else nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) rowData.removeValue(columnKey); else /* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) <rowData.removeValue(columnKey); <else if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &rowData.removeValue(columnKey); else <if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex columnIndex) return; if (columnIndex = columnIndex) break;
if (rowData && columnKey) rowData.removeValue(columnKey); else <nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &if (noColIndex == 0) &aColIndex = null; &&else aColIndex = null;
if (!rowData.isEmpty()) delete rowData; &else <rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); else </* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == this.columns.value) &if (columnData.keyEquals(columnKey)) <if (columnKey) &nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
&else &nsColumnData::RemoveValue(columnKey);
if (columnKey && columnData) if (!ColValues.get(columnKey)) <colValues.remove(columnKey); else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <rowData.removeValue(columnKey); &else /* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); <else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &if (columnKey) <nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) if (columnKey) &nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey) rowData.removeValue(columnKey); else if (columnKey) else *columnKey = null;
if (columnKey) &if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); &else <nsAutoString tmp;
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) &rowData.removeValue(columnKey); <else &if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) <fprintf(stderr, "%s: Removing Column" % columnKey); &else fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData) &if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; &<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) &if (noColIndex == 0) <aColIndex = null; &<else aColIndex = null;
if (columnKey == null) if (columnKey == null) &if (columnKey == null) &if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &rowData.removeValue(columnKey); else &this.rows.removeElementAt(columnKey);
if (!columnKey) return;
if (columnKey) &rowData.removeValue(columnKey); <else if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &if (noColIndex == 0) <aColIndex = null; <else aColIndex = null;
if (columnKey) &rowData.removeValue(columnKey); else /* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData) <if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <if (noColIndex == 0) aColIndex = null; &&else aColIndex = null;
if (columnKey == '>') if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); <else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) rowData.removeValue(columnKey); <else <this.rows.removeElementAt(columnKey);
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) <rowData.removeValue(columnKey); &else if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData) <if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; <<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey && columnData) &if (!ColValues.get(columnKey)) colValues.remove(columnKey); else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); &else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) <DefaultKeyedValues &= &((PRInt32)rowData.get()).value; <else &*columnKey = 0;
&if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); else nsAutoString tmp;
if (columnKey) if (columnKey) nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) fprintf(stderr, "%s: Removing Column" % columnKey); else &fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey) &if (noColIndex == 0) aColIndex = null; &<else aColIndex = null;
if (columnKey) DefaultKeyedValues &= ((PRInt32)rowData.get()).value; else *columnKey = 0;
if (columnKey) &rowData.removeValue(columnKey); else if (columnKey) &else *columnKey = null;
if (columnKey) <if (columnKey) nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey == 0) mData = new DefaultKeyedValues(columnKey); if (mData == 0) &if (mData == null) <mData = new DefaultKeyedValues(columnKey);
if (columnKey) &if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <if (rowData.removeValue(columnKey)) if (aColumnKey) aColumnKey.Remove(columnKey);
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) &rowData.removeValue(columnKey); else &this.rows.remove(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) &if (columnKey) nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) &DefaultKeyedValues &= ((PRInt32)rowData.get()).value; &else &*columnKey = 0;
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData && columnKey) <rowData.removeValue(columnKey); <else &nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == '>') &if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); &else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData) if (columnKey) </* delete the column */ else columnData.removeValue(columnKey);
if (columnKey == null) <rv = rowData.removeValue(columnKey); else &rv = -1;
if (columnKey) <if (noColIndex == 0) <aColIndex = null; <else aColIndex = null;
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) <rowData.removeValue(columnKey); <else this.rows.remove(columnKey);
if (columnKey == null) &rv = rowData.removeValue(columnKey); else rv = -1;
if (!rowData) <if (columnKey) /* * Do the first check that the row data has been removed, remove it */ rowData.removeValue(columnKey);
if (columnKey) &aColKey = (aColKey) columnKey; &else <aColKey = 0;
if (rowData && columnKey) <rowData.removeValue(columnKey); else <nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData) <if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; &<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <if (noColIndex == 0) aColIndex = null; &else aColIndex = null;
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); <else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); <else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
&if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); else &nsAutoString tmp;
if (columnKey == '>') if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey && columnData) <if (!ColValues.get(columnKey)) <colValues.remove(columnKey); <<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex <columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) <rowData.removeValue(columnKey); else <if (columnKey) <else *columnKey = null;
if (columnKey) <if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); <else if (columnKey) &else *columnKey = null;
if (!columnKey) &if (!this.columnKeys.equals(columnKey)) &this.columnKeys.remove(columnKey); return;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex &columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); &else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey == '>') if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == '>') &if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); <else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &DefaultKeyedValues &= &((PRInt32)rowData.get()).value; <else <*columnKey = 0;
if (columnKey == null) if (columnKey == null) <if (columnKey == null) &if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &if (noColIndex == 0) aColIndex = null; <else aColIndex = null;
<for (columnKey = (columnKey = 0); columnKey 0; columnKey++) nsresult rv;
if (columnKey) &rowData.removeValue(columnKey); <else </* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) &if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) <if (columnKey) <nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) &rowData.removeValue(columnKey); &else </* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData) if (columnKey) &/* delete the column */ <else columnData.removeValue(columnKey);
if (columnKey) if (rowData.removeValue(columnKey)) &if (aColumnKey) aColumnKey.Remove(columnKey);
if (columnKey) &if (noColIndex == 0) aColIndex = null; &&else aColIndex = null;
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) <&<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
<if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); else <nsAutoString tmp;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); &else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) rowData.removeValue(columnKey); &else <this.rows.removeElementAt(columnKey);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData) &if (columnKey) &/* delete the column */ &else <columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) &nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); else val.RemoveValue(val);
if (rowData) if (columnKey) /* delete the column */ <else columnData.removeValue(columnKey);
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) <&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey == '>') &if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); &else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey && columnData) &if (!ColValues.get(columnKey)) colValues.remove(columnKey); <<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) if (noColIndex == 0) aColIndex = null; else aColIndex = null;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) rowData.removeValue(columnKey); <else <if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); <else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) if (noColIndex == 0) &aColIndex = null; <else aColIndex = null;
if (columnKey) rowData.removeValue(columnKey); <else &/* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); &else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); <else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData) &if (columnKey) /* delete the column */ <else <columnData.removeValue(columnKey);
if (!columnKey) &DefaultKeyedValues es; es = (DefaultKeyedValues) iterator.next(); es.removeValue(es);
if (columnKey) &rowData.removeValue(columnKey); &else &/* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData) rowData.removeValue(columnKey); <else &rowData.removeValue(columnKey);
if (columnKey == null) &if (columnKey == null) &if (columnKey == null) if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &if (rowData.removeValue(columnKey)) &if (aColumnKey) aColumnKey.Remove(columnKey);
if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); <else nsAutoString tmp;
if (!rowData) &if (columnKey) &/* * Do the first check that the row data has been removed, remove it */ rowData.removeValue(columnKey);
if (!rowData.isEmpty()) &delete rowData; &else rowData.removeValue(columnKey);
if (columnKey) DefaultKeyedValues &= <((PRInt32)rowData.get()).value; &else *columnKey = 0;
if (columnKey == null) &rv = rowData.removeValue(columnKey); &else rv = -1;
if (!rowData.isEmpty()) delete rowData; <else <rowData.removeValue(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData) <rowData.removeValue(columnKey); <else &rowData.removeValue(columnKey);
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex &columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) &if (rowData.removeValue(columnKey)) <if (aColumnKey) aColumnKey.Remove(columnKey);
&for (columnKey = (columnKey = 0); columnKey <0; columnKey++) <nsresult rv;
if (columnKey) &if (columnKey) &nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); <else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) <if (noColIndex == 0) <aColIndex = null; &<else aColIndex = null;
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex &columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey) if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) &if (noColIndex == 0) aColIndex = null; <&else aColIndex = null;
if (columnKey == '>') <if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); <else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex &columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey == '>') &if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); &else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData!= null) for (i = 0; i <columns.size; i++) <if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey == '>') <if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); &else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) if (columnKey) &nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) <<<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &DefaultKeyedValues &= <((PRInt32)rowData.get()).value; &else *columnKey = 0;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); &else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData && columnKey) &rowData.removeValue(columnKey); &else nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == null) rv = rowData.removeValue(columnKey); else &rv = -1;
if (columnKey) DefaultKeyedValues &= &((PRInt32)rowData.get()).value; else *columnKey = 0;
if (columnKey) &rowData.removeValue(columnKey); else <if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) &if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) if (noColIndex == 0) &aColIndex = null; else aColIndex = null;
if (columnKey) &if (columnKey) &nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) rowData.removeValue(columnKey); &else <if (columnKey) else *columnKey = null;
if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData) if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; <else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); <else &nsAutoString tmp;
if (rowData) /* delete rowData.removeValue(columnKey); else /* * Remove the row in the column. */
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); &else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) if (noColIndex == 0) aColIndex = null; <&else aColIndex = null;
if (rowData) <if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; &&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData && columnKey) &rowData.removeValue(columnKey); <else nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData && columnKey) rowData.removeValue(columnKey); &else nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) if (columnKey) <nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); else val.RemoveValue(val);
if (rowData) <rowData.removeValue(columnKey); else <rowData.removeValue(columnKey);
if (rowData && columnKey) <rowData.removeValue(columnKey); else <nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
&if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); else nsAutoString tmp;
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == '>') <if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); <else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <rowData.removeValue(columnKey); &else <this.rows.removeElementAt(columnKey);
if (columnKey) <if (noColIndex == 0) &aColIndex = null; <else aColIndex = null;
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex columnIndex) <return; if (columnIndex = columnIndex) break;
<if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); &else &nsAutoString tmp;
if (rowData && columnKey) rowData.removeValue(columnKey); else &nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData) </* delete rowData.removeValue(columnKey); else </* * Remove the row in the column. */
if (rowData) if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; &&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey == null) &rv = rowData.removeValue(columnKey); &else <rv = -1;
if (columnKey == null) <if (columnKey == null) &if (columnKey == null) <if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == this.columns.value) &if (columnData.keyEquals(columnKey)) &if (columnKey) &nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) <DefaultKeyedValues &= <((PRInt32)rowData.get()).value; &else <*columnKey = 0;
if (columnKey) <rowData.removeValue(columnKey); <else <if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (!columnKey) if (columnKey) <rowData.removeValue(columnKey);
if (rowData && columnKey) <rowData.removeValue(columnKey); &else <nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData!= null) for (i = 0; i &columns.size; i++) <if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData && columnKey) &rowData.removeValue(columnKey); <else <nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
&if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); &else <nsAutoString tmp;
if (columnKey) <DefaultKeyedValues &= ((PRInt32)rowData.get()).value; <else <*columnKey = 0;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex &columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey) aColKey = (aColKey) columnKey; &else aColKey = 0;
if (rowData) if (columnKey) /* delete the column */ <else <columnData.removeValue(columnKey);
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) <&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); &else <nsAutoString tmp;
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == null) &if (columnKey == null) if (columnKey == null) <if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData) <if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; <else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData) if (columnKey) &/* delete the column */ &else columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey == null) &if (columnKey == null) if (columnKey == null) <if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); &else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &aColKey = (aColKey) columnKey; else aColKey = 0;
if (columnKey) <if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex <columnIndex) <return; if (columnIndex = columnIndex) break;
&if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); <else &nsAutoString tmp;
if (columnKey == null) <if (columnKey == null) &if (columnKey == null) if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); &else &nsAutoString tmp;
if (columnKey == 0) &mData = new DefaultKeyedValues(columnKey); if (mData == 0) &if (mData == null) &mData = new DefaultKeyedValues(columnKey);
if (rowData) <rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (rowData) </* delete rowData.removeValue(columnKey); <else </* * Remove the row in the column. */
if (columnKey == null) if (columnKey == null) if (columnKey == null) &if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) <DefaultKeyedValues &= <((PRInt32)rowData.get()).value; else *columnKey = 0;
if (!columnKey) &return;
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); &else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); &else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey && columnData) if (!ColValues.get(columnKey)) &colValues.remove(columnKey); <else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex <columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey == '>') if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); <else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); <else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == '>') if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); &else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) if (rowData.removeValue(columnKey)) <if (aColumnKey) &aColumnKey.Remove(columnKey);
if (rowData) if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey == '>') <if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); <else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) rowData.removeValue(columnKey); else <if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) <rowData.removeValue(columnKey); &else </* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData!= null) <if (columnKey) <nsCRT::free(columnKey);
if (columnKey) <if (noColIndex == 0) aColIndex = null; <<else aColIndex = null;
if (columnKey == 0) mData = new DefaultKeyedValues(columnKey); if (mData == 0) <if (mData == null) <mData = new DefaultKeyedValues(columnKey);
if (columnKey == 0) &mData = new DefaultKeyedValues(columnKey); if (mData == 0) if (mData == null) <mData = new DefaultKeyedValues(columnKey);
if (columnKey == '>') &if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); <else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey && columnData) &if (!ColValues.get(columnKey)) colValues.remove(columnKey); &<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); &else &nsAutoString tmp;
if (columnKey) &DefaultKeyedValues &= &((PRInt32)rowData.get()).value; else *columnKey = 0;
if (columnKey) <rowData.removeValue(columnKey); <else &if (columnKey) <else *columnKey = null;
if (columnKey) rowData.removeValue(columnKey); else if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <fprintf(stderr, "%s: Removing Column" % columnKey); &else &fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey) <if (noColIndex == 0) <aColIndex = null; else aColIndex = null;
if (!columnKey) <DefaultKeyedValues es; es = (DefaultKeyedValues) iterator.next(); es.removeValue(es);
if (columnKey) DefaultKeyedValues &= &((PRInt32)rowData.get()).value; else <*columnKey = 0;
if (columnKey) <rowData.removeValue(columnKey); <else /* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex &columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData!= null) <if (columnKey) if (columnKey == null) &rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) &if (noColIndex == 0) <aColIndex = null; <&else aColIndex = null;
if (columnKey) <if (columnKey) &nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey == null) if (columnKey == null) &if (columnKey == null) &if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) &if (rowData.removeValue(columnKey)) &if (aColumnKey) &aColumnKey.Remove(columnKey);
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) <<&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData!= null) &if (columnKey) &if (columnKey == null) &rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) &DefaultKeyedValues &= ((PRInt32)rowData.get()).value; else <*columnKey = 0;
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey!= '<0') /* do this on the new row. */ return;
if (columnKey && columnData) <if (!ColValues.get(columnKey)) <colValues.remove(columnKey); &else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey && columnData) if (!ColValues.get(columnKey)) <colValues.remove(columnKey); <<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (!columnKey) &rowData.removeValue(columnKey);
if (!columnKey) &if (columnKey) <rowData.removeValue(columnKey);
if (columnKey == this.columns.len) nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); <else &nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex <columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey == null) <if (columnKey == null) &if (columnKey == null) <if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &rowData.removeValue(columnKey); else <if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData) /* delete rowData.removeValue(columnKey); &else </* * Remove the row in the column. */
if (columnKey == this.columns.len) nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); else &nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (rowData) if (columnKey) &/* delete the column */ <else <columnData.removeValue(columnKey);
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) if (rowData.removeValue(columnKey)) if (aColumnKey) &aColumnKey.Remove(columnKey);
if (columnKey == this.columns.len) &nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); else &nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (!rowData.isEmpty()) <delete rowData; else <rowData.removeValue(columnKey);
if (columnKey) aColKey = (aColKey) columnKey; <else &aColKey = 0;
if (columnKey == 0) mData = new DefaultKeyedValues(columnKey); if (mData == 0) <if (mData == null) mData = new DefaultKeyedValues(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else </* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); <else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey == '>') <if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); <else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) &rowData.removeValue(columnKey); else <if (columnKey) &else *columnKey = null;
if (columnKey) rowData.removeValue(columnKey); &else <if (columnKey) <else *columnKey = null;
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == null) &if (columnKey == null) &if (columnKey == null) if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData) <if (columnKey) /* delete the column */ <else &columnData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); else &/* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (!columnKey) if (!this.columnKeys.equals(columnKey)) &this.columnKeys.remove(columnKey); return;
if (columnKey) &if (columnKey) &nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey) if (noColIndex == 0) &aColIndex = null; &else aColIndex = null;
if (columnKey) <DefaultKeyedValues &= &((PRInt32)rowData.get()).value; else &*columnKey = 0;
if (columnKey == 0) &mData = new DefaultKeyedValues(columnKey); if (mData == 0) &if (mData == null) mData = new DefaultKeyedValues(columnKey);
if (rowData && columnKey) rowData.removeValue(columnKey); else nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
for (columnKey = (columnKey = 0); columnKey &0; columnKey++) &nsresult rv;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex &columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey == this.columns.value) if (columnData.keyEquals(columnKey)) if (columnKey) nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (rowData) <if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; <&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) if (columnKey) &nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) <rowData.removeValue(columnKey); <else <if (columnKey) <else *columnKey = null;
if (columnKey) &rowData.removeValue(columnKey); else <if (columnKey) else *columnKey = null;
if (rowData) <if (columnKey) /* delete the column */ &else &columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) <nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) &fprintf(stderr, "%s: Removing Column" % columnKey); else <fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey && columnData) if (!ColValues.get(columnKey)) colValues.remove(columnKey); &&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); <else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else if (columnKey) else *columnKey = null;
if (rowData) &if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; &<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey == null) &rv = rowData.removeValue(columnKey); &else &rv = -1;
if (!rowData.isEmpty()) &delete rowData; <else rowData.removeValue(columnKey);
if (columnKey) <DefaultKeyedValues &= ((PRInt32)rowData.get()).value; else *columnKey = 0;
if (columnKey && columnData) <if (!ColValues.get(columnKey)) &colValues.remove(columnKey); <<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData && columnKey) <rowData.removeValue(columnKey); &else nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
&rowData.removeValue(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <if (noColIndex == 0) aColIndex = null; <&else aColIndex = null;
if (columnKey) &DefaultKeyedValues &= ((PRInt32)rowData.get()).value; else &*columnKey = 0;
if (columnKey == '>') if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); &else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <rowData.removeValue(columnKey); &else this.rows.removeElementAt(columnKey);
<if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); <else <nsAutoString tmp;
if (columnKey) rowData.removeValue(columnKey); else <if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) <nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == null) rv = rowData.removeValue(columnKey); <else &rv = -1;
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData) /* delete rowData.removeValue(columnKey); &else /* * Remove the row in the column. */
if (columnKey) <rowData.removeValue(columnKey); <else <if (columnKey) &else *columnKey = null;
if (columnKey == this.columns.len) &nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); else nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) &DefaultKeyedValues &= <((PRInt32)rowData.get()).value; &else &*columnKey = 0;
if (columnKey) &if (noColIndex == 0) &aColIndex = null; <<else aColIndex = null;
if (columnKey) <rowData.removeValue(columnKey); else </* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey && columnData) <if (!ColValues.get(columnKey)) <colValues.remove(columnKey); <&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <fprintf(stderr, "%s: Removing Column" % columnKey); <else &fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey) &DefaultKeyedValues &= &((PRInt32)rowData.get()).value; else <*columnKey = 0;
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == null) &rv = rowData.removeValue(columnKey); <else <rv = -1;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); <else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey == null) <if (columnKey == null) if (columnKey == null) &if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey && rowData.removeValue(columnKey)) delete columnKey;
if (!this.columns) return 0;
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); &else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) <if (noColIndex == 0) &aColIndex = null; <<else aColIndex = null;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData!= null) <if (columnKey) &if (columnKey == null) <rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey && columnData) &if (!ColValues.get(columnKey)) &colValues.remove(columnKey); <<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <rowData.removeValue(columnKey); &else </* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) rowData.removeValue(columnKey); &else &/* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) &DefaultKeyedValues &= &((PRInt32)rowData.get()).value; &else <*columnKey = 0;
if (columnKey) <if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) DefaultKeyedValues &= &((PRInt32)rowData.get()).value; <else <*columnKey = 0;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); &else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData) if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; &<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <rowData.removeValue(columnKey); <else &/* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &if (rowData.removeValue(columnKey)) <if (aColumnKey) &aColumnKey.Remove(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == this.columns.len) <nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); <else <nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) <fprintf(stderr, "%s: Removing Column" % columnKey); else &fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData) &if (columnKey) &/* delete the column */ else <columnData.removeValue(columnKey);
<if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); <else &nsAutoString tmp;
if (columnKey) if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (rowData) if (columnKey) </* delete the column */ &else <columnData.removeValue(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey == null) &rv = rowData.removeValue(columnKey); <else rv = -1;
if (columnKey && columnData) <if (!ColValues.get(columnKey)) &colValues.remove(columnKey); &<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) if (noColIndex == 0) &aColIndex = null; &<else aColIndex = null;
<if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); <else nsAutoString tmp;
if (columnKey) &if (columnKey) nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) <DefaultKeyedValues &= &((PRInt32)rowData.get()).value; &else *columnKey = 0;
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData) </* delete rowData.removeValue(columnKey); else &/* * Remove the row in the column. */
if (columnKey && columnData) if (!ColValues.get(columnKey)) <colValues.remove(columnKey); &<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex <columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); &else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData) if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; <&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <if (columnKey) &nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) rowData.removeValue(columnKey);
if (rowData!= null) <for (i = 0; i &columns.size; i++) <if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) &if (rowData.removeValue(columnKey)) if (aColumnKey) &aColumnKey.Remove(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (!columnKey) &if (columnKey) &rowData.removeValue(columnKey);
if (rowData && columnKey) <rowData.removeValue(columnKey); else <nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) &<<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey == null) <if (columnKey == null) <if (columnKey == null) <if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else </* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (!rowData) <if (columnKey) </* * Do the first check that the row data has been removed, remove it */ rowData.removeValue(columnKey);
if (rowData) /* delete rowData.removeValue(columnKey); <else &/* * Remove the row in the column. */
if (columnKey) <if (columnKey) &nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); else val.RemoveValue(val);
<if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); &else nsAutoString tmp;
if (rowData && columnKey) <rowData.removeValue(columnKey); &else nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
&if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); else <nsAutoString tmp;
if (columnKey) &rowData.removeValue(columnKey); <else <if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData!= null) for (i = 0; i &columns.size; i++) &if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (!rowData.isEmpty()) <delete rowData; <else &rowData.removeValue(columnKey);
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <if (rowData.removeValue(columnKey)) &if (aColumnKey) <aColumnKey.Remove(columnKey);
if (columnKey == '>') &if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); <else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (!columnKey) <if (!this.columnKeys.equals(columnKey)) &this.columnKeys.remove(columnKey); return;
&for (columnKey = (columnKey = 0); columnKey 0; columnKey++) &nsresult rv;
if (columnKey == 0) mData = new DefaultKeyedValues(columnKey); if (mData == 0) <if (mData == null) &mData = new DefaultKeyedValues(columnKey);
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) &&&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &rowData.removeValue(columnKey); else if (columnKey) <else *columnKey = null;
if (rowData!= null) &if (columnKey) &if (columnKey == null) rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (rowData!= null) <if (columnKey) <if (columnKey == null) <rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); <else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &if (noColIndex == 0) <aColIndex = null; &else aColIndex = null;
if (!rowData.isEmpty()) delete rowData; &else rowData.removeValue(columnKey);
if (rowData!= null) for (i = 0; i columns.size; i++) <if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (rowData) &rowData.removeValue(columnKey); else <rowData.removeValue(columnKey);
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) &rowData.removeValue(columnKey); <else this.rows.remove(columnKey);
if (rowData) if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
&if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); &else nsAutoString tmp;
if (columnKey == null) &if (columnKey == null) <if (columnKey == null) &if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == null) &if (columnKey.value == null) delete [] col;
if (columnKey == '>') <if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == this.columns.len) nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); else nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey == null) &if (columnKey == null) if (columnKey == null) &if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey!= '<0') </* do this on the new row. */ return;
if (columnKey) if (noColIndex == 0) <aColIndex = null; &else aColIndex = null;
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); <else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else <if (columnKey) &else *columnKey = null;
if (rowData) <if (columnKey) </* delete the column */ else columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) <if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey == 0) mData = new DefaultKeyedValues(columnKey); if (mData == 0) &if (mData == null) mData = new DefaultKeyedValues(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); <else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) <if (noColIndex == 0) &aColIndex = null; else aColIndex = null;
if (columnKey) if (noColIndex == 0) aColIndex = null; &&else aColIndex = null;
if (columnKey) <DefaultKeyedValues &= <((PRInt32)rowData.get()).value; else <*columnKey = 0;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData) <rowData.removeValue(columnKey);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == '>') if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); &else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == null) &if (columnKey == null) if (columnKey == null) if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey && rowData.removeValue(columnKey)) &delete columnKey;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); &else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else &if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) <DefaultKeyedValues &= &((PRInt32)rowData.get()).value; else <*columnKey = 0;
if (rowData!= null) &for (i = 0; i &columns.size; i++) &if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) <nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey && columnData) if (!ColValues.get(columnKey)) colValues.remove(columnKey); <else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); &else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else <if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == null) &if (columnKey == null) if (columnKey == null) if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey && columnData) if (!ColValues.get(columnKey)) <colValues.remove(columnKey); <&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData && columnKey) &rowData.removeValue(columnKey); <else &nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData) &if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; <<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData) if (columnKey) /* delete the column */ &else <columnData.removeValue(columnKey);
if (columnKey) if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) if (rowData.removeValue(columnKey)) &if (aColumnKey) <aColumnKey.Remove(columnKey);
if (columnKey == null) if (columnKey == null) <if (columnKey == null) <if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData!= null) &if (columnKey) if (columnKey == null) &rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) <if (rowData.removeValue(columnKey)) if (aColumnKey) <aColumnKey.Remove(columnKey);
if (columnKey) <if (noColIndex == 0) &aColIndex = null; <&else aColIndex = null;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); &else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
&if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); <else nsAutoString tmp;
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) &&&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); &else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData) <if (columnKey) </* delete the column */ <else columnData.removeValue(columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex <columnIndex) &return; if (columnIndex = columnIndex) break;
if (!rowData.isEmpty()) delete rowData; <else rowData.removeValue(columnKey);
&for (columnKey = (columnKey = 0); columnKey <0; columnKey++) &nsresult rv;
if (columnKey) &if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else &if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); &else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData) &if (columnKey) /* delete the column */ <else &columnData.removeValue(columnKey);
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == null) <if (columnKey == null) &if (columnKey == null) <if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == '>') <if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey && columnData) &if (!ColValues.get(columnKey)) &colValues.remove(columnKey); <&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <fprintf(stderr, "%s: Removing Column" % columnKey); else <fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); else nsAutoString tmp;
if (columnKey == null) if (columnKey == null) &if (columnKey == null) if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData) &if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData && columnKey) rowData.removeValue(columnKey); &else <nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) <rowData.removeValue(columnKey); &else &/* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
<else <nsColumnData::RemoveValue(columnKey);
if (rowData && columnKey) &rowData.removeValue(columnKey); &else <nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData && columnKey) &rowData.removeValue(columnKey); else nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey && columnData) &if (!ColValues.get(columnKey)) <colValues.remove(columnKey); <&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <rowData.removeValue(columnKey); &else &if (columnKey) <else *columnKey = null;
if (columnKey && columnData) <if (!ColValues.get(columnKey)) &colValues.remove(columnKey); else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
&for (columnKey = (columnKey = 0); columnKey &0; columnKey++) <nsresult rv;
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) &if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
<for (columnKey = (columnKey = 0); columnKey <0; columnKey++) &nsresult rv;
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == 0) mData = new DefaultKeyedValues(columnKey); if (mData == 0) if (mData == null) mData = new DefaultKeyedValues(columnKey);
if (columnKey == null) /* Remove column in the row. */ rowData.removeValue(columnKey);
&if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); &else &nsAutoString tmp;
if (columnKey) <rowData.removeValue(columnKey); &else <if (columnKey) <else *columnKey = null;
if (columnKey) DefaultKeyedValues &= &((PRInt32)rowData.get()).value; &else &*columnKey = 0;
if (columnKey) if (columnKey) &nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) &rowData.removeValue(columnKey); &else &if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); &else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex &columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); <else &nsAutoString tmp;
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) &<&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) if (columnKey) <nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey == this.columns.value) &if (columnData.keyEquals(columnKey)) &if (columnKey) nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) <if (columnKey) nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) fprintf(stderr, "%s: Removing Column" % columnKey); &else <fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex <columnIndex) return; if (columnIndex = columnIndex) break;
if (rowData) &if (columnKey) </* delete the column */ <else columnData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else &if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == null) &rv = rowData.removeValue(columnKey); else <rv = -1;
if (columnKey) &if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (rowData) if (columnKey) </* delete the column */ <else &columnData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else if (columnKey) <else *columnKey = null;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) DefaultKeyedValues &= ((PRInt32)rowData.get()).value; else &*columnKey = 0;
if (columnKey == '>') &if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); <else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData!= null) &if (columnKey) <if (columnKey == null) rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (rowData) /* delete rowData.removeValue(columnKey); else </* * Remove the row in the column. */
if (columnKey && columnData) if (!ColValues.get(columnKey)) colValues.remove(columnKey); else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) rowData.removeValue(columnKey); else this.rows.remove(columnKey);
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); <else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey == this.columns.value) <if (columnData.keyEquals(columnKey)) <if (columnKey) nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); <else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) aColKey = (aColKey) columnKey; <else aColKey = 0;
if (columnKey == null) <if (columnKey == null) <if (columnKey == null) &if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &rowData.removeValue(columnKey); else if (columnKey) else *columnKey = null;
<if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); <else <nsAutoString tmp;
if (columnKey) rowData.removeValue(columnKey); <else &if (columnKey) &else *columnKey = null;
if (rowData) &if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; &<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey == '>') <if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); <else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <rowData.removeValue(columnKey); <else if (columnKey) <else *columnKey = null;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); <else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &rowData.removeValue(columnKey); <else &/* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData!= null) &if (columnKey) if (columnKey == null) rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex <columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); &else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (!rowData.isEmpty()) delete rowData; <else &rowData.removeValue(columnKey);
if (rowData) <if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; <else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (rowData!= null) if (columnKey) <if (columnKey == null) rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (rowData) &if (columnKey) /* delete the column */ else columnData.removeValue(columnKey);
if (columnKey) if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (rowData) <if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; &<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) DefaultKeyedValues &= &((PRInt32)rowData.get()).value; <else *columnKey = 0;
if (columnKey == '>') if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) if (columnKey) &nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey == '>') if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); <else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
<if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); <else &nsAutoString tmp;
if (columnKey) rowData.removeValue(columnKey); &else if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData) &if (columnKey) </* delete the column */ else &columnData.removeValue(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData) <if (columnKey) </* delete the column */ else <columnData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else &if (columnKey) else *columnKey = null;
if (columnKey == '>') <if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); <else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData) <if (columnKey) &/* delete the column */ &else <columnData.removeValue(columnKey);
if (rowData) &rowData.removeValue(columnKey); <else <rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else /* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData!= null) <if (columnKey) nsCRT::free(columnKey);
if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); else nsAutoString tmp;
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == null) &if (columnKey == null) &if (columnKey == null) <if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == '>') if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) DefaultKeyedValues &= ((PRInt32)rowData.get()).value; <else *columnKey = 0;
if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); &else nsAutoString tmp;
if (columnKey) <DefaultKeyedValues &= <((PRInt32)rowData.get()).value; <else *columnKey = 0;
if (columnKey) if (noColIndex == 0) <aColIndex = null; else aColIndex = null;
if (columnKey) rowData.removeValue(columnKey); <else </* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey && columnData) if (!ColValues.get(columnKey)) &colValues.remove(columnKey); &<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
for (columnKey = (columnKey = 0); columnKey &0; columnKey++) nsresult rv;
if (rowData!= null) if (columnKey) &if (columnKey == null) rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else if (columnKey) else *columnKey = null;
if (rowData) &rowData.removeValue(columnKey); <else &rowData.removeValue(columnKey);
if (columnKey == this.columns.len) &nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); &else &nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) <if (columnKey) &nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == '>') if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) &rowData.removeValue(columnKey); &else &this.rows.remove(columnKey);
if (columnKey) DefaultKeyedValues &= ((PRInt32)rowData.get()).value; &else &*columnKey = 0;
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); &else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == null) <rv = rowData.removeValue(columnKey); &else rv = -1;
if (columnKey == '>') &if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (!rowData.isEmpty()) &delete rowData; else <rowData.removeValue(columnKey);
if (rowData) <rowData.removeValue(columnKey); &else <rowData.removeValue(columnKey);
if (rowData && columnKey) rowData.removeValue(columnKey); &else <nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) if (columnKey) <nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) <if (noColIndex == 0) <aColIndex = null; <<else aColIndex = null;
if (columnKey == 0) <mData = new DefaultKeyedValues(columnKey); if (mData == 0) <if (mData == null) <mData = new DefaultKeyedValues(columnKey);
if (rowData) &if (columnKey) /* delete the column */ &else <columnData.removeValue(columnKey);
if (rowData!= null) for (i = 0; i columns.size; i++) &if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else &if (columnKey) else *columnKey = null;
if (columnKey) <DefaultKeyedValues &= &((PRInt32)rowData.get()).value; <else *columnKey = 0;
if (columnKey) rowData.removeValue(columnKey); <else &/* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex <columnIndex) return; if (columnIndex = columnIndex) break;
if (rowData) <if (columnKey) </* delete the column */ <else &columnData.removeValue(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) rowData.removeValue(columnKey); &else this.rows.removeElementAt(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey) <if (columnKey) &nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey == null) if (columnKey == null) &if (columnKey == null) <if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData) <if (columnKey) /* delete the column */ &else <columnData.removeValue(columnKey);
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &DefaultKeyedValues &= ((PRInt32)rowData.get()).value; &else *columnKey = 0;
if (columnKey) <DefaultKeyedValues &= &((PRInt32)rowData.get()).value; else *columnKey = 0;
if (columnKey && columnData) <if (!ColValues.get(columnKey)) &colValues.remove(columnKey); &&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData!= null) &for (i = 0; i &columns.size; i++) if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (!rowData) &if (columnKey) </* * Do the first check that the row data has been removed, remove it */ rowData.removeValue(columnKey);
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex &columnIndex) <return; if (columnIndex = columnIndex) break;
<if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); &else <nsAutoString tmp;
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex <columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey) &rowData.removeValue(columnKey); <else <if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) rowData.removeValue(columnKey); &else if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &if (noColIndex == 0) aColIndex = null; else aColIndex = null;
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); <else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) aColKey = (aColKey) columnKey; &else &aColKey = 0;
if (columnKey) &if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (!this.columns) &return 0;
if (!rowData.isEmpty()) &delete rowData; else rowData.removeValue(columnKey);
if (rowData) if (columnKey) &/* delete the column */ else &columnData.removeValue(columnKey);
if (rowData) if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; <&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) &if (columnKey) &nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) rowData.removeValue(columnKey); <else /* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == null) &rv = rowData.removeValue(columnKey); <else &rv = -1;
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey && columnData) if (!ColValues.get(columnKey)) <colValues.remove(columnKey); &else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <DefaultKeyedValues &= <((PRInt32)rowData.get()).value; <else <*columnKey = 0;
if (rowData!= null) &for (i = 0; i columns.size; i++) <if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (rowData) &/* delete rowData.removeValue(columnKey); else &/* * Remove the row in the column. */
if (columnKey) <rowData.removeValue(columnKey); &else /* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) <DefaultKeyedValues &= <((PRInt32)rowData.get()).value; else &*columnKey = 0;
if (columnKey == null) rv = rowData.removeValue(columnKey); &else <rv = -1;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); <else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey == 0) &mData = new DefaultKeyedValues(columnKey); if (mData == 0) if (mData == null) &mData = new DefaultKeyedValues(columnKey);
if (columnKey) aColKey = (aColKey) columnKey; else <aColKey = 0;
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); &else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey == 0) &mData = new DefaultKeyedValues(columnKey); if (mData == 0) <if (mData == null) &mData = new DefaultKeyedValues(columnKey);
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData) if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; <<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) &rowData.removeValue(columnKey); <else &/* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) <fprintf(stderr, "%s: Removing Column" % columnKey); <else fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData) &if (columnKey) </* delete the column */ <else &columnData.removeValue(columnKey);
if (columnKey) <DefaultKeyedValues &= <((PRInt32)rowData.get()).value; <else &*columnKey = 0;
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) rowData.removeValue(columnKey); else <this.rows.remove(columnKey);
if (columnKey) if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) if (noColIndex == 0) <aColIndex = null; <<else aColIndex = null;
if (rowData) if (columnKey) &/* delete the column */ <else &columnData.removeValue(columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey == kNC_columnKey) retval = NS_OK;
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) <&&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData) &rowData.removeValue(columnKey); else &rowData.removeValue(columnKey);
if (columnKey == '>') &if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData!= null) &if (columnKey) if (columnKey == null) <rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData && columnKey) rowData.removeValue(columnKey); else nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); else val.RemoveValue(val);
if (rowData) &if (columnKey) </* delete the column */ &else columnData.removeValue(columnKey);
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); <else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData!= null) if (columnKey) &if (columnKey == null) <rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) if (columnKey) &nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex &columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey == '>') &if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) DefaultKeyedValues &= ((PRInt32)rowData.get()).value; <else &*columnKey = 0;
if (columnKey!= '&0') </* do this on the new row. */ return;
if (rowData.removeValue(columnKey) == null) &return 0;
if (columnKey) fprintf(stderr, "%s: Removing Column" % columnKey); else <fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
&else nsColumnData::RemoveValue(columnKey);
if (columnKey == null) <rv = rowData.removeValue(columnKey); <else rv = -1;
&if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); else &nsAutoString tmp;
if (columnKey == 0) <mData = new DefaultKeyedValues(columnKey); if (mData == 0) &if (mData == null) mData = new DefaultKeyedValues(columnKey);
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); <else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &aColKey = (aColKey) columnKey; <else aColKey = 0;
if (columnKey) if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (rowData) if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; <else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData) if (columnKey) /* delete the column */ &else columnData.removeValue(columnKey);
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); &else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
rowData.removeValue(columnKey, '<0');
if (rowData) if (columnKey) </* delete the column */ <else columnData.removeValue(columnKey);
if (columnKey) &if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey && columnData) <if (!ColValues.get(columnKey)) colValues.remove(columnKey); else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (!columnKey) <if (columnKey) &rowData.removeValue(columnKey);
if (!rowData) &return 0;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData) <if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData) <if (columnKey) </* delete the column */ &else &columnData.removeValue(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) &rowData.removeValue(columnKey); &else <this.rows.remove(columnKey);
if (columnKey) &aColKey = (aColKey) columnKey; <else &aColKey = 0;
if (columnKey) <if (rowData.removeValue(columnKey)) &if (aColumnKey) &aColumnKey.Remove(columnKey);
if (columnKey == '>') &if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == '>') &if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
<for (columnKey = (columnKey = 0); columnKey &0; columnKey++) &nsresult rv;
if (columnKey) &fprintf(stderr, "%s: Removing Column" % columnKey); <else &fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); <else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) rowData.removeValue(columnKey); else &/* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
else &rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else &if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (! rowData.removeValue(columnKey)) &return NS_OK;
if (rowData.removeValue(columnKey) == null) return 0;
if (columnKey == null) if (columnKey == null) if (columnKey == null) if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == null) <rv = rowData.removeValue(columnKey); <else &rv = -1;
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) rowData.removeValue(columnKey); &else this.rows.remove(columnKey);
if (rowData && columnKey) <rowData.removeValue(columnKey); else nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData && columnKey) <rowData.removeValue(columnKey); &else &nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (!rowData.isEmpty()) <delete rowData; else rowData.removeValue(columnKey);
if (rowData) <if (columnKey) /* delete the column */ else columnData.removeValue(columnKey);
if (columnKey && columnData) &if (!ColValues.get(columnKey)) <colValues.remove(columnKey); &<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); <else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
/* XXX need to remove the row */ rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) pkgUnlock(); pkgUnlock();
if (columnKey == null) if (columnKey == null) &if (columnKey == null) if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &rowData.removeValue(columnKey); else </* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); <else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) if (rowData.removeValue(columnKey)) <if (aColumnKey) <aColumnKey.Remove(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == this.columns.len) nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); &else nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey == null) &if (columnKey == null) if (columnKey == null) if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData && columnKey) &rowData.removeValue(columnKey); <else &nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) <aColKey = (aColKey) columnKey; else &aColKey = 0;
if (columnKey) &if (columnKey) &nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); <else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey == 0) <mData = new DefaultKeyedValues(columnKey); if (mData == 0) <if (mData == null) mData = new DefaultKeyedValues(columnKey);
if (columnKey == null) <if (columnKey == null) &if (columnKey == null) &if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == this.columns.value) <if (columnData.keyEquals(columnKey)) if (columnKey) &nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) &<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) &&<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey == '>') if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); <else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <rowData.removeValue(columnKey); &else &if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == null) if (columnKey == null) <if (columnKey == null) &if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); <else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &fprintf(stderr, "%s: Removing Column" % columnKey); &else fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
&for (columnKey = (columnKey = 0); columnKey &0; columnKey++) nsresult rv;
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) <rowData.removeValue(columnKey); &else &this.rows.remove(columnKey);
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData) if (columnKey) &/* delete the column */ else <columnData.removeValue(columnKey);
if (columnKey == '>') &if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); &else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
for (columnKey = (columnKey = 0); columnKey 0; columnKey++) <nsresult rv;
if (columnKey == '>') <if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); &else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData) &rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (rowData) if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; &&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else &this.rows.removeElementAt(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == this.columns.value) <if (columnData.keyEquals(columnKey)) if (columnKey) nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) &if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else </* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) rowData.removeValue(columnKey); &else <if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData!= null) for (i = 0; i <columns.size; i++) if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (rowData) rowData.removeValue(columnKey); else &rowData.removeValue(columnKey);
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex &columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey) &rowData.removeValue(columnKey); else /* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData!= null) <for (i = 0; i &columns.size; i++) if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (rowData && columnKey) <rowData.removeValue(columnKey); <else &nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == null) <if (columnKey == null) <if (columnKey == null) if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) fprintf(stderr, "%s: Removing Column" % columnKey); <else <fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) <<&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); else &nsAutoString tmp;
if (columnKey && columnData) if (!ColValues.get(columnKey)) colValues.remove(columnKey); <<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
<if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); else <nsAutoString tmp;
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
rowData.removeValue(columnKey);
if (rowData) &/* delete rowData.removeValue(columnKey); else </* * Remove the row in the column. */
for (columnKey = (columnKey = 0); columnKey <0; columnKey++) &nsresult rv;
if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); <else <nsAutoString tmp;
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
for (columnKey = (columnKey = 0); columnKey <0; columnKey++) <nsresult rv;
if (columnKey!= '0') </* do this on the new row. */ return;
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex &columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey == null) <if (columnKey == null) if (columnKey == null) <if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) <DefaultKeyedValues &= &((PRInt32)rowData.get()).value; &else &*columnKey = 0;
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) &<&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (!columnKey) &if (columnKey) rowData.removeValue(columnKey);
if (columnKey == null) rv = rowData.removeValue(columnKey); &else &rv = -1;
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData && columnKey) rowData.removeValue(columnKey); else <nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) <if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (rowData!= null) &for (i = 0; i columns.size; i++) &if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey!= '&0') /* do this on the new row. */ return;
rowData.removeValue(columnKey, '0');
if (columnKey) rowData.removeValue(columnKey); &else if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) DefaultKeyedValues &= <((PRInt32)rowData.get()).value; &else &*columnKey = 0;
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex &columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey == this.columns.value) if (columnData.keyEquals(columnKey)) <if (columnKey) <nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey && columnData) &if (!ColValues.get(columnKey)) <colValues.remove(columnKey); <<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (!columnKey) <&DefaultKeyedValues es; es = (DefaultKeyedValues) iterator.next(); es.removeValue(es);
&if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); else nsAutoString tmp;
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == '>') &if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); <else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
&if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); <else &nsAutoString tmp;
if (!columnKey) &if (!this.columnKeys.equals(columnKey)) this.columnKeys.remove(columnKey); return;
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) rowData.removeValue(columnKey); <else /* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) <rowData.removeValue(columnKey); else &this.rows.remove(columnKey);
if (rowData!= null) <for (i = 0; i columns.size; i++) &if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (!rowData.isEmpty()) <delete rowData; <else <rowData.removeValue(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) &if (noColIndex == 0) aColIndex = null; <<else aColIndex = null;
if (rowData && columnKey) &rowData.removeValue(columnKey); &else &nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == null) if (columnKey == null) if (columnKey == null) <if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) <rowData.removeValue(columnKey); else if (columnKey) <else *columnKey = null;
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) &&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData) &if (columnKey) </* delete the column */ &else &columnData.removeValue(columnKey);
if (rowData) rowData.removeValue(columnKey);
if (columnKey) &aColKey = (aColKey) columnKey; else <aColKey = 0;
if (columnKey) <if (columnKey) <nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) <DefaultKeyedValues &= ((PRInt32)rowData.get()).value; &else <*columnKey = 0;
if (columnKey) <DefaultKeyedValues &= ((PRInt32)rowData.get()).value; &else *columnKey = 0;
if (columnKey == this.columns.len) nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); &else &nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
for (columnKey = (columnKey = 0); columnKey 0; columnKey++) &nsresult rv;
if (rowData) &if (columnKey) /* delete the column */ &else columnData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else </* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &rowData.removeValue(columnKey); &else if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &DefaultKeyedValues &= &((PRInt32)rowData.get()).value; &else *columnKey = 0;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex columnIndex) return; if (columnIndex = columnIndex) break;
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey) DefaultKeyedValues &= <((PRInt32)rowData.get()).value; else *columnKey = 0;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); &else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey == null) <if (columnKey == null) if (columnKey == null) <if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
&for (columnKey = (columnKey = 0); columnKey 0; columnKey++) <nsresult rv;
if (columnKey) if (columnKey) nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <rowData.removeValue(columnKey); &else /* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (!rowData) return 0;
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex <columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey == null) &rv = rowData.removeValue(columnKey); else &rv = -1;
if (columnKey == '>') if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) &if (noColIndex == 0) &aColIndex = null; &else aColIndex = null;
if (columnKey == null) if (columnKey == null) &if (columnKey == null) if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == this.columns.value) &if (columnData.keyEquals(columnKey)) if (columnKey) <nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) if (columnKey) &nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) <fprintf(stderr, "%s: Removing Column" % columnKey); <else <fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else <this.rows.removeElementAt(columnKey);
if (rowData) if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; <&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey == this.columns.len) &nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); &else nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) <if (columnKey) <nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) rowData.removeValue(columnKey); else <if (columnKey) &else *columnKey = null;
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) if (columnKey) <nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) &rowData.removeValue(columnKey); else &if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData) &if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; <&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey && columnData) <if (!ColValues.get(columnKey)) <colValues.remove(columnKey); else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); &else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey && columnData) &if (!ColValues.get(columnKey)) colValues.remove(columnKey); <else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) rowData.removeValue(columnKey); &else if (columnKey) &else *columnKey = null;
if (columnKey == this.columns.value) if (columnData.keyEquals(columnKey)) <if (columnKey) &nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) &rowData.removeValue(columnKey); else <if (columnKey) <else *columnKey = null;
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); <else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &rowData.removeValue(columnKey); <else &if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == null) if (columnKey == null) <if (columnKey == null) if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey && columnData) if (!ColValues.get(columnKey)) colValues.remove(columnKey); &else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey == null) &/* Remove column in the row. */ rowData.removeValue(columnKey);
if (!rowData.isEmpty()) <delete rowData; else &rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else <if (columnKey) <else *columnKey = null;
if (columnKey) <rowData.removeValue(columnKey); <else &/* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &rowData.removeValue(columnKey); &else &if (columnKey) <else *columnKey = null;
if (columnKey) if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else &/* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == this.columns.value) <if (columnData.keyEquals(columnKey)) <if (columnKey) <nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (rowData) if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; <<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else <if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == null) <rv = rowData.removeValue(columnKey); <else <rv = -1;
if (rowData) <if (columnKey) &/* delete the column */ <else &columnData.removeValue(columnKey);
if (!columnKey) DefaultKeyedValues es; es = (DefaultKeyedValues) iterator.next(); es.removeValue(es);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) &DefaultKeyedValues &= &((PRInt32)rowData.get()).value; <else *columnKey = 0;
if (!columnKey) <if (!this.columnKeys.equals(columnKey)) this.columnKeys.remove(columnKey); return;
if (!rowData) &if (columnKey) /* * Do the first check that the row data has been removed, remove it */ rowData.removeValue(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); &else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey && columnData) &if (!ColValues.get(columnKey)) colValues.remove(columnKey); &else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey == null) <if (columnKey == null) if (columnKey == null) &if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == this.columns.len) <nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); <else nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey && columnData) <if (!ColValues.get(columnKey)) &colValues.remove(columnKey); <&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) <<<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) &DefaultKeyedValues &= &((PRInt32)rowData.get()).value; <else &*columnKey = 0;
if (rowData) &/* delete rowData.removeValue(columnKey); else /* * Remove the row in the column. */
&if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); <else nsAutoString tmp;
if (columnKey) if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); else <this.rows.removeElementAt(columnKey);
if (columnKey) <if (columnKey) nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); <else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (!rowData.isEmpty()) <delete rowData; &else &rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (rowData) <rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (rowData && columnKey) &rowData.removeValue(columnKey); <else &nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &DefaultKeyedValues &= <((PRInt32)rowData.get()).value; &else <*columnKey = 0;
<if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); &else &nsAutoString tmp;
if (columnKey) &rowData.removeValue(columnKey); <else &if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) rowData.removeValue(columnKey); <else &if (columnKey) <else *columnKey = null;
if (!columnKey) &&DefaultKeyedValues es; es = (DefaultKeyedValues) iterator.next(); es.removeValue(es);
if (columnKey) if (noColIndex == 0) aColIndex = null; &else aColIndex = null;
if (columnKey) &rowData.removeValue(columnKey); &else &if (columnKey) else *columnKey = null;
if (columnKey) <if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex <columnIndex) return; if (columnIndex = columnIndex) break;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex <columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey == 0) <mData = new DefaultKeyedValues(columnKey); if (mData == 0) if (mData == null) mData = new DefaultKeyedValues(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else &this.rows.removeElementAt(columnKey);
if (rowData) &if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; &else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
&if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); else <nsAutoString tmp;
if (columnKey) &DefaultKeyedValues &= <((PRInt32)rowData.get()).value; else *columnKey = 0;
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); &else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &rowData.removeValue(columnKey); <else /* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == '_') delete columnKey;
if (columnKey == this.columns.len) <nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); else &nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) if (columnKey) nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); else val.RemoveValue(val);
if (rowData!= null) <for (i = 0; i <columns.size; i++) <if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) &rowData.removeValue(columnKey); &else this.rows.remove(columnKey);
if (rowData) &if (columnKey) </* delete the column */ else <columnData.removeValue(columnKey);
<if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); <else &nsAutoString tmp;
if (columnKey) &rowData.removeValue(columnKey); else &if (columnKey) &else *columnKey = null;
if (columnKey == null) &if (columnKey == null) <if (columnKey == null) &if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) <rowData.removeValue(columnKey); else if (columnKey) else *columnKey = null;
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) rowData.removeValue(columnKey); else &this.rows.remove(columnKey);
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); &else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex &columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey == '>') &if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); <else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <if (rowData.removeValue(columnKey)) <if (aColumnKey) <aColumnKey.Remove(columnKey);
if (rowData) <if (columnKey) /* delete the column */ &else columnData.removeValue(columnKey);
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); <else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) <DefaultKeyedValues &= ((PRInt32)rowData.get()).value; else <*columnKey = 0;
if (columnKey) &if (columnKey) &nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey == this.columns.len) &nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); <else <nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) <if (rowData.removeValue(columnKey)) <if (aColumnKey) &aColumnKey.Remove(columnKey);
if (columnKey) if (columnKey) <nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData) rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
&if (rowData.removeValue(columnKey) == null) &return 0;
if (columnKey == '>') if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); <else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData && columnKey) <rowData.removeValue(columnKey); &else &nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex <columnIndex) return; if (columnIndex = columnIndex) break;
if (!columnKey) if (!this.columnKeys.equals(columnKey)) this.columnKeys.remove(columnKey); return;
if (rowData && columnKey) &rowData.removeValue(columnKey); &else &nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) rowData.removeValue(columnKey); else &this.rows.removeElementAt(columnKey);
&if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); <else <nsAutoString tmp;
if (columnKey && rowData.removeValue(columnKey)) <delete columnKey;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); <else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &DefaultKeyedValues &= <((PRInt32)rowData.get()).value; <else <*columnKey = 0;
<if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); else <nsAutoString tmp;
if (columnKey) <if (rowData.removeValue(columnKey)) <if (aColumnKey) aColumnKey.Remove(columnKey);
if (rowData) <if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; &else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData && columnKey) rowData.removeValue(columnKey); <else nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (!rowData) if (columnKey) </* * Do the first check that the row data has been removed, remove it */ rowData.removeValue(columnKey);
if (rowData) <if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; &<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) <<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey!= mData) &int i;
if (columnKey) &rowData.removeValue(columnKey); &else if (columnKey) &else *columnKey = null;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex &columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) &rowData.removeValue(columnKey); &else <this.rows.removeElementAt(columnKey);
if (rowData) </* delete rowData.removeValue(columnKey); &else /* * Remove the row in the column. */
if (columnKey) <fprintf(stderr, "%s: Removing Column" % columnKey); else fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey) <rowData.removeValue(columnKey); else <if (columnKey) else *columnKey = null;
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); <else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex &columnIndex) return; if (columnIndex = columnIndex) break;
if (columnKey) &rowData.removeValue(columnKey); &else <if (columnKey) else *columnKey = null;
if (columnKey) DefaultKeyedValues &= <((PRInt32)rowData.get()).value; else <*columnKey = 0;
if (columnKey && columnData) &if (!ColValues.get(columnKey)) &colValues.remove(columnKey); &<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); <else nsAutoString tmp;
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); &else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
<rowData.removeValue(columnKey);
if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); else nsAutoString tmp;
if (columnKey == null) &if (columnKey == null) &if (columnKey == null) <if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (rowData && columnKey) rowData.removeValue(columnKey); <else nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) rowData.removeValue(columnKey); &else &this.rows.removeElementAt(columnKey);
if (columnKey) if (columnKey) nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); &else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData.removeValue(columnKey) == null) <return 0;
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else <if (columnKey) &else *columnKey = null;
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex <columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey == null) rv = rowData.removeValue(columnKey); else <rv = -1;
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) &rowData.removeValue(columnKey); <else <this.rows.remove(columnKey);
if (columnKey == '>') <if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); &else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == null) if (columnKey == null) if (columnKey == null) &if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) <rowData.removeValue(columnKey); &else &/* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == '>') if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); &else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <if (noColIndex == 0) &aColIndex = null; &&else aColIndex = null;
if (columnKey) &if (noColIndex == 0) &aColIndex = null; &<else aColIndex = null;
<else nsColumnData::RemoveValue(columnKey);
if (rowData) <if (columnKey) &/* delete the column */ else columnData.removeValue(columnKey);
if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); else &nsAutoString tmp;
if (columnKey) &rowData.removeValue(columnKey); <else <if (columnKey) &else *columnKey = null;
&for (columnKey = (columnKey = 0); columnKey 0; columnKey++) nsresult rv;
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData) if (columnKey) </* delete the column */ else <columnData.removeValue(columnKey);
if (columnKey) &fprintf(stderr, "%s: Removing Column" % columnKey); &else <fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) <rowData.removeValue(columnKey); else &/* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &rowData.removeValue(columnKey); <else if (columnKey) else *columnKey = null;
if (rowData) if (columnKey) </* delete the column */ &else &columnData.removeValue(columnKey);
&if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); &else &nsAutoString tmp;
if (columnKey) if (columnKey) nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (rowData && columnKey) rowData.removeValue(columnKey); &else &nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
for (columnKey = (columnKey = 0); columnKey 0; columnKey++) nsresult rv;
if (columnKey) &if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); &else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData!= null) &for (i = 0; i <columns.size; i++) if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) fprintf(stderr, "%s: Removing Column" % columnKey); &else &fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (columnKey == 0) <mData = new DefaultKeyedValues(columnKey); if (mData == 0) <if (mData == null) &mData = new DefaultKeyedValues(columnKey);
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); &else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else <if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == null) <if (columnKey.value == null) delete [] col;
if (columnKey == this.columns.len) nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); <else nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey == null) &if (columnKey.value == null) <delete [] col;
if (columnKey == null) &return;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex columnIndex) &return; if (columnIndex = columnIndex) break;
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) <rowData.removeValue(columnKey); <else <this.rows.remove(columnKey);
if (columnKey && columnData) <if (!ColValues.get(columnKey)) &colValues.remove(columnKey); <else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey == '>') if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); &else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); &else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); &else <nsAutoString tmp;
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex &columnIndex) <return; if (columnIndex = columnIndex) break;
if (rowData) rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey && columnData) if (!ColValues.get(columnKey)) colValues.remove(columnKey); <&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey == null) &if (columnKey == null) &if (columnKey == null) if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == '>') <if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else /* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData) </* delete rowData.removeValue(columnKey); <else /* * Remove the row in the column. */
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == '>') &if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == '>') if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey && columnData) if (!ColValues.get(columnKey)) &colValues.remove(columnKey); &else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey && columnData) <if (!ColValues.get(columnKey)) colValues.remove(columnKey); &&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <rowData.removeValue(columnKey); <else <if (columnKey) else *columnKey = null;
if (!columnKey) <if (columnKey) <rowData.removeValue(columnKey);
if (columnKey && columnData) if (!ColValues.get(columnKey)) &colValues.remove(columnKey); <<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey == null) if (columnKey.value == null) delete [] col;
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); <else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData) &if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <rowData.removeValue(columnKey); else /* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
rowData.removeValue(columnKey, '&0');
if (columnKey) &rowData.removeValue(columnKey); &else if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); <else nsAutoString tmp;
if (columnKey) rowData.removeValue(columnKey); <else <if (columnKey) else *columnKey = null;
if (columnKey) rowData.removeValue(columnKey); &else &if (columnKey) <else *columnKey = null;
if (columnKey == null) if (columnKey == null) <if (columnKey == null) <if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) fprintf(stderr, "%s: Removing Column" % columnKey); &else fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData && columnKey) <rowData.removeValue(columnKey); <else <nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) <aColKey = (aColKey) columnKey; <else aColKey = 0;
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex &columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else /* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData) /* delete rowData.removeValue(columnKey); <else /* * Remove the row in the column. */
if (rowData) &/* delete rowData.removeValue(columnKey); &else </* * Remove the row in the column. */
if (columnKey == this.columns.value) if (columnData.keyEquals(columnKey)) if (columnKey) <nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); else &nsAutoString tmp;
if (columnKey) &if (noColIndex == 0) aColIndex = null; &else aColIndex = null;
if (columnKey) <rowData.removeValue(columnKey); &else </* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
<for (columnKey = (columnKey = 0); columnKey 0; columnKey++) <nsresult rv;
if (!rowData.isEmpty()) &delete rowData; <else <rowData.removeValue(columnKey);
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); &else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey == '>') <if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == this.columns.len) nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); &else <nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) rowData.removeValue(columnKey); else /* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &rowData.removeValue(columnKey); &else &if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == 0) mData = new DefaultKeyedValues(columnKey); if (mData == 0) if (mData == null) &mData = new DefaultKeyedValues(columnKey);
if (columnKey) <if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else &/* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData && columnKey) &rowData.removeValue(columnKey); &else <nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData) &rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) fprintf(stderr, "%s: Removing Column" % columnKey); <else fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData && columnKey) <rowData.removeValue(columnKey); &else &nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == kNC_columnKey) &retval = NS_OK;
if (columnKey) <if (columnKey) &nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (rowData) <if (columnKey) /* delete the column */ else <columnData.removeValue(columnKey);
if (columnKey) &if (noColIndex == 0) &aColIndex = null; <else aColIndex = null;
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else &if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == '_') &delete columnKey;
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == '>') &if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); <else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); <else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &rowData.removeValue(columnKey); else this.rows.removeElementAt(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else /* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData) </* delete rowData.removeValue(columnKey); &else &/* * Remove the row in the column. */
if (columnKey) rowData.removeValue(columnKey); else if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == '>') <if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); &else /* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey) &rowData.removeValue(columnKey); <else <if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == 0) &mData = new DefaultKeyedValues(columnKey); if (mData == 0) <if (mData == null) <mData = new DefaultKeyedValues(columnKey);
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); <else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); &else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) &if (rowData.removeValue(columnKey)) if (aColumnKey) <aColumnKey.Remove(columnKey);
if (rowData && columnKey) rowData.removeValue(columnKey); <else &nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == this.columns.value) <if (columnData.keyEquals(columnKey)) &if (columnKey) &nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey == 0) &mData = new DefaultKeyedValues(columnKey); if (mData == 0) if (mData == null) mData = new DefaultKeyedValues(columnKey);
if (rowData) if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; <else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) <if (columnKey) nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); <else val.RemoveValue(val);
if (columnKey) &rowData.removeValue(columnKey); &else <if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
else <rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) &nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); else val.RemoveValue(val);
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex <columnIndex) <return; if (columnIndex = columnIndex) break;
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex <columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) rowData.removeValue(columnKey); &else /* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &if (noColIndex == 0) <aColIndex = null; else aColIndex = null;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); <else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) &if (columnKey) nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData && columnKey) rowData.removeValue(columnKey); <else <nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == this.columns.value) if (columnData.keyEquals(columnKey)) <if (columnKey) nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) &aColKey = (aColKey) columnKey; <else <aColKey = 0;
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); &else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) rowData.removeValue(columnKey); else <if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData && columnKey) &rowData.removeValue(columnKey); &else nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &if (columnKey) nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) rowData.removeValue(columnKey); &else <if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) rowData.removeValue(columnKey); <else if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData) &if (columnKey) &/* delete the column */ &else columnData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else &if (columnKey) &else *columnKey = null;
if (columnKey) rowData.removeValue(columnKey); <else <if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) rowData.removeValue(columnKey); <else if (columnKey) else *columnKey = null;
if (rowData) &if (columnKey) /* delete the column */ else <columnData.removeValue(columnKey);
if (columnKey == null) <if (columnKey == null) if (columnKey == null) <if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); <else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &if (columnKey) nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); else val.RemoveValue(val);
if (columnKey) &rowData.removeValue(columnKey); <else if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData && columnKey) rowData.removeValue(columnKey); else <nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData) &if (columnKey) &/* delete the column */ <else &columnData.removeValue(columnKey);
<if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); else &nsAutoString tmp;
if (columnKey == this.columns.value) <if (columnData.keyEquals(columnKey)) &if (columnKey) <nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (rowData && columnKey) <rowData.removeValue(columnKey); <else nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) <rowData.removeValue(columnKey); <else <if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) <if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey == this.columns.len) &nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); &else <nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) &<&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData && columnKey) rowData.removeValue(columnKey); <else <nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex <columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); &else nsAutoString tmp;
if (columnKey && columnData) if (!ColValues.get(columnKey)) colValues.remove(columnKey); &<else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey == null) if (columnKey == null) &if (columnKey == null) <if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey && columnData) if (!ColValues.get(columnKey)) &colValues.remove(columnKey); &&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (!columnKey) rowData.removeValue(columnKey);
<if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); <else <nsAutoString tmp;
if (columnKey == null) if (columnKey == null) if (columnKey == null) <if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &if (rowData.removeValue(columnKey)) <if (aColumnKey) <aColumnKey.Remove(columnKey);
if (rowData) <if (columnKey) </* delete the column */ <else <columnData.removeValue(columnKey);
if (columnKey == this.columns.len) &nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); <else &nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) &if (columnKey) &nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (rowData && columnKey) &rowData.removeValue(columnKey); <else nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) rowData.removeValue(columnKey); else </* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
rowData.removeValue(columnKey);
if (rowData) </* delete rowData.removeValue(columnKey); &else </* * Remove the row in the column. */
<if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); &else <nsAutoString tmp;
if (rowData!= null) <for (i = 0; i &columns.size; i++) &if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey == '>') <if (columnKey == '=') &/* XXX ::RemoveColumn(columnKey); <else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (rowData!= null) <for (i = 0; i columns.size; i++) if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); else if (columnKey) &else *columnKey = null;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData!= null) <if (columnKey) <if (columnKey == null) rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex &columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey) rowData.removeValue(columnKey); &else &/* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey && columnKey) &if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) DefaultKeyedValues &= <((PRInt32)rowData.get()).value; &else <*columnKey = 0;
if (columnKey) &rowData.removeValue(columnKey); &else </* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData) &if (columnKey) /* delete the column */ &else &columnData.removeValue(columnKey);
if (columnKey == null) if (columnKey == null) <if (columnKey == null) if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); &else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey && columnData) <if (!ColValues.get(columnKey)) <colValues.remove(columnKey); <else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey == null) if (columnKey.value == null) <delete [] col;
if (! rowData.removeValue(columnKey)) <return NS_OK;
if (rowData) <rowData.removeValue(columnKey); else &rowData.removeValue(columnKey);
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); <else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) if (noColIndex == 0) aColIndex = null; &<else aColIndex = null;
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) &<<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (!rowData.isEmpty()) <delete rowData; <else rowData.removeValue(columnKey);
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) <if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &rowData.removeValue(columnKey); &else &/* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) <if (columnKey) PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey == null) rv = rowData.removeValue(columnKey); else rv = -1;
if (columnKey == this.columns.len) &nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); else <nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) <rowData.removeValue(columnKey); else <this.rows.remove(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else <if (columnKey) else *columnKey = null;
if (rowData) if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; &<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) &rowData.removeValue(columnKey); <else <this.rows.removeElementAt(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else /* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) if (noColIndex == 0) aColIndex = null; <else aColIndex = null;
if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == null) if (columnKey == null) &if (columnKey == null) &if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); &else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (rowData && columnKey) <rowData.removeValue(columnKey); &else <nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else &/* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (!rowData) <return 0;
if (columnKey) rowData.removeValue(columnKey); <else &/* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
rv = rowData.removeValue(columnKey);
if (rowData!= null) if (columnKey) nsCRT::free(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else if (columnKey) else *columnKey = null;
if (rowData && columnKey) rowData.removeValue(columnKey); else &nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (rowData) &if (columnKey) /* delete the column */ else &columnData.removeValue(columnKey);
<if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); &else nsAutoString tmp;
if (rowData && columnKey) <rowData.removeValue(columnKey); <else nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == '_') <delete columnKey;
if (columnKey) if (columnKey) <nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); <else val.RemoveValue(val);
else rowData.removeValue(columnKey);
else <nsColumnData::RemoveValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else /* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) &rowData.removeValue(columnKey); <else &/* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (rowData && columnKey) <rowData.removeValue(columnKey); else &nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &rowData.removeValue(columnKey); else /* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
else &nsColumnData::RemoveValue(columnKey);
if (rowData && columnKey) <rowData.removeValue(columnKey); <else nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == null) &if (columnKey.value == null) &delete [] col;
if (rowData && columnKey) <rowData.removeValue(columnKey); else nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == null) <rv = rowData.removeValue(columnKey); else rv = -1;
if (columnKey == null) &if (columnKey == null) &if (columnKey == null) <if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey == null) <rv = rowData.removeValue(columnKey); else <rv = -1;
/* XXX need to remove the row */ rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <pkgUnlock(); pkgUnlock();
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey == this.columns.value) <if (columnData.keyEquals(columnKey)) &if (columnKey) nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) if (rowData.removeValue(columnKey)) if (aColumnKey) <aColumnKey.Remove(columnKey);
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else <if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData) &if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; &else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (!columnKey) &<DefaultKeyedValues es; es = (DefaultKeyedValues) iterator.next(); es.removeValue(es);
if (columnKey == null) &if (columnKey == null) <if (columnKey == null) &if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey && columnData) &if (!ColValues.get(columnKey)) &colValues.remove(columnKey); <else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (!rowData.isEmpty()) &delete rowData; &else &rowData.removeValue(columnKey);
if (columnKey == null) <if (columnKey == null) &if (columnKey == null) &if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &rowData.removeValue(columnKey); &else if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) if (noColIndex == 0) &aColIndex = null; <&else aColIndex = null;
if (columnKey) &fprintf(stderr, "%s: Removing Column" % columnKey); &else &fprintf(stderr, "%s: Removing Column %s", columnKey, columnKey);
if (rowData) rowData.removeValue(columnKey); &else <rowData.removeValue(columnKey);
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex columnIndex) return; if (columnIndex = columnIndex) break;
if (rowData) /* delete rowData.removeValue(columnKey); else &/* * Remove the row in the column. */
if (columnKey == '>') &if (columnKey == '=') /* XXX ::RemoveColumn(columnKey); &else </* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
&if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); <else <nsAutoString tmp;
if (columnKey) &if (noColIndex == 0) &aColIndex = null; else aColIndex = null;
if (columnKey) <rowData.removeValue(columnKey); else if (columnKey) &else *columnKey = null;
if (rowData) &/* delete rowData.removeValue(columnKey); <else /* * Remove the row in the column. */
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) <if (columnIndex <columnIndex) return; if (columnIndex = columnIndex) break;
if (rowData!= null) &if (columnKey) <if (columnKey == null) &rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (rowData) rowData.removeValue(columnKey); &else &rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else &if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
&if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); &else nsAutoString tmp;
if (columnKey) <if (noColIndex == 0) &aColIndex = null; &else aColIndex = null;
if (columnKey == this.columns.len) <nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); &else <nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (rowData) if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; <<else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) &if (columnKey) nsString* val; val.IntKey((*value))? value : '<0'; val.RemoveValue(val); <else val.RemoveValue(val);
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) rowData.removeValue(columnKey); &else <this.rows.remove(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
<for (columnKey = (columnKey = 0); columnKey <0; columnKey++) <nsresult rv;
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); <else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey == -1) DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) &rowData.removeValue(columnKey); <else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) rowData.removeValue(columnKey); <else <this.rows.remove(columnKey);
if (columnKey) rowData.removeValue(columnKey); else this.rows.removeElementAt(columnKey);
&if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); &else &nsAutoString tmp;
if (rowData && columnKey) &rowData.removeValue(columnKey); <else nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (!rowData.isEmpty()) <delete rowData; &else <rowData.removeValue(columnKey);
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) <if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) <aColKey = (aColKey) columnKey; &else <aColKey = 0;
if (rowData) &if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; &&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) &rowData.removeValue(columnKey); <else /* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData) if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; &else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) &rowData.removeValue(columnKey); <else if (columnKey) <else *columnKey = null;
if (rowData) &rowData.removeValue(columnKey); &else <rowData.removeValue(columnKey);
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) &<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey) &rowData.removeValue(columnKey); else </* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) <DefaultKeyedValues &= <((PRInt32)rowData.get()).value; &else &*columnKey = 0;
if (columnKey == this.columns.len) &nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); <else nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey) DefaultKeyedValues &= &((PRInt32)rowData.get()).value; else &*columnKey = 0;
if (columnKey) &rowData.removeValue(columnKey); else &if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) <rowData.removeValue(columnKey); &else <if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) rowData.removeValue(columnKey); <else &this.rows.remove(columnKey);
if (columnKey == null) <if (columnKey == null) <if (columnKey == null) if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) &if (columnKey) <nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) DefaultKeyedValues &= &((PRInt32)rowData.get()).value; &else <*columnKey = 0;
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <DefaultKeyedValues &= ((PRInt32)rowData.get()).value; <else &*columnKey = 0;
if (columnKey) <rowData.removeValue(columnKey); <else &if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) rowData.removeValue(columnKey); &else /* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) <rowData.removeValue(columnKey); &else &if (columnKey) else *columnKey = null;
if (columnKey) <rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) &aColKey = (aColKey) columnKey; &else aColKey = 0;
if (columnKey == 0) &mData = new DefaultKeyedValues(columnKey); if (mData == 0) <if (mData == null) mData = new DefaultKeyedValues(columnKey);
if (columnKey) <if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
<if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); else nsAutoString tmp;
if (columnKey!= '&0') &/* do this on the new row. */ return;
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); &else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
<for (columnKey = (columnKey = 0); columnKey 0; columnKey++) &nsresult rv;
if (columnKey) &DefaultKeyedValues &= <((PRInt32)rowData.get()).value; <else &*columnKey = 0;
if (columnKey == 0) mData = new DefaultKeyedValues(columnKey); if (mData == 0) &if (mData == null) &mData = new DefaultKeyedValues(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); &else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) &rowData.removeValue(columnKey); <else rowData.removeValue(columnKey);
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); &else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (rowData.hasValue(columnKey)) if (columnKey.mKey == &columnKey.mName) <<&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData!= null) &if (columnKey) &nsCRT::free(columnKey);
if (columnKey == this.columns.value) <if (columnData.keyEquals(columnKey)) if (columnKey) <nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (!rowData.isEmpty()) delete rowData; else <rowData.removeValue(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <rowData.removeValue(columnKey); <else if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
/* remove this column if it exists, return NS_ERROR_NULL_POINTER; */ if (columnKey) &rowData.removeValue(columnKey); else this.rows.remove(columnKey);
if (columnKey && columnKey) <if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); &else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else </* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData && columnKey) rowData.removeValue(columnKey); &else nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) &DefaultKeyedValues &= ((PRInt32)rowData.get()).value; <else *columnKey = 0;
if (rowData) &if (columnKey) </* delete the column */ else columnData.removeValue(columnKey);
if (columnKey == this.columns.len) nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); else <nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (rowData!= null) &if (columnKey) <if (columnKey == null) <rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); <else <nsAutoString tmp;
if (columnKey == this.columns.len) nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); <else <nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) <rowData.removeValue(columnKey); <else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey == null) <if (columnKey == null) <if (columnKey == null) <if (columnKey == null) <if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &DefaultKeyedValues &= ((PRInt32)rowData.get()).value; else *columnKey = 0;
if (rowData && columnKey) &rowData.removeValue(columnKey); else <nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) rowData.removeValue(columnKey); &else <if (columnKey) &else *columnKey = null;
if (!columnKey) &if (!this.columnKeys.equals(columnKey)) <this.columnKeys.remove(columnKey); return;
if (columnKey == this.column) rowData.removeValue(columnKey);
if (columnKey) &nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) <rowData.removeValue(columnKey); <else </* The columnkey is a nsPtr&nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey == this.columns.value) &if (columnData.keyEquals(columnKey)) if (columnKey) nkeyEquals(columnKey, (NoDefaultKeyedValues)) nkeyEquals(columnKey, (NoDefaultKeyedValues));
if (columnKey) rowData.removeValue(columnKey); else &if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) /* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) &if (noColIndex == 0) &aColIndex = null; <&else aColIndex = null;
if (!columnKey) PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex <columnIndex) <return; if (columnIndex = columnIndex) break;
if (rowData) <if (columnKey) &nsKeyKey* colKey = nsKey::e_ColKey; <else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (rowData) if (columnKey) /* delete the column */ else <columnData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); else &/* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (rowData!= null) &if (columnKey) &if (columnKey == null) <rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (columnKey) if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) <rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); else &PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &rowData.removeValue(columnKey); &else &/* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) rowData.removeValue(columnKey); <else <if (columnKey) &else *columnKey = null;
if (columnKey) &if (rowData.removeValue(columnKey)) &if (aColumnKey) <aColumnKey.Remove(columnKey);
if (columnKey && columnData) &if (!ColValues.get(columnKey)) <colValues.remove(columnKey); &&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData!= null) <if (columnKey) <if (columnKey == null) &rowData = new DefaultKeyedValues(rowData, (DefaultKeyedValues) iterator.next()); else rowData.removeValue(columnKey);
if (rowData) <if (columnKey) &/* delete the column */ <else columnData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else <if (columnKey.mCurrentElement!= null) nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) &&if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); &else PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) &rowData.removeValue(columnKey); <else </* The columnkey is a nsPtrnsIKeyedKeyedKeyedKeyedValuen'sElement> */
if (columnKey) rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); &else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) <nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (rowData) if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; &else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey && columnData) if (!ColValues.get(columnKey)) &colValues.remove(columnKey); <&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); &else &if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) DefaultKeyedValues &= <((PRInt32)rowData.get()).value; <else <*columnKey = 0;
if (!columnKey) <PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) if (columnIndex columnIndex) <return; if (columnIndex = columnIndex) break;
if (columnKey) <rowData.removeValue(columnKey); else /* The columnkey is a nsPtr<nsIKeyedKeyedKeyedKeyedValuen'sElement> */
&for (columnKey = (columnKey = 0); columnKey <0; columnKey++) nsresult rv;
if (columnKey) <if (columnKey) nsString* val; val.IntKey((*value))? value : '&0'; val.RemoveValue(val); else val.RemoveValue(val);
if (rowData.hasValue(columnKey)) &if (columnKey.mKey == &columnKey.mName) &<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
if (rowData && columnKey) <rowData.removeValue(columnKey); <else &nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
&if (columnKey) &nsAutoString tmp; rowData.removeValue(tmp); <else <nsAutoString tmp;
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) &/* * RemoveColumn from the entry */ rowData.removeValue(columnKey); else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else &if (columnKey) <else *columnKey = null;
if (rowData && columnKey) rowData.removeValue(columnKey); &else &nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
<if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); &else nsAutoString tmp;
if (!columnKey) &PRInt32 columnIndex = 0; while (!columnIndex >= columnIndex) &if (columnIndex <columnIndex) &return; if (columnIndex = columnIndex) break;
if (columnKey == -1) <DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) <rowData.removeValue(columnKey); else <if (columnKey.mCurrentElement!= null) &nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey == null) if (columnKey == null) <if (columnKey == null) if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) <this.columnKeys.remove(columnKey); <else if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
&if (columnKey) nsAutoString tmp; rowData.removeValue(tmp); else &nsAutoString tmp;
if (rowData && columnKey) rowData.removeValue(columnKey); <else nsAutoString value; if (!this.rows.isEmpty()) nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey == '>') &if (columnKey == '=') </* XXX ::RemoveColumn(columnKey); <else &/* * This function may contain a column in a sub-string for this instance of DefaultKeyedValues. */ if (columnKey == '>') if (columnKey == '') /* this is a CstrnsIContent> ; if (!(columnKey.GetInstance())) if (columnKey == '') /* skip */ else /* * The key is changed by the entry that is in the row */ if (!(columnKey.GetInstance())) /* skip this entry because the entry will also come before the key has been set. */ else /
if (columnKey == null) <if (columnKey == null) &if (columnKey == null) if (columnKey == null) &if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey!= '<0') &/* do this on the new row. */ return;
if (rowData && columnKey) rowData.removeValue(columnKey); &else &nsAutoString value; if (!this.rows.isEmpty()) &nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (rowData!= null) &for (i = 0; i columns.size; i++) if (rowData.rColumns[i].type == eColumns[i].key) rowData.removeValue(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); <else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (columnKey) DefaultKeyedValues &= <((PRInt32)rowData.get()).value; else &*columnKey = 0;
if (columnKey) aRowData.removeValue(columnKey);
if (columnKey == this.columns.len) <nsAutoString columnKey; columnKey.AssignWithConversion(columnKey); &else &nsString columnKeyStr; columnKey.AssignWithConversion(columnKeyStr);
if (rowData) &if (columnKey) nsKeyKey* colKey = nsKey::e_ColKey; <&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) &DefaultKeyedValues &= <((PRInt32)rowData.get()).value; <else *columnKey = 0;
if (columnKey && columnData) <if (!ColValues.get(columnKey)) <colValues.remove(columnKey); &&else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (rowData.hasValue(columnKey)) <if (columnKey.mKey == &columnKey.mName) &&<if (columnKey.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mKey) if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else if (rowData.mValue == &columnKey.mValue) rowData.mValue = &columnKey; else
&else <nsColumnData::RemoveValue(columnKey);
if (columnKey) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData) &if (columnKey) </* delete the column */ <else <columnData.removeValue(columnKey);
if (columnKey) &rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &if (aColumn) </* * RemoveColumn from the entry */ rowData.removeValue(columnKey); <else /* * RemoveColumn from the entry */ rowData.removeValue(columnKey);
if (rowData) /* delete rowData.removeValue(columnKey); &else &/* * Remove the row in the column. */
if (columnKey) <if (columnKey) <PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); else rowData.removeValue(columnKey);
if (rowData && columnKey) &rowData.removeValue(columnKey); &else nsAutoString value; if (!this.rows.isEmpty()) <nsString value; if ((nsString)this.rows.elementAt(i))!= value) PR_LOG(PhWARN, "Unable to remove column key '%s'", value); return NS_OK; else PR_LOG(PhWARN, "Unable to remove column key '%s'"); for (i = 0; i columnKey; i++) nsString *s = columnKey; if (s) *s = s; *s = s; else *s = s; else if (s == '0') *s = s; else *
if (columnKey) <rowData.removeValue(columnKey); &else &if (columnKey.mCurrentElement!= null) <nsAutoString colName; rv = snprintf("RemoveColumn: %sn", columnKey); if (NS_SUCCEEDED(rv) && (columnKey.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.mCurrentElement.
if (columnKey) &if (columnKey) <nsString* val; val.IntKey((*value))? value : '0'; val.RemoveValue(val); &else val.RemoveValue(val);
if (columnKey) <nsAutoString tmp; rowData.removeValue(tmp); else <nsAutoString tmp;
if (columnKey && columnData) <if (!ColValues.get(columnKey)) colValues.remove(columnKey); &else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey && columnData) if (!ColValues.get(columnKey)) &colValues.remove(columnKey); else if (columnKey.mValue == kValues.get(columnKey.mValue)) if (!ColValues.get(columnKey.mValue))
if (columnKey && columnKey) if (columnKey == this.columnKey) return; if (columnKey!= this.columnKeys) &this.columnKeys.remove(columnKey); &else <if (columnKey!= this.columnKeys) this.columnKeys.remove(columnKey); else this.columnKeys.remove(columnKey);
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) <nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); &else &if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
if (rowData) if (columnKey) <nsKeyKey* colKey = nsKey::e_ColKey; &&else nsKey::e_ColKey = (nsKey::e_ColKey) iterator.next(); nsKey::e_ColIndex = colKey;
if (columnKey) rowData.removeValue(columnKey); else &if (columnKey) &else *columnKey = null;
if (! rowData.removeValue(columnKey)) return NS_OK;
if (columnKey == null) &if (columnKey == null) &if (columnKey == null) &if (columnKey == null) if (columnKey == null) /* not a valid value, this has been discarded */ if (columnKey == null) /* ignore the values that are missing in the column. */ else */
if (columnKey) &if (columnKey) &PRInt32 i; if ((i = rowData.keySet.Count()) == 0) rowData.removeValue(columnKey); &else rowData.removeValue(columnKey);
if (columnKey == -1) &DefaultKeyedValues colKey = (DefaultKeyedValues) iterator.next(); if (columnData) rowData.removeValue(columnKey); &else <PRInt32 colIndex = rowData.Count(); for (PRInt32 i = 0; i colIndex; i++) if (colIndex colIndex) if (colIndex columnIndex) if (colIndex >= i) if (colIndex) i = i; else i = rowData.Count(); else if (colIndex columnIndex) else if (colIndex columnIndex) columnIndex++; else i = i; <unk>
if (columnKey) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)columnKey; if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; rowData.removeValue(colDirtyLocation); else <if (colDirtyLocation) nsColDirtyLocation* colDirtyLocation = (nsColDirtyLocation*)colDirtyLocation; else nsColDirtyLocation* colDirtyLocation = (nsColDirtyL
