public T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public void T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const  return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);

public T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock()  return mock();
public T> T mock(classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
NS_IMETHOD mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock()  return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T mock (ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock (classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock)  return mock(classToMock);
void T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
static T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T> T mock(MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public inline T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) const  return mock(classToMock, mockSettings);
public T> T mock(classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) const  return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T>T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
private T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
NS_IMETHOD T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public bool shouldResetOngoingStubbing  return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const  return mock(classToMock, mockSettings);
public T> T mock(struct classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, int mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(classToMock)  return mock(classToMock);
static inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
NS_IMETHOD mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T>T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T mock(classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
private T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT>classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock)  return mock(classToMock, mockSettings);
T> mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, bool);
static T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock (classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock (classToMock, mockSettings);
NS_IMETHOD T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T mock()  return mock(classToMock, mockSettings);
public T> T mock(ClassT>& classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T> T mock(CLASST> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
private T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock()  return mock(0);
mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) const  return mock(classToMock, mockSettings);
virtual T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public inline T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public void mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, 0);
virtual T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T mock(CLASST> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(classToMock)  return mock(classToMock, mockSettings);
public void T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public boolean shouldResetOngoingStubbing  return mock(classToMock, mockSettings);
T> T mock(classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T> mock(classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
void mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T>T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
virtual T> mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
static T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
virtual T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, inline boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T* mockSettings)  return mock(classToMock, mockSettings);
static void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
NS_IMETHOD mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T mock()  return mock();
public T mock (ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock (classToMock, mockSettings);
void mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock);
T mock(ClassT> classToMock, MockSettings mockSettings) const  return mock(classToMock, mockSettings);
t> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public NS_IMETHOD mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
NS_IMETHOD mock(classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T>T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, &mockSettings);
public T mock()  return mock();
static T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public bool mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T mock(classToMock, mockSettings)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings); ;
public inline T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public void T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings);
public T> T mock(T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(CLASST> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, boolean);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, &mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock();
T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const  return mock(classToMock, mockSettings);
NS_METHOD T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock);
public NS_IMETHOD mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock();
public void mock()  return mock();
void mock()  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, 0);
public T>  return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T>  return mock(classToMock, mockSettings);
public T mock()  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mock);
public T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings, 0);
public void mock()  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock);
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock();
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, &mockSettings);
public T> mock()  return mock();
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, bool);
T mock()
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings); ;
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, 0);
void mock()  return mock();
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, true);
public void mock()  return mock(0);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, false);
public T> T mock()
MockSettings mockSettings;
public T> T mock(ClassT> classToMock, MockSettings mockSettings)  return mock(classToMock, mockSettings, true);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, true);
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, false);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings); ;
T>
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, null);
mock()
private T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T>
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings;
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings;
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings); ;
virtual T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
static T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, &mock);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings)
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing)  return mock(classToMock, mockSettings, &mock);
virtual T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
nsTestNode::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T>  return mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public T> T mock(ClassT> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
t> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing)  return mock(classToMock, &timeLine);
NS_IMETHOD T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
T> T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);
nsIWrappedContent::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing)  return mock(classToMock, mockSettings);

public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
<T> mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
virtual &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock() &return mock(0);
<T> &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, true);
public T> T mock(Class<T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
nsTestNode::T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual &T> mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public &T> T mock(Class&T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
T> mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock);
public T> T mock(Class&T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, bool);
void mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
virtual T> mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, bool);
T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); ;
T mock(CLASS&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public <T> T mock(Class<T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mock);
static void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public inline T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings)
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public T> T mock(ClassToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings)
public <T>T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public inline <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock) return mock(classToMock, mockSettings);
T> &return mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public &T> T mock(ClassT> classToMock, T* mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public void T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock);
public &T>T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(CLASS<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public T mock() return mock();
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public &T> T mock(Class<T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
NS_METHOD T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public <T> T mock(Class&T> classToMock) &return mock(classToMock);
public <T> T mock(CLASS<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
void T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
NS_IMETHOD T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T>classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
::T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock() return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock();
public <T> T mock(Class<T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
public <T> T mock(Class&T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public <T> T mock(ClassToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, true);
public T> T mock(Class<T> classToMock, inline boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public inline T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public inline T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(classToMock) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock) return mock(classToMock);
&t> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(CLASS<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings);
public T> T mock(Class<T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
::T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
<T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public <T> T mock(ClassT> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, boolean);
public &T> T mock(Class<T> classToMock, T* mockSettings) <return mock(classToMock, mockSettings);
T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, null);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, bool);
&T> mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); &;
public T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); ;
<T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, bool);
public <T> T mock(ClassT> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
virtual T> mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock);
private <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
virtual T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T* mockSettings) return mock(classToMock, mockSettings);
<T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public void T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
T mock(CLASS&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
t> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, 0);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
<T> T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
<T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T>
private T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
virtual T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public &T> T mock(ClassT> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual <T> mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
private <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
public &T> T mock(T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public &T> T mock(ClassT> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void mock() return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public <T> T mock(CLASS<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public T> T mock(Class<T> classToMock, T* mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public void mock() return mock();
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, null);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public inline &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
static &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public <T> T mock(Class&T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void mock() &return mock(0);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); ;
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mock);
T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock() return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, bool);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
&T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, boolean);
mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, 0);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
<T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); ;
public T> T mock(ClassT>& classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T* mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
private &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings;
public T> T mock(Class&T> classToMock) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings;
public T> T mock(ClassT>& classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock() return mock();
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
<T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public <T> T mock(ClassT> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
nsTestNode::T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T>classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public bool mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); &;
public T> T mock(Class&T> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
inline T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public &T> T mock(Class<T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); &;
public T> T mock(Class<T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
&t> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public bool mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, null);
virtual T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T>& classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, inline boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T>T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public <T> T mock(Class<T> classToMock) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); ;
public <T> T mock(CLASS<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public &T> T mock(ClassT>classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
void T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public <T> T mock() <return mock();
public T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock);
private &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
public T> T mock(Class<T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual <T> mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock);
public <T> T mock(Class&T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T>T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> &return mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public NS_IMETHOD mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual &T> mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
&T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
<T> T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock);
private T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, null);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
<T> &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> <return mock(classToMock, mockSettings);
T> &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(classToMock) <return mock(classToMock);
<t> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings)
public T> T mock(struct classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(struct classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
virtual <T> mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(classToMock) &return mock(classToMock, mockSettings);
virtual T> mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mock);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock);
T mock (Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock (classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
virtual &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
t> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
virtual T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public &T> T mock(classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> mock() &return mock();
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, boolean);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings;
&T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public T> T mock(CLASS<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock() <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public <T> T mock(Class&T> classToMock, inline boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public &T> T mock(Class&T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); &;
private <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock) <return mock(classToMock);
public T> T mock(Class&T>& classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
void mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
NS_IMETHOD T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<T> T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public T> T mock(Class<T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public <T> T mock(classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public <T> mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T* mockSettings) return mock(classToMock, mockSettings);
inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
&T> <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class&T>& classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
&T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T>
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
virtual <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public T> T mock(ClassT> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public &T> T mock(Class<T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
NS_IMETHOD T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
NS_METHOD T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock (classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock (classToMock, mockSettings);
t> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public <T> T mock(ClassT> classToMock, inline boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&t> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public <T> T mock(classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public T> mock() <return mock();
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, 0);
T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); ;
public <T> T mock(ClassT> classToMock) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, inline boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); &;
public &T> T mock(ClassT>& classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
&T> T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, 0);
T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public T> T mock(Class&T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, inline boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&t> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public <T> T mock(Class&T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static &T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
T> T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); &;
public &T> T mock(ClassT> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public bool shouldResetOngoingStubbing &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public T> T mock(ClassT> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, bool);
public &T> T mock(CLASST> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
private &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, null);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public &T> T mock(ClassT> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
public T>T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
NS_IMETHOD T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
static <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(CLASS<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mock);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public T> T mock(ClassT> classToMock, T* mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock);
public void T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
void mock() <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, bool);
public <T> T mock(Class<T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
&T> mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T>classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
void mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public &T> T mock(Class<T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public &T> T mock(Class&T>& classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, boolean);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, bool);
public bool mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, true);
static T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock();
static T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(CLASS&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&T> <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, 0);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public inline T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, boolean);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, bool);
public bool mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(classToMock) <return mock(classToMock);
public NS_IMETHOD mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); ;
virtual T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); ;
<T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual <T> mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, true);
&T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock();
private &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT>& classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, 0);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
&T> T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T mock() return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, bool);
<T> <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public &T> T mock(Class<T> classToMock, inline boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); &;
public inline <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, 0);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); <;
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, null);
public &T> T mock(Class<T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public T> T mock(Class&T> classToMock, inline boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T>T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public void mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public <T> T mock(Class<T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<T> <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock();
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public &T> T mock(Class&T> classToMock) <return mock(classToMock);
public &T> T mock(Class&T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> &return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public &T>T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<t> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
private T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
private <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
inline T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public inline T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public T> T mock(Class<T>classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
<T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
t> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public void T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT>classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock();
public <T> T mock(ClassT> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static <T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T>
virtual T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void mock() &return mock();
public &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, true);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, boolean);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> mock() <return mock();
::T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, true);
T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T* mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock();
public T> mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
T mock()
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock);
T mock(ClassT> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
public <T> T mock() return mock(0);
public T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T>T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
virtual T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public &T> T mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T> mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public inline &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
void mock() return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public &T> T mock(Class&T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public T>T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
virtual <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T>T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public T> T mock(Class&T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock);
<T> &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public inline &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
nsIWrappedContent::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
&T> mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
&t> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock();
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public inline <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, inline boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, bool);
public inline T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
&T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); <;
public T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); ;
private T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock) return mock(classToMock);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); <;
public <T> mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
public T> T mock(ClassT> classToMock) &return mock(classToMock);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, bool);
NS_IMETHOD T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, null);
<T> return mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public T> T mock(ClassT> classToMock) <return mock(classToMock);
public <T> mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T>T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T>T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, boolean);
&T> return mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T>T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
virtual <T> mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(CLASST> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
&T> T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> T mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T mock (ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock (classToMock, mockSettings);
static &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public &T> T mock(Class<T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> return mock(classToMock, mockSettings);
&T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public <T> T mock(ClassT> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mock);
public T> T mock(Class&T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
t> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, bool);
<T> <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, bool);
virtual <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
public <T> T mock(Class<T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); <;
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public inline &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
&T> mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock) &return mock(classToMock, mockSettings);
public &T> T mock(struct classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock) &return mock(classToMock, mockSettings);
public void T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mock);
&T> &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, bool);
public <T> T mock(CLASS&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T mock (Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock (classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
T> mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
virtual T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock) <return mock(classToMock);
public &T> T mock(CLASS<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mock);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mock);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, true);
public NS_IMETHOD mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
<T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
nsIWrappedContent::T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); ;
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, 0);
public <T> T mock(Class&T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, inline boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(CLASST> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public &T> T mock(Class<T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings)
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public &T> T mock(CLASS<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public T> T mock(ClassT> classToMock, inline boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT>classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T>T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual &T> mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
NS_IMETHOD T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mock);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, boolean);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
&T> T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
<T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<t> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, bool);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, true);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock (classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock (classToMock, mockSettings);
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, null);
public T> T mock(Class&T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T>
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, boolean);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
&T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T* mockSettings) <return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mock);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
T mock(CLASST> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T>T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock() &return mock(classToMock, mockSettings);
public T> T mock(struct classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public NS_IMETHOD mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public inline <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> mock() return mock();
nsTestNode::T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(classToMock) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, bool);
public T> T mock(Class<T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, boolean);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, boolean);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public &T> T mock(Class<T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
private &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T>T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings;
public inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, true);
static &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
&T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
<T> T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public <T> mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T>classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
&T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
virtual T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); &;
virtual &T> mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, bool);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
<T> mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
t> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
public &T> T mock(Class<T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
T> &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, inline boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
nsIWrappedContent::T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public <T> T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, null);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); &;
public &T> T mock(Class&T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public T>T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static inline T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public &T> T mock(Class<T> classToMock) <return mock(classToMock, mockSettings);
&T> &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); &;
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); <;
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public inline &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock);
T> <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T>T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, 0);
public inline <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public void mock() return mock(0);
T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); ;
static void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public <T> T mock(ClassT> classToMock) <return mock(classToMock, mockSettings);
&T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public &T> T mock(ClassT> classToMock) &return mock(classToMock, mockSettings);
&T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public T> T mock(Class<T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T>T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public T mock() <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, inline boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T> <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(CLASS&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(classToMock, mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock) return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings;
public T> T mock(Class<T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
::T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(CLASS&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
nsIWrappedContent::T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, null);
&T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public T> T mock() &return mock(0);
<t> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public inline &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public boolean shouldResetOngoingStubbing <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock) return mock(classToMock, mockSettings);
virtual T> mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T> T mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
&T> T mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T>& classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock();
public T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); <;
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(CLASS<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T>& classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
<t> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
<T> &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, bool);
T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T>T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, true);
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
static T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
virtual <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, bool);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
<t> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); &;
NS_IMETHOD mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings);
static T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); ;
mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(CLASS<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T>classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T mock (Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock (classToMock, mockSettings);
NS_IMETHOD mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, true);
public &T> T mock(Class&T> classToMock) &return mock(classToMock);
virtual <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> <return mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public T> T mock(MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
virtual <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
static T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, inline boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mock);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
&T> &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
<t> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T>T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public &T>T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
virtual <T> mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
&T> &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, 0);
void T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> return mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, bool);
virtual T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock();
public T>T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, bool);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mock);
public T> T mock(ClassT> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, bool);
public &T> T mock(Class<T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); &;
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mock);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public &T> T mock(ClassT> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(CLASST> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock);
public void T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public inline &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
&t> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public inline <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public &T> T mock(ClassT> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
void mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, null);
public T> T mock(CLASST> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> <return mock(classToMock, mockSettings);
NS_METHOD T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
NS_IMETHOD mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); &;
public <T> T mock(Class&T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> T mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mock);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public <T> T mock(T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock (ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock (classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T>T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public <T> mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(CLASS&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, inline boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT>& classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock);
T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public T> T mock() return mock(0);
private &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T>T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T* mockSettings) <return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); ;
T>
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
T> return mock(classToMock, mockSettings);
virtual T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public inline T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
private <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock();
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, bool);
public &T> T mock(Class&T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
private <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings)
t> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); <;
private <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T>T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
nsTestNode::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); <;
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public void mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public &T> T mock(Class<T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, null);
public &T> T mock(Class<T>classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
&t> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class<T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual <T> mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, inline boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock() <return mock(0);
public &T> T mock(ClassT> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public T> mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, inline boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T mock (Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock (classToMock, mockSettings);
public T>T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public T> T mock(Class&T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(CLASS&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock() return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public <T> T mock(Class<T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock();
public T> T mock(ClassT> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, boolean);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
private &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
<T> mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T>T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock() <return mock();
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, null);
public &T> T mock(CLASST> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public &T> T mock(Class&T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock);
void mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); &;
public T> T mock(Class<T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
mock()
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
<T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT>classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public void T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public <T> T mock(ClassT> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
NS_METHOD T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
<T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public inline T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
<T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T* mockSettings) <return mock(classToMock, mockSettings);
public &T>T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public boolean shouldResetOngoingStubbing &return mock(classToMock, mockSettings);
public NS_IMETHOD mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public T> T mock(ClassT> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, boolean);
private &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
t> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public bool mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock) <return mock(classToMock);
public T>T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
&T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, bool);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings;
public &T> T mock(ClassT> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, inline boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T>classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
&T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock (classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock (classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
&T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
static T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
<T> mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
&T> <return mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public <T> T mock(ClassT> classToMock) return mock(classToMock);
static inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T>T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
T> &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
public inline &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
virtual &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(classToMock) <return mock(classToMock, mockSettings);
static T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T>& classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
virtual T> mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
&t> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T>T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T>T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); &;
public <T> T mock(Class&T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public <T> T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock() &return mock();
public T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
T> &return mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public <T> T mock(ClassT>& classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, boolean);
T> mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual T> mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public T> T mock(ClassT> classToMock, T* mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> &return mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
<t> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
&T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public <T> T mock(ClassT> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public T> T mock(Class<T>& classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public inline T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public void mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public <T>T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock();
public T> T mock(ClassT> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<t> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public &T> T mock(Class&T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public <T> T mock(classToMock) return mock(classToMock);
public T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(CLASST> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public inline T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock) &return mock(classToMock);
public T> T mock() &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public <T> T mock(ClassT> classToMock) &return mock(classToMock);
public T> mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T>classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public <T> T mock(Class&T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public inline T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual T> mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, null);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mock);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, 0);
public &T> T mock(Class&T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T>T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public inline <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public &T>T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&t> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T>T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_METHOD T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
virtual &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, 0);
&t> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public bool mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, null);
public &T> mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
NS_IMETHOD mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
inline T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, boolean);
public inline <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); <;
public <T> T mock(Class&T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
private T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public <T> T mock(Class<T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, null);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, 0);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T>T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
NS_IMETHOD T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T>& classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> <return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock();
<T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public <T> T mock(Class&T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> T mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&t> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T>T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public <T>T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
t> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public &T> T mock(Class&T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
virtual &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(CLASST> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings;
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(ClassT> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
::T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
::T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mock);
virtual T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); ;
public inline T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<T> <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, null);
public <T> T mock (classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock (classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public inline &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T>T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock);
public T> T mock(ClassT> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public &T> T mock(Class<T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock);
<T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(CLASS<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
private T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
&T> &return mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
static T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); &;
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public &T> T mock(Class<T> classToMock, inline boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
void mock() <return mock();
T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock) return mock(classToMock);
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public <T> T mock(ClassT> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T>T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T>& classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT>classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, bool);
public &T> T mock(Class&T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static inline T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock) &return mock(classToMock);
public <T> T mock(ClassT> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, boolean);
&T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); <;
public <T> T mock(Class<T> classToMock, T* mockSettings) <return mock(classToMock, mockSettings);
static <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock()
public T> T mock(ClassT> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(CLASS<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, null);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public <T> T mock(ClassT> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
&T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, boolean);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mock);
&T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T>T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, true);
public <T> T mock(ClassT> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
<T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
static <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public &T> T mock(ClassT> classToMock, T* mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
&T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
<T> <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public T> T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); &;
public T> T mock(Class<T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock() <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
virtual &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
private <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T>classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public T> T mock() <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T>T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T> <return mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
virtual T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, bool);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public <T> T mock(ClassT> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public T> T mock(Class&T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public inline T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
nsTestNode::T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
static <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public inline &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, 0);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T* mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public <T> mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public T mock() <return mock();
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, 0);
private T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock (Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock (classToMock, mockSettings);
<T> &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, null);
public T>T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
private T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock);
public NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public T> T mock(T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, bool);
static &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings;
public inline <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
inline T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public <T> T mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
private T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, true);
public &T> T mock(Class&T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); ;
public &T> T mock(Class<T>classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
&T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(CLASS<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
<T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public <T> T mock(classToMock) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
public T> T mock(Class&T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
static &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, boolean);
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock() return mock();
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock);
virtual T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public <T> T mock(Class&T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
T> <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
void T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
&T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, bool);
public <T> mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T>T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public inline T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
<t> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public &T> mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T>T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
static void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public <T> T mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
<T> &return mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public <T> T mock() &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
&T> <return mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public &T> T mock() &return mock();
<t> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock() &return mock(classToMock, mockSettings);
&T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public inline <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
static &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(struct classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
private <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public inline &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock();
NS_IMETHOD T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public &T> T mock(Class<T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
NS_IMETHOD T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, null);
public T> T mock(ClassT> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public &T> T mock(ClassT> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public T> T mock(ClassT> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(CLASS&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
&T> T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); <;
public T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
NS_IMETHOD T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
&T> return mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public &T> T mock(Class<T>& classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public T> T mock(ClassT> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings;
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
void T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, boolean);
public <T>T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT>classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T> T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public T> T mock(ClassT> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public <T> T mock(ClassT> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> T mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T> return mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
<T> &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, true);
<T> T mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, bool);
public T> T mock(Class&T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public &T>T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public bool shouldResetOngoingStubbing <return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock();
&T> &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, bool);
static &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock (classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock (classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock();
public T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, true);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); <;
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T>T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public T>T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock() return mock(classToMock, mockSettings);
public T> T mock(Class&T>classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T* mockSettings) return mock(classToMock, mockSettings);
virtual &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(classToMock) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(Class<T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, bool);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mock);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public <T> T mock(Class&T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock);
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
public &T>T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, true);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, 0);
&t> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, bool);
public T> T mock(CLASST> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T>T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); ;
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings)
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock) return mock(classToMock);
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
public &T>T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> <return mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public bool shouldResetOngoingStubbing return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
T> mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T> &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(CLASS<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public &T> T mock(T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public inline &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public <T> mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public bool mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public NS_IMETHOD mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
public T> T mock(Class<T> classToMock) &return mock(classToMock);
virtual &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
<t> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T> T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, true);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, true);
public <T> T mock(struct classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
NS_IMETHOD mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(struct classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock);
static &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T mock (ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock (classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public &T> T mock() <return mock(0);
public T>T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, bool);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<t> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
&T>
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, bool);
<T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
&T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
NS_IMETHOD T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, null);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public T> T mock(ClassT> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public <T>T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T>T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); <;
public inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock();
public T> T mock(Class&T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
&T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); ;
<T> return mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, true);
public &T>T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings);
public void T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
&T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> mock() <return mock();
public <T> T mock(Class<T> classToMock, T* mockSettings) &return mock(classToMock, mockSettings);
public void mock() <return mock(classToMock, mockSettings);
public <T> mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public T> T mock(classToMock) &return mock(classToMock);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); <;
virtual T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public <T> T mock(Class&T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); ;
static T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, bool);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public T> T mock(Class<T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public inline T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T>T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T>
nsIWrappedContent::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); <;
public &T> T mock(Class<T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mock);
public &T> T mock(Class&T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T>& classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(CLASS&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
virtual &T> mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual <T> mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); ;
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings)
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public NS_IMETHOD mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock();
virtual <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, bool);
static T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(Class&T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public inline &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
<T> T mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
virtual T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public NS_IMETHOD mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(CLASS<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock) <return mock(classToMock);
public T> T mock(ClassT>classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
void mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
t> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock() <return mock();
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, 0);
public T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public inline &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public NS_IMETHOD mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, inline boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public &T> T mock(Class&T> classToMock, inline boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class<T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public &T> T mock(Class&T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, bool);
&t> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings)
public <T> T mock(ClassT> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&t> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(CLASS&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T>T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); <;
virtual <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(CLASS<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, true);
public <T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
private &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); &;
public &T> T mock(Class&T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); &;
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, 0);
nsIWrappedContent::T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); ;
&t> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public &T> mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public inline T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock) <return mock(classToMock);
private &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public T> T mock(ClassT> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public T> T mock(ClassT> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings;
public &T> T mock(Class<T>& classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
public T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock() &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> mock() &return mock();
public T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, 0);
<T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public <T> mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> mock() &return mock();
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public &T> T mock(ClassT> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
virtual <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
private <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual &T> mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings;
public <T> T mock(Class<T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public inline <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public inline T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public inline <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
<T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
virtual &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); <;
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings;
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, true);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T mock (Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock (classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT>& classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(struct classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T* mockSettings) return mock(classToMock, mockSettings);
public inline T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, null);
public <T> T mock(CLASS<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
<T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
&T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
t> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T>T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, boolean);
public inline T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, 0);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); &;
public &T> mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock);
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
private T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(CLASS&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, inline boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock (Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock (classToMock, mockSettings);
&T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T>classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mock);
&T> T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, boolean);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public <T> T mock(ClassT> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock();
mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
&T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock (classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock (classToMock, mockSettings);
<T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, boolean);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
NS_IMETHOD T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(ClassT> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public &T>T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public <T> T mock(Class&T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, bool);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public <T> mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&t> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
private T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock (classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock (classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, bool);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock);
public &T> T mock(ClassT> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
T mock(Class<T> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
public T>T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, bool);
public &T> mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T> mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, bool);
public T> T mock(Class<T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
private <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> mock() return mock();
public <T>T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
private T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T>classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
static &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock);
void mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
private &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public inline T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T* mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock);
t> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); <;
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); <;
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
<T> &return mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
private T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
&T> &return mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public T> T mock(Class<T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock) return mock(classToMock);
NS_IMETHOD T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
static inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock);
<T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, true);
public <T> mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T>T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> <return mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, boolean);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
<T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, bool);
&T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(classToMock) &return mock(classToMock, mockSettings);
<T> return mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public &T> T mock(ClassT> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public T>T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(CLASS<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(classToMock) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock (classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock (classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock (Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock (classToMock, mockSettings);
NS_IMETHOD T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
private &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public inline &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); <;
public T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock);
nsTestNode::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
&T> mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock();
static &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, bool);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
T mock(CLASST> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
T> return mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public T>T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
void mock() return mock();
&T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, inline boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock);
void T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public T> T mock(ClassT> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public inline <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, inline boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, 0);
public &T> T mock(ClassT> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
T> <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mock);
public T> T mock(Class<T>classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public <T> T mock(Class<T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
static T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, boolean);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public T> T mock()
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
public T> T mock(Class&T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public <T> T mock(Class<T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&T> return mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
static <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
virtual T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
private <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T>T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, inline boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
private <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, true);
public T> T mock(Class&T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public <T> T mock(CLASS&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); &;
public &T>T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T>T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual &T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock) return mock(classToMock);
void mock() &return mock();
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public &T> mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock);
public inline T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
virtual &T> mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(CLASST> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(classToMock, mockSettings) <return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, true);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, null);
virtual T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
<t> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T* mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); &;
public <T> T mock(ClassT> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
<T> <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, bool);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public T> T mock(Class&T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
private &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock);
<T> mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
virtual T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
&T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, true);
<T> &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, boolean);
public T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T* mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock);
public &T> T mock(Class&T> classToMock, T* mockSettings) &return mock(classToMock, mockSettings);
public bool mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public T> T mock (classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock (classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public <T> T mock(Class<T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, 0);
virtual &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
inline T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual T> mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public void mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings;
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
void mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); ;
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public T> T mock(Class<T> classToMock) <return mock(classToMock);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
nsTestNode::T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public &T> mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings;
T mock (Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock (classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, null);
public T> T mock(Class&T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public T> T mock(ClassT> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); ;
public <T>T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
NS_IMETHOD mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, bool);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
virtual <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
NS_IMETHOD T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public <T> T mock(Class&T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
public &T> T mock(Class<T>& classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<T> <return mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public &T> T mock(ClassT> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T>classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); <;
public inline <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T>& classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
t> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
void mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); <;
public T> T mock(ClassT> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); &;
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public &T> T mock(ClassT> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public T> T mock(ClassT> classToMock) return mock(classToMock);
public &T> T mock() return mock(0);
&T> mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T mock (ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock (classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
&T> <return mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T>T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, 0);
t> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static &T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_METHOD T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT>& classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
T mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
private &T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
T mock (Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock (classToMock, mockSettings);
public T> return mock(classToMock, mockSettings);
void T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public <T> <return mock(classToMock, mockSettings);
mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&t> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock);
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public inline T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
virtual &T> mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
static <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock);
private T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public <T>T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, inline boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public T> T mock(Class&T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
static inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
static <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
virtual T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
void T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock (Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock (classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
<t> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
public T> T mock(Class<T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(CLASS&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
t> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
void mock() &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public T>T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
NS_IMETHOD mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mock);
public T> T mock(Class<T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(CLASST> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(CLASS&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock(CLASST> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); <;
virtual T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock() &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public <T> mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
nsIWrappedContent::T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> <return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
private <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
static <T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, true);
public T> T mock(Class&T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
&T> <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public <T> T mock(CLASST> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(classToMock) return mock(classToMock);
public <T>T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<t> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock) &return mock(classToMock);
public &T> T mock(Class<T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock();
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public <T> T mock() &return mock();
public <T> mock(classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
&T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public inline <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); <;
<t> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
virtual <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
private <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public <T> T mock(ClassT> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, null);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock();
virtual &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public T> mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock) <return mock(classToMock);
public T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public T> T mock(Class<T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public NS_IMETHOD mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public <T>T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T>T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock) return mock(classToMock);
public <T> T mock(Class<T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, bool);
T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
NS_IMETHOD mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings, 0);
static &T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock) return mock(classToMock);
T> mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public &T> T mock(Class<T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
t> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T>T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
public <T> mock() return mock();
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
void mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock);
static T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, 0);
public inline T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(CLASS&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T>
mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T(ClassT>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock() &return mock();
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public <T> T mock(classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); &;
&T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
virtual <T> mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T* mockSettings) return mock(classToMock, mockSettings);
static T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, boolean);
static &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
NS_IMETHOD mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings;
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, bool);
public T>T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> &return mock(classToMock, mockSettings);
NS_IMETHOD T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mock);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) const <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(CLASST> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T>T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock (Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock (classToMock, mockSettings);
public &T> T mock(CLASS<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mock);
virtual <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings);
T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public NS_IMETHOD mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock()
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); &;
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public <T> T mock(classToMock) &return mock(classToMock);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
static T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public void T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); <;
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public <T> mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock);
public T>
T> <return mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
virtual T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(classToMock) <return mock(classToMock);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
public <T> T mock(ClassT> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
public NS_IMETHOD mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(CLASS&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
private <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, true);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
NS_IMETHOD mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public bool mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
t> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public <T> T mock(CLASST> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, 0);
<T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
static <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock);
public &T> T mock(classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings;
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings;
T mock() return mock();
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
void mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public inline T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(CLASST> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
static <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
public &T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); &;
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public <T> T mock(ClassT> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings); <;
public T> T mock(ClassT> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(CLASS&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); ;
public &T> T mock(Class<T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
public <T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
nsTestNode::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
virtual &T> mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
static inline T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public <T>T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, 0);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mock);
virtual &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T* mockSettings) &return mock(classToMock, mockSettings);
static T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public <T> mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
virtual &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> &return mock(classToMock, mockSettings);
T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
NS_METHOD T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
<T> return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock();
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings)
NS_IMETHOD mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public <T> T mock(T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock();
public T> T mock(ClassT> classToMock, MockSettings mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock();
static T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
private &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock);
public <T> T mock(struct classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock) &return mock(classToMock, mockSettings);
&T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&T> &return mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing);
public <T>T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
T mock() <return mock(classToMock, mockSettings);
T> T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
NS_IMETHOD mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock);
virtual T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
NS_METHOD T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
NS_IMETHOD T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T mock (ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock (classToMock, mockSettings);
<T> <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public void T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public &T> T mock(Class<T> classToMock) &return mock(classToMock);
&T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mockSettings);
public &T>T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
&T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T>classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); ;
public <T> T mock(Class&T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T>T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, null);
public T> T mock(CLASS&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings, true);
public <T> T mock(CLASST> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
virtual <T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock) return mock(classToMock, mockSettings);
public inline &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public void mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); ;
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock);
public <T> T mock(ClassT> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
virtual <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
virtual <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, null);
public T> T mock(Class<T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, T_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public T> T mock(CLASST> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
nsIWrappedContent::T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
<T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public NS_IMETHOD mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public void T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public NS_IMETHOD mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, T* mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock();
public <T> T mock(Class<T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, bool);
public T> T mock(MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, bool);
T mock(CLASS<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
<T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
&t> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock() &return mock(0);
void mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T>& classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
virtual T> mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
private &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TIMELINE<T> timeLine, boolean shouldResetOngoingStubbing) <return mock(classToMock, &timeLine);
T> <T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock() <return mock(0);
static T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public void T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
private <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public void mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
<T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, false);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, boolean);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, &mockSettings);
T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); <;
private <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock);
public &T> T mock(ClassToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
nsTestNode::T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(classToMock) <return mock(classToMock, mockSettings);
&T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(CLASST> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
NS_IMETHOD mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
inline T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock() <return mock(0);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public T> mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock();
T mock (ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock (classToMock, mockSettings);
&T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public void T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
&T> mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
void mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public &T> T mock(Class&T> classToMock, T&_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
static inline T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mock);
&T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TmSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T>T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); <;
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, TIMELINE&T> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock() <return mock();
public <T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, false);
private T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
public &T> T mock(ClassT>classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public &T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public <T> T mock(Class<T> classToMock, inline boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
T> mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T>T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, &mock);
public void T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock) &return mock(classToMock);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock();
public T> T mock() &return mock();
public &T> T mock(Class<T> classToMock, T(Class&T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public inline &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings); ;
public &T> T mock(ClassT> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, T<_MockSettings> mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T>& classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(ClassT>& classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
static &T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
nsIWrappedContent::T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, T(Class<T>)MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(CLASS&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&T> T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, &mockSettings);
public &T>T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
private T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings) const &return mock(classToMock, mockSettings);
static T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T>T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
<T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
&T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(classToMock, mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) const &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, true);
public &T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TAILQ_FIRST_MODE &mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
t> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
NS_IMETHOD mock(classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
NS_METHOD T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings, true);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock);
static T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
&T> &T> mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings); &;
public &T> mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock() return mock();
public T mock(ClassT> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock) return mock(classToMock, mockSettings);
public boolean shouldResetOngoingStubbing return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T* mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) &return mock(classToMock, &timeLine);
public inline <T> T mock(Class<T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public inline <T> T mock(Class<T> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, TEST mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); &;
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings, &mockSettings);
public void mock() <return mock();
public &T> T mock(Class&T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock);
public void mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public <T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings, 0);
virtual T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(ClassT> classToMock, T* mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings, int shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T> &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock();
public <T> T mock(ClassT> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
public inline T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); &;
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, false);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public <T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, bool);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); <;
public &T> T mock(Class<T> classToMock, T* mockSettings) &return mock(classToMock, mockSettings);
static <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T> T mock(MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) const <return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mockSettings);
&T> <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
<t> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); ;
public &T> mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, bool);
static T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, 0);
public &T> T mock(CLASS&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public T> T mock(ClassT>classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
T> <T> mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, &mockSettings);
public T>T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mock);
<T> mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings, 0);
public T> T mock(ClassT> classToMock, TAILQ_MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
T mock(classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
static inline T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(ClassT> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, bool);
public &T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) const return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
&T> T mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
private <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
virtual T> mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, bool shouldResetOngoingStubbing) const return mock(classToMock, mockSettings);
static &T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings); <;
&T> T mock(ClassT> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public T> T mock(Class&T>classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) &return mock(classToMock, mockSettings, &mock);
public T> T mock(Class<T> classToMock, Settings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public &T>T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
static <T> mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, boolean shouldResetOngoingStubbing) <return mock(classToMock, mock);
public &T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings); &;
static <T> T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings);
T mock(classToMock, mockSettings) return mock(classToMock, mockSettings);
public T> T mock(Class<T> classToMock, MockSettings mockSettings) <return mock(classToMock);
public <T> T mock(ClassT> classToMock, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings); ;
public &T> T mock(Class<T> classToMock, TIMELINET> timeLine, boolean shouldResetOngoingStubbing) return mock(classToMock, &timeLine);
static inline T mock(Class&T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) &return mock(classToMock, mockSettings);
public &T> T mock(Class<T> classToMock, bool shouldResetOngoingStubbing) return mock(classToMock, bool);
public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) <return mock();
public <T> T mock(Class&T> classToMock, MockSettings mockSettings);
public <T> T mock(classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) return mock(classToMock, mockSettings;
void mock(ClassT> classToMock, MockSettings mockSettings) return mock(classToMock, mockSettings);
T> T mock(ClassT> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
public <T> T mock(Class&T> classToMock, int mockSettings, boolean shouldResetOngoingStubbing) <return mock(classToMock, mockSettings);
public <T> T mock(Class<T>& classToMock, MockSettings mockSettings) &return mock(classToMock, mockSettings);
&T> mock(Class&T> classToMock, MockSettings mockSettings) <return mock(classToMock, mockSettings);
