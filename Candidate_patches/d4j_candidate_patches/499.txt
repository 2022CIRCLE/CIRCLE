golden:
double ret;
inference:

ret;
double ret = 0;
int ret;
double ret;
void *ret;
void* ret;
const double ret;
double ret = null;
double ret, ret;
u_long ret;
u_int ret;
bool ret;
ret = double ret;
double p;
double ret = d;
void ret;
double *ret;
size_t ret;
double int ret;
double ret = ret;
long ret;
double ret, d;
float ret;
double ret = -1;
PRInt32 ret;
/* double ret; */
double d;
double ret, ret2;
double ret = 1;
ret = 0;
char* ret;
double ret, i;
double ret=0;
double result;
/* double ret;*/
return double ret;
uint ret;
double ret = p;
return ret;
double p, ret;
double ret, offset;
char *ret;
Double ret;
double result = ret;
char ret;
double ret, result;
double ret, len;
DWORD ret;
double i;
void *p;
double ret, flags;
double ret, p;
(void) double ret;
double i, ret;
double ret, *p;
- ret;
double ret = 2;
void * ret;
#endif
double ret; double d;
struct ret *ret;
double* ret;
double ret __unused;
double d, ret;
double ret; double ret;
unsigned long ret;
double ret, *ret;
double s;
static double ret;
ret = ret;
double ret, size;
v ret;
/* double ret */
double ret, length;
double ret; int i;
const int ret;
splx(s);
double double ret;
double ret, res;
ret = d;
double &ret;
double arg;
*ret;
div ret;
double _ret;
struct proc *p;
u_int32 ret;
double ret, v;
unsigned int ret;
&double ret;
double ret, count;
double ret1, ret2;
inline double ret;
::double ret;
double ret = %d;
unsigned ret;
tmp ret;
double ret, ret1;
double unsigned ret;
XXX ret;
(void)double ret;
double ret, s;
uint32 ret;
single ret;
double ret; void *p;
double *p;
double v;
double ret = (double)0;
void **ret;
double len;
0 ret;
double ret, n;
u_double ret;
double ret, *d;
double res;
%d ret;
__double ret;
double long ret;
double ret1;
double const double ret;
/* double ret*/
double tmp;
return 0;
double ret2;
ret = p;
double const ret;
double size_t ret;
int ret = 0;
double ret
double*ret;
double ret, ret0;
ulong ret;
double ret; double p;
- double ret;
double ret, delta;
++double ret;
ULong ret;
double (ret);
void *ret = ret;
double_ret;
double id;
ret = d - 2.0;
double ret, r;
const char* ret;
double ret, l;
nsret ret;
inline ret;
double ret, tmp;
double ret, value;
double ret, m;
double ret, c;
double ret, off;
double t;
double ret, out;
double ret = "";
++ret;
double ret, error;
double newret;
double b;
double inret;
double value;
double f;
double ret = n;
%s ret;
double ret, h;
*p;
double r;
double ret, err;
double ret = 0, ret;
double ret = r;
double size;
char * ret;
double ret = (double)p;
void *ret = 0;
double ret = *p;
ret -= p;
double d; double ret;
double ret, cnt;
double ch;
double ret; double i;
double ref;
void* ret = 0;
double
v;
double ret; int d;
double ret; int flags;
ret; int ret;
double break;
super.getInitialDomain();
sigset_t ret;
double ret; double ret = 0;
double ret, ret1, ret2, ret3, ret3, ret2, ret3, ret4, ret2, ret3, ret3, ret5, ret6, ret4, ret7, ret7, ret8, ret7, ret8;
/* * Check that the device is loaded in the new device. */ ret = p;
double ret; u_int32_t len;
double ret, ret_len;
double ret, ret2, ret3, ret1, ret2;
double ret, *newDomains;
double ret; void *ret;
double ret; /* * Make sure the next d */
double ret; ret = 0;
double ret = ret / (d - 2.0);
double ret, dev;
double ret; u_int32_t i;
/* Double ret */
nsDocument::Double ret;
double ret; ret = getDenominatorDegreesOfFreedom();
double ret = d / (d - 2.0);
uint32_t ret;
nsDocument::double ret;
p.p = 0;
double ret; struct proc *p;
double ret = (double)((u_long)p);
double ret; double prev;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key)  ret = p.p_str_has_key;  else  ret = 0;
ret = d / (d - 2.0);
double ret, ret, *str;
u_int32_t ret;
double ret, ntohld(d) / sizeof d;
double ret, ret2, ret2;
double ret = d - 2.0;
double ret, p, ret;
ret = d / (d - 2.0); ret = d / (d - 2.0);
d.d = d.d;
p_bool ret;
double ret, ni;
double ret, ret_obj, ret_rev;
double ret, ret_cnt;
dx = getDenominatorDegreesOfFreedom(); ret = dx / (d - 2.0);
/* XXX */ if (ntohs() == 0)  return ntohs();  else  return NS_ERROR_NULL_POINTER;
uint16_t ret;
double ret = (double)d / d;
sig_t ret;

int ret;
<int ret;
double ret;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) ret = p.p_str_has_key; else <ret = 0;
ret;
/* XXX */ if (ntohs() == 0) return ntohs(); else &return NS_ERROR_NULL_POINTER;
/* XXX */ if (ntohs() == 0) &return ntohs(); &else return NS_ERROR_NULL_POINTER;
&int ret;
/* XXX */ if (ntohs() == 0) &return ntohs(); else &return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) <ret = p.p_str_has_key; <else ret = 0;
/* XXX */ if (ntohs() == 0) return ntohs(); &else <return NS_ERROR_NULL_POINTER;
/* XXX */ if (ntohs() == 0) <return ntohs(); else return NS_ERROR_NULL_POINTER;
&int ret;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) ret = p.p_str_has_key; else ret = 0;
/* XXX */ if (ntohs() == 0) return ntohs(); <else <return NS_ERROR_NULL_POINTER;
/* XXX */ if (ntohs() == 0) <return ntohs(); <else &return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) ret = p.p_str_has_key; else &ret = 0;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) ret = p.p_str_has_key; <else &ret = 0;
/* XXX */ if (ntohs() == 0) &return ntohs(); <else <return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) <ret = p.p_str_has_key; &else <ret = 0;
double ret = 0;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) <ret = p.p_str_has_key; else <ret = 0;
<double ret;
/* XXX */ if (ntohs() == 0) return ntohs(); &else return NS_ERROR_NULL_POINTER;
int ret;
/* XXX */ if (ntohs() == 0) &return ntohs(); &else <return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) &ret = p.p_str_has_key; <else &ret = 0;
<double ret;
/* XXX */ if (ntohs() == 0) &return ntohs(); <else &return NS_ERROR_NULL_POINTER;
/* XXX */ if (ntohs() == 0) return ntohs(); &else &return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) <ret = p.p_str_has_key; else &ret = 0;
/* XXX */ if (ntohs() == 0) &return ntohs(); &else &return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) ret = p.p_str_has_key; &else ret = 0;
/* XXX */ if (ntohs() == 0) <return ntohs(); else <return NS_ERROR_NULL_POINTER;
/* XXX */ if (ntohs() == 0) return ntohs(); <else &return NS_ERROR_NULL_POINTER;
/* XXX */ if (ntohs() == 0) &return ntohs(); else return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) &ret = p.p_str_has_key; <else <ret = 0;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) <ret = p.p_str_has_key; <else <ret = 0;
/* XXX */ if (ntohs() == 0) <return ntohs(); else &return NS_ERROR_NULL_POINTER;
&double ret;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) <ret = p.p_str_has_key; &else ret = 0;
/* XXX */ if (ntohs() == 0) return ntohs(); <else return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) ret = p.p_str_has_key; &else &ret = 0;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) &ret = p.p_str_has_key; &else &ret = 0;
&double ret;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) &ret = p.p_str_has_key; else &ret = 0;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) ret = p.p_str_has_key; &else <ret = 0;
/* XXX */ if (ntohs() == 0) <return ntohs(); &else return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) &ret = p.p_str_has_key; else ret = 0;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) ret = p.p_str_has_key; <else <ret = 0;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) &ret = p.p_str_has_key; else <ret = 0;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) ret = p.p_str_has_key; <else ret = 0;
/* XXX */ if (ntohs() == 0) <return ntohs(); <else return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) &ret = p.p_str_has_key; &else <ret = 0;
/* XXX */ if (ntohs() == 0) <return ntohs(); <else <return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) <ret = p.p_str_has_key; &else &ret = 0;
double ret;
/* XXX */ if (ntohs() == 0) &return ntohs(); else <return NS_ERROR_NULL_POINTER;
<int ret;
/* XXX */ if (ntohs() == 0) return ntohs(); else <return NS_ERROR_NULL_POINTER;
/* XXX */ if (ntohs() == 0) &return ntohs(); <else return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) &ret = p.p_str_has_key; <else ret = 0;
/* XXX */ if (ntohs() == 0) <return ntohs(); &else &return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) &ret = p.p_str_has_key; &else ret = 0;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) <ret = p.p_str_has_key; <else &ret = 0;
/* XXX */ if (ntohs() == 0) <return ntohs(); &else <return NS_ERROR_NULL_POINTER;
/* XXX */ if (ntohs() == 0) return ntohs(); else return NS_ERROR_NULL_POINTER;
/* XXX this should always be a long variable. */ if (p.p.p_str_has_key) <ret = p.p_str_has_key; else ret = 0;
