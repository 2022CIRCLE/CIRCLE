golden:
return reportMatcher(Any.ANY).returnZero();
inference:
return reportMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY);
return ReportMatcher(Any.ANY).returnZero();
return anyLong();
return reportMatcher(Any.ANY).returnZero();
return anyMatcher(Any.ANY);
return Any.ANY.returnZero();
return Any.ANY;
return reportMatcher(Any.ANY).returnValue();
return anyLong(Any.ANY);
return reportMatcher(Any.ANY, 0);
return reportMatcher(Any.ANY).returnZero(0);
return anyMatcher(Any.ANY).returnZero();
return anyLong;
return reportMatcher(Any.ANY).return(null);
return reportMatcher(Any.ANY, anyLong);
return anyLong(any.ANY);
return Any.ANY.returnZero();
return reportMatcher(Any.aNY).returnZero();
return reportMatcher(Any.LONG).returnZero();
return reportMatcher(Any.ANY).return_Zero();
return reportMatcher(Any.ANY)!= 0;
return rv;
return reportMatcher(Any.aNY);
return reportMatcher(Any).returnZero();
return (Any.ANY).returnZero();
return reportMatcher(Any.CNY).returnZero();
return reportMatcher(Any.null).returnZero();
return aAny.ANY;
return reportMatcher(Any.NUM).returnZero();
return reportMatcher( Any.ANY ).returnZero();
return (anyLong)returnZero();
return reportMatcher(Any.ANY)!= null;
return Report(Any.ANY).returnZero();
return any(Any.ANY);
return reportMatcher(Any.ANY, &anyLong);
return anyLong.returnZero();
return ReportMatcher(Any.ANY);
return anyLong(reportMatcher(Any.ANY));
return ReportMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY).returnZero(1);
return reportMatcher(Any.IA).returnZero();
return reportMatcher(Any.ANY).return_zero();
return retval;
return reportMatcher(IAny.ANY).returnZero();
return reportMatcher(any.ANY).returnZero();
return reportMatcher( Any.ANY );
return reportMatcher(Any.INY).returnZero();
return result;
return reportMatcher();
return reportMatcher(Any.NUMERIC).returnZero();
return reportLong(Any.ANY).returnZero();
return reportMatcher(Any.ANY).returnValue();
return reportMatcher(Any.get()).returnZero();
return (anyLong)reportMatcher(Any.ANY);
return reportMatcher(ANY).returnZero();
return reportMatcher(AnyLong).returnZero();
return reportMatcher(Any.LONG);
return reportMatcher(Any.ANY, null);
return reportMatcher(Any.aNY).returnZero();
return (reportMatcher(Any.ANY));
return this;
return reportMatcher(Any.ANY).returnType();
return any(Any.ANY).returnZero();
return ret;
return reportMatcher(any.ANY);
return (any.ANY).returnZero();
return reportMatcher(Any.ASYNC).returnZero();
return reportMatcher(any.aNY).returnZero();
return (Any.ANY)returnZero();
return reportMatcher(Any.ANY) && anyLong;
return reportLong(Any.ANY);
return reportMatcher(Any.ANY).get();
return reportMatcher(Any.ANY, AnyLong);
return reportMatcher(any).returnZero();
return reportMatcher(Any.ANY).return();
return anyLong(any);
return reportMatcher(Any.ANY).ReturnZero();
return any.returnZero();
return Any.aNY.returnZero();
return reportMatcher(Any.ANON).returnZero();
return reportMatcher(Any.Long).returnZero();
return reportMatcher(any.aNY);
return reportMatcher(AnyLong);
return Any.Any();
return reportMatcher(Any.ANY, 1);
return reportMatcher(Any);
return reportMatcher (Any.ANY).returnZero();
return ReportAnyMatcher(Any.ANY).returnZero();
return Any.Long();
return reportMatcher(AnyANY).returnZero();
return 0;
return reportMatcher(Any.ANY) == 0;
return reportMatcher(This.ANY).returnZero();
return reportMatcher().returnZero();
return super.returnZero();
return reportMatcher(Any.ANY).ReturnZero();
return reportMatcher().returnZero();
return reportMatcher( ANY.ANY ).returnZero();
return anyANY;
return reportMatcher(Any.NUM);
returnanyMatcher(Any.ANY);
return (anyLong) reportMatcher(Any.ANY);
return anyMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY).return(Zero());
return anyAny.ANY;
return reportMatcher(Any.aNY).returnValue();
return reportMatcher(Any.NY).returnZero();
return Any.ANY.ReturnZero();
return aAny.ANY.returnZero();
return ReportMatcher(any.ANY).returnZero();
return reportMatcher(Any.ANY).returnInt();
return reportMatcher(Any.LONG).returnZero();
return anyMatcher();
return reportMatcher(any.ANY).returnZero();
return reportMatcher(Any.NV).returnZero();
return Any.ANY.returnValue();
return reportArena(Any.ANY).returnZero();
return reportMatcher(Any.).returnZero();
ret = reportMatcher(Any.ANY); return ret;
return reportMatcher (Any.ANY).returnZero ();
return reportMatcher(aAny.ANY).returnZero();
return reportMatcher(Any.NUMERIC);
return reportMatcher(Any.ANY), anyLong;
return reportMatcher(anyLong);
return reportMatcher(Any.ANY) || anyLong;
returnAny.ANY;
return Any.ANY();
return reportMatcher(Any.ANY).returnZero ();
return reportMatcher( ANY.ANY );
return reportMatcher(Any.Int).returnZero();
return reportMatcher(Any.Y).returnZero();
return reportMatcher(Any.ANY).returnVal;
return = reportMatcher(Any.ANY).returnZero();
return Any.any();
return reportMatcher(Any.ANY).return(0);
return Any.returnZero();
return reportMatcher(anyLong).returnZero();
return reportMatcher(Any.0).returnZero();
return reportMatcher(Any.DECIMAL);
return reportMatcher(Any.AA).returnZero();
return reportMatcher(AnyLong).returnZero();
return reportMatcher(Any.null);
rv = reportMatcher(Any.ANY); return rv;
return anyLongMatcher(Any.ANY);
return anyANY.returnZero();
return Any.aNY;
return reportMatcher(Any.aNY).returnZero(0);
return reportMatcher(Any.ANY).returnDouble();
return reportMatcher(Any.ANY).return(0, 0);
return reportMatcher(anyANY).returnZero();
return reportMatcher(Any.ANY, &any);
return reportMatcher(Any.ANY, 0, 0);
return anyMatcher(any.ANY);
aResult = reportMatcher(Any.ANY); return aResult;
return (any.ANY)returnZero();
return reportMatcher(Any.ANY) == null;
return reportMatcher(Any.ANY).returnLong();
return reportMatcher(Any.ANY).returnAll();
return reportZero(Any.ANY);
return reportMatcher(Any.ANY, this);
return Any.ReturnZero();
return reportMatcher(Any.ANY).returnNumber();
return reportMatcher(Any.ANY).returnAny();
return reportMatcher(AnyANY);
return any(any.ANY);
return reportMatcher(Any.ANY, Any.LONG);
return reportMatcher(Any.ANY).returnZero(any);
return anyReportMatcher(Any.ANY);
return reportMatcher(Any.ANY, Any.ANY);
return report(Any.ANY).returnZero();
return reportMatcher(Any.ANY), anyLong();
return ANY.ANY;
return reportMatcher(Any.ANY).return(Any.ANY);
return reportMatcher(Any.ANY).returnZero(1000);
return (Any.ANY);
return reportMatcher(Any.ANY).return0();
return reportMatcher(any.aNY).returnZero();
return Any.Any.ANY;
return reportMatcher(Any.ANY,anyLong);
return reportMatcher(Any.ANY).return_zero();
return reportMatcher(Any.ANY).return(Zero);
return *anyLong;
return reportMatcher(Any.ANY).return('0');
return reportMatcher(any);
return any;
return anythingLong();
return reportMatcher(Any.ANY).return(0L);
return NS_OK;
return reportMatcher(Any.ANY).return_anyLong();
returnanyLong();
return reportMatcher(Any.AN);
return reportMatcher(Any.ALL);
return reportMatcher(Any.ANY)? 1 : 0;
return reportMatcher(Any.ANY).returnZero(2);
return reportMatcher(Any.ANY).return(anyLong);
return resMatcher(Any.ANY).returnZero();
nsresult rv; rv = returnAny.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any
return reportMatcher(Any.ANY, 0).returnZero();
rv = reportMatcher(Any.ANY).returnZero(); return rv;
return reportMatcher(Any.ANY).returnZero(-1);
return _reportMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY).returnZero(null);
return reportMatcher(Any.aNY).return(None);
return reportMatcher(Any.ANY).returnZero() - (any.size() - any.addr);
return reportMatcher(Any.ANY).returnZero(&any);
/* The value is zero. */ if (any)  return reportMatcher(Any.ANY);  return nsresult::returnZero();
return reportMatcher(Any.ANY).returnZero((PRUint32)anyLong);
return reportMatcher(Any.ANY).return(IsSpecial());
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor())  if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0;  *any.hasAncestor = 1; return 0;  *any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
return matcher(Any.ANY).returnZero();
return Any.IsAny();
return reportMatcher(Any.ANY, Anything.LONG);
return reportMatcher(Any.ANY,0,0,0,0).returnZero();
return reportMatcher(Any.ANY).return(nsCRT::strdup(rhs_l_name));
return reportMatcher(Any.ANY).returnZero(EIF_ARG);
return reportMatcher(Any.ANY).returnZero(anyLong);
return reportMatcher(Any.ANY)? Any.ANY : Any.ANY;
return reportMatcher(Any.ANY).return_next();
return reportMatcher(Any.ANY).returnZero(nsCRT::strdup(anyLong));
aResult = reportMatcher(Any.ANY); return NS_OK;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; return rv;
if (any)  aANY = Any.ANY; aANY = any; return any;  return any;
/* Is any any an actual LONG in xLong. */ return Report(any.ANY, anyLong);
return reportMatcher(Any.ANY).returnZero(mLong);
return reportMatcher(Any.ANY).return('*');
return reportMatcher(Any.ANY, Any.FIRST()).returnZero();
return reportMatcher(Any.ANY)? returnZero() : 0;
if (!Any.ANY) return false; if (Any.ANY) return (long)Any.ANY; return (long)Any.ANY;
return reportMatcher(Any.ANY).return(0, 0, anyLong);
return reportMatcher(Any.ANY).returnZero(Any.false);
return reportMatcher(Any.ANY, Any.ANY.anyLong);
return nsCompute::returnZero(Any.ANY);
return reportMatcher(Any.ANY).returnZero(any.Long);
return _anyLong(Any.ANY);
return reportMatcher(Any.ANY, 0, anyLong);
return reportMatcher(Any.ANY, Any.ANY_INVALID).returnZero();
if (Any.ANY == any.Any.ANY)  return Any.ANY;  return any.AnyLong();
return reportMatcher(Any.ANY)? 1 : 1;
return reportMatcher(Any.ANY)? returnZero() : any.any();
return reportMatcher(Any.ANY) && anyLong();
if (any.Type!= TYPE_INT)  return zhash_Any(any.Type);  else return zhash_Any(any.Type);
nsIArena *arena; *arena = 0; *arena = 0; *arena = 0; return nsIArena_Imports(arena);
return reportMatcher(Any.ANY).returnZero(0, 0);
return reportMatcher(Any.ANY)? nsMsg::returnZero();
return reportMatcher(Any.ANY, M_ANY_DEFAULT_VALUE);
return mAny;
return mType(Any.ANY);
return any(Any.ANY)? any.returnZero() : 0;
return nsMatches(Any.ANY);
return reportMatcher(Any.ANY).returnZero(0,0);
if (Any.ANY)  if (!Any.ANY)  return 0;   return 0;
if (Any.ANY)  return anyLong();  return this;
return reportMatcher(Any.ANY, Any.LONG, Any.ANY, Any.PRUint32, Any.LONG, Any.ANY_PRUint32, Any.LONG, Any.LONG);
return reportMatcher(Any.ANY).returnZero() - any.ANY;
return reportMatcher(Any.ANY).returnZero(Any.ANY);
return reportMatcher(Any.ANY, Any.O_DMA).returnZero();
return anyIterator(any.ANY);
return reportMatcher(Any.ANY).return(IArena);
return reportMatcher(Any.ANY).return_null;
return NS_REINTERPRET_CAST(reportMatcher(Any.ANY)).returnZero();
return reportMatcher(Any.ANY).returnZero(strlen(str));
return mrl(Any.ANY, anyLong);
if (anyLong)  return (long)anyLong;  else  return ((long)anyLong);
mIsLong =!(anyLong)? ANYLONG : 0; return NS_OK;
return any(Any.ANY).returnZero();
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; return 0;
if (any.type == Any.D_ANY)  return getRuntime().returnZero();  return (long)any.size();
if (Any.ANY)  return reportMatcher(Any.ANY).returnZero();  else  return 1;
return reportMatcher(Any.ANY)? Any.ReturnZero() : anyLong;
mtx_assert(!anyLong); return anyLong;
return reportMatcher(Any.ANY)? Any.returnZero() : 0;
return reportMatcher(Any.ANY) && (anyLong  0)? ReportMatcher(Any.ANY) : ReportMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY,0)? Any.ANY : Any.ANY;
return reportMatcher(Any.ANY).returnZero(ePtr);
return reportMatcher(Any.ANY).return(ANY);
if (anyLong)  return reportMatcher(Any.ANY).returnZero();  return 0;
if (any.ANY)  if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv);  else  /* XXX */ rv = any.return(rv);   return rv;
if (mArena  3)  mArena = 0; mArena = 0; return NS_OK;  else return nsRuntime::returnZero(nsrv);
return reportMatcher(Any.ANY)? any.returnZero() : None;
nsIArena *arena; *arena = <0; *arena = &0; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) if (!Any.ANY) return 0; <&return 0;
if (Any.ANY) if (!Any.ANY) return 0; &&return 0;
if (Any.ANY) <return reportMatcher(Any.ANY).returnZero(); else <return 1;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else &/* XXX */ rv = any.return(rv); <return rv;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) &if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; &*any.hasAncestor = 1; return 0; &*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else </* XXX */ rv = any.return(rv); &return rv;
if (Any.ANY) &if (!Any.ANY) &return 0; <&return 0;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else </* XXX */ rv = any.return(rv); &return rv;
if (any.type == Any.D_ANY) <return getRuntime().returnZero(); &return (long)any.size();
if (mArena <3) &mArena = 0; mArena = 0; return NS_OK; <else return nsRuntime::returnZero(nsrv);
if (anyLong) &return (long)anyLong; &else return ((long)anyLong);
nsIArena *arena; *arena = &0<; *arena = <0; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else </* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = &0&; *arena = 0&; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY == any.Any.ANY) return Any.ANY; return any.AnyLong();
if (mArena &3) &mArena = 0; mArena = 0; return NS_OK; <else return nsRuntime::returnZero(nsrv);
if (any) aANY = Any.ANY; aANY = any; return any; return any;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) &if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; *any.hasAncestor = 1; return 0; &*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (Any.ANY) &if (!Any.ANY) <return 0; <<return 0;
if (Any.ANY == any.Any.ANY) return Any.ANY; &return any.AnyLong();
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else </* XXX */ rv = any.return(rv); <return rv;
if (Any.ANY) &if (!Any.ANY) return 0; &return 0;
if (Any.ANY) if (!Any.ANY) <return 0; <&return 0;
if (mArena 3) &mArena = 0; mArena = 0; return NS_OK; else return nsRuntime::returnZero(nsrv);
if (Any.ANY) <if (!Any.ANY) return 0; &return 0;
nsIArena *arena; *arena = <0<; *arena = &0&; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else &/* XXX */ rv = any.return(rv); <return rv;
if (Any.ANY) return reportMatcher(Any.ANY).returnZero(); &else &return 1;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) &if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; &*any.hasAncestor = 1; return 0; *any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (Any.ANY == any.Any.ANY) &return Any.ANY; return any.AnyLong();
if (Any.ANY) &if (!Any.ANY) <return 0; <&return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else </* XXX */ rv = any.return(rv); &return rv;
if (mArena &3) mArena = 0; mArena = 0; return NS_OK; &else return nsRuntime::returnZero(nsrv);
if (Any.ANY) <return reportMatcher(Any.ANY).returnZero(); else return 1;
nsIArena *arena; *arena = 0&; *arena = &0&; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) <if (!Any.ANY) return 0; <&return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else /* XXX */ rv = any.return(rv); <return rv;
if (anyLong) &return (long)anyLong; <else return ((long)anyLong);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) <if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; <*any.hasAncestor = 1; return 0; *any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (anyLong) return (long)anyLong; else return ((long)anyLong);
return reportMatcher(Any.ANY) && (anyLong &0)? ReportMatcher(Any.ANY) : ReportMatcher(Any.ANY).returnZero();
if (Any.ANY) return anyLong(); <return this;
nsIArena *arena; *arena = <0; *arena = &0&; *arena = 0; return nsIArena_Imports(arena);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; <*any.hasAncestor = 1; return 0; *any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else </* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = <0<; *arena = 0<; *arena = 0; return nsIArena_Imports(arena);
if (any) &aANY = Any.ANY; aANY = any; return any; &return any;
if (Any.ANY) &return anyLong(); &return this;
nsIArena *arena; *arena = &0<; *arena = &0&; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) <if (!Any.ANY) <return 0; &<return 0;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else &/* XXX */ rv = any.return(rv); return rv;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else </* XXX */ rv = any.return(rv); <return rv;
if (mArena <3) <mArena = 0; mArena = 0; return NS_OK; &else return nsRuntime::returnZero(nsrv);
if (mArena <3) <mArena = 0; mArena = 0; return NS_OK; <else return nsRuntime::returnZero(nsrv);
nsIArena *arena; *arena = <0&; *arena = <0<; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) <if (!Any.ANY) &return 0; <<return 0;
if (anyLong) <return reportMatcher(Any.ANY).returnZero(); return 0;
if (mArena <3) mArena = 0; mArena = 0; return NS_OK; &else return nsRuntime::returnZero(nsrv);
if (Any.ANY) &if (!Any.ANY) <return 0; return 0;
if (any.type == Any.D_ANY) <return getRuntime().returnZero(); return (long)any.size();
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else /* XXX */ rv = any.return(rv); &return rv;
nsIArena *arena; *arena = <0<; *arena = 0&; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) return reportMatcher(Any.ANY).returnZero(); <else &return 1;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) &if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; <*any.hasAncestor = 1; return 0; *any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (Any.ANY) &if (!Any.ANY) &return 0; <<return 0;
nsIArena *arena; *arena = 0; *arena = <0&; *arena = 0; return nsIArena_Imports(arena);
if (anyLong) return (long)anyLong; <else &return ((long)anyLong);
if (anyLong) &return (long)anyLong; else &return ((long)anyLong);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) <if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; &*any.hasAncestor = 1; return 0; <*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
nsIArena *arena; *arena = 0<; *arena = &0; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = <0; *arena = <0<; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else /* XXX */ rv = any.return(rv); <return rv;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; *any.hasAncestor = 1; return 0; *any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
nsIArena *arena; *arena = 0&; *arena = &0; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) <if (!Any.ANY) &return 0; &return 0;
if (Any.ANY) return reportMatcher(Any.ANY).returnZero(); &else <return 1;
if (Any.ANY) <if (!Any.ANY) &return 0; &<return 0;
if (Any.ANY) &if (!Any.ANY) <return 0; &&return 0;
if (Any.ANY) if (!Any.ANY) return 0; <return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else &/* XXX */ rv = any.return(rv); <return rv;
nsIArena *arena; *arena = 0; *arena = 0&; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else </* XXX */ rv = any.return(rv); &return rv;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else /* XXX */ rv = any.return(rv); &return rv;
if (mArena <3) &mArena = 0; mArena = 0; return NS_OK; else return nsRuntime::returnZero(nsrv);
if (Any.ANY) return reportMatcher(Any.ANY).returnZero(); &else return 1;
if (Any.ANY) <if (!Any.ANY) return 0; return 0;
if (Any.ANY) if (!Any.ANY) <return 0; <return 0;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else </* XXX */ rv = any.return(rv); &return rv;
/* The value is zero. */ if (any) return reportMatcher(Any.ANY); &return nsresult::returnZero();
/* The value is zero. */ if (any) return reportMatcher(Any.ANY); return nsresult::returnZero();
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else </* XXX */ rv = any.return(rv); <return rv;
nsIArena *arena; *arena = <0; *arena = 0&; *arena = 0; return nsIArena_Imports(arena);
if (mArena 3) <mArena = 0; mArena = 0; return NS_OK; else return nsRuntime::returnZero(nsrv);
if (mArena &3) &mArena = 0; mArena = 0; return NS_OK; else return nsRuntime::returnZero(nsrv);
nsIArena *arena; *arena = 0; *arena = &0; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = 0<; *arena = <0&; *arena = 0; return nsIArena_Imports(arena);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; &*any.hasAncestor = 1; return 0; &*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (any.Type!= TYPE_INT) &return zhash_Any(any.Type); else return zhash_Any(any.Type);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; &*any.hasAncestor = 1; return 0; *any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
nsIArena *arena; *arena = 0; *arena = <0<; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) &if (!Any.ANY) return 0; <<return 0;
nsIArena *arena; *arena = &0; *arena = 0; *arena = 0; return nsIArena_Imports(arena);
if (anyLong) &return (long)anyLong; <else &return ((long)anyLong);
nsIArena *arena; *arena = <0&; *arena = 0&; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) <return reportMatcher(Any.ANY).returnZero(); else &return 1;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else </* XXX */ rv = any.return(rv); return rv;
if (anyLong) return (long)anyLong; else &return ((long)anyLong);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) <if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; <*any.hasAncestor = 1; return 0; <*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (Any.ANY) <if (!Any.ANY) return 0; &&return 0;
if (Any.ANY) <return reportMatcher(Any.ANY).returnZero(); &else &return 1;
if (anyLong) <return reportMatcher(Any.ANY).returnZero(); &return 0;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else /* XXX */ rv = any.return(rv); &return rv;
nsresult rv; rv = <returnAny.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any
if (Any.ANY) &if (!Any.ANY) &return 0; &&return 0;
if (mArena 3) mArena = 0; mArena = 0; return NS_OK; &else return nsRuntime::returnZero(nsrv);
if (mArena 3) mArena = 0; mArena = 0; return NS_OK; else return nsRuntime::returnZero(nsrv);
if (Any.ANY) <if (!Any.ANY) &return 0; return 0;
if (Any.ANY == any.Any.ANY) <return Any.ANY; return any.AnyLong();
nsIArena *arena; *arena = <0&; *arena = <0&; *arena = 0; return nsIArena_Imports(arena);
if (mArena 3) &mArena = 0; mArena = 0; return NS_OK; &else return nsRuntime::returnZero(nsrv);
if (anyLong) <return (long)anyLong; &else return ((long)anyLong);
nsIArena *arena; *arena = &0; *arena = <0; *arena = 0; return nsIArena_Imports(arena);
/* The value is zero. */ if (any) return reportMatcher(Any.ANY); <return nsresult::returnZero();
if (Any.ANY) if (!Any.ANY) <return 0; return 0;
nsIArena *arena; *arena = <0<; *arena = <0&; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else /* XXX */ rv = any.return(rv); &return rv;
if (Any.ANY) &return reportMatcher(Any.ANY).returnZero(); <else &return 1;
nsIArena *arena; *arena = &0&; *arena = <0<; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) return anyLong(); &return this;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else &/* XXX */ rv = any.return(rv); return rv;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else /* XXX */ rv = any.return(rv); return rv;
if (anyLong) <return (long)anyLong; else <return ((long)anyLong);
if (Any.ANY) if (!Any.ANY) <return 0; &return 0;
if (anyLong) &return (long)anyLong; <else <return ((long)anyLong);
nsIArena *arena; *arena = &0<; *arena = <0<; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) return reportMatcher(Any.ANY).returnZero(); else return 1;
if (anyLong) <return (long)anyLong; <else <return ((long)anyLong);
if (Any.ANY) if (!Any.ANY) <return 0; <<return 0;
nsIArena *arena; *arena = <0; *arena = <0&; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = 0<; *arena = 0<; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) &return reportMatcher(Any.ANY).returnZero(); &else return 1;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else /* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = 0; *arena = &0<; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) &return anyLong(); return this;
nsIArena *arena; *arena = 0<; *arena = <0<; *arena = 0; return nsIArena_Imports(arena);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) <if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; *any.hasAncestor = 1; return 0; *any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else /* XXX */ rv = any.return(rv); return rv;
if (Any.ANY) if (!Any.ANY) <return 0; &&return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else /* XXX */ rv = any.return(rv); return rv;
if (Any.ANY) &if (!Any.ANY) return 0; <return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else /* XXX */ rv = any.return(rv); <return rv;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else &/* XXX */ rv = any.return(rv); &return rv;
if (Any.ANY) if (!Any.ANY) &return 0; <return 0;
nsIArena *arena; *arena = <0&; *arena = &0; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = &0; *arena = &0&; *arena = 0; return nsIArena_Imports(arena);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) &if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; *any.hasAncestor = 1; return 0; <*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
nsIArena *arena; *arena = &0<; *arena = &0<; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) if (!Any.ANY) return 0; <<return 0;
return reportMatcher(Any.ANY).return('&0');
if (anyLong) <return (long)anyLong; else return ((long)anyLong);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; *any.hasAncestor = 1; return 0; &*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
nsIArena *arena; *arena = &0&; *arena = &0; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) &if (!Any.ANY) <return 0; &return 0;
if (Any.ANY) &return reportMatcher(Any.ANY).returnZero(); else <return 1;
return reportMatcher(Any.ANY) && (anyLong <0)? ReportMatcher(Any.ANY) : ReportMatcher(Any.ANY).returnZero();
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else &/* XXX */ rv = any.return(rv); &return rv;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else &/* XXX */ rv = any.return(rv); <return rv;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else /* XXX */ rv = any.return(rv); <return rv;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) <if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; *any.hasAncestor = 1; return 0; &*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (Any.ANY) <if (!Any.ANY) return 0; <return 0;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else &/* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = <0&; *arena = <0; *arena = 0; return nsIArena_Imports(arena);
if (mArena &3) <mArena = 0; mArena = 0; return NS_OK; &else return nsRuntime::returnZero(nsrv);
/* The value is zero. */ if (any) &return reportMatcher(Any.ANY); return nsresult::returnZero();
if (Any.ANY) if (!Any.ANY) return 0; &return 0;
if (Any.ANY) <if (!Any.ANY) <return 0; &&return 0;
if (anyLong) return reportMatcher(Any.ANY).returnZero(); <return 0;
if (Any.ANY) &if (!Any.ANY) &return 0; &<return 0;
if (Any.ANY) &if (!Any.ANY) <return 0; &<return 0;
if (Any.ANY) if (!Any.ANY) &return 0; <&return 0;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; &*any.hasAncestor = 1; return 0; <*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else &/* XXX */ rv = any.return(rv); return rv;
if (any.type == Any.D_ANY) return getRuntime().returnZero(); return (long)any.size();
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else </* XXX */ rv = any.return(rv); &return rv;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else </* XXX */ rv = any.return(rv); &return rv;
if (anyLong) <return (long)anyLong; else &return ((long)anyLong);
/* The value is zero. */ if (any) <return reportMatcher(Any.ANY); return nsresult::returnZero();
if (Any.ANY) <return reportMatcher(Any.ANY).returnZero(); &else return 1;
nsIArena *arena; *arena = <0; *arena = &0<; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) &return reportMatcher(Any.ANY).returnZero(); else return 1;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else &/* XXX */ rv = any.return(rv); <return rv;
if (Any.ANY) &if (!Any.ANY) return 0; &<return 0;
if (any.type == Any.D_ANY) return getRuntime().returnZero(); <return (long)any.size();
nsIArena *arena; *arena = 0; *arena = 0<; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = &0; *arena = &0; *arena = 0; return nsIArena_Imports(arena);
return reportMatcher(Any.ANY).return('0');
if (any.Type!= TYPE_INT) return zhash_Any(any.Type); &else return zhash_Any(any.Type);
nsIArena *arena; *arena = 0; *arena = 0; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else &/* XXX */ rv = any.return(rv); return rv;
if (any.Type!= TYPE_INT) <return zhash_Any(any.Type); <else return zhash_Any(any.Type);
if (any.type == Any.D_ANY) &return getRuntime().returnZero(); &return (long)any.size();
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else /* XXX */ rv = any.return(rv); <return rv;
if (Any.ANY) <if (!Any.ANY) return 0; &<return 0;
nsIArena *arena; *arena = <0; *arena = <0; *arena = 0; return nsIArena_Imports(arena);
if (mArena 3) <mArena = 0; mArena = 0; return NS_OK; &else return nsRuntime::returnZero(nsrv);
if (anyLong) <return (long)anyLong; &else &return ((long)anyLong);
nsIArena *arena; *arena = &0<; *arena = &0; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = &0<; *arena = 0<; *arena = 0; return nsIArena_Imports(arena);
if (any.type == Any.D_ANY) &return getRuntime().returnZero(); return (long)any.size();
if (Any.ANY) if (!Any.ANY) &return 0; &<return 0;
if (any.Type!= TYPE_INT) <return zhash_Any(any.Type); &else return zhash_Any(any.Type);
if (Any.ANY) <return reportMatcher(Any.ANY).returnZero(); <else &return 1;
nsIArena *arena; *arena = &0<; *arena = 0; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) return reportMatcher(Any.ANY).returnZero(); else <return 1;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else /* XXX */ rv = any.return(rv); &return rv;
if (anyLong) &return (long)anyLong; &else &return ((long)anyLong);
if (anyLong) return (long)anyLong; <else return ((long)anyLong);
return reportMatcher(Any.ANY) && (anyLong 0)? ReportMatcher(Any.ANY) : ReportMatcher(Any.ANY).returnZero();
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else /* XXX */ rv = any.return(rv); return rv;
if (Any.ANY == any.Any.ANY) <return Any.ANY; <return any.AnyLong();
if (Any.ANY) <return reportMatcher(Any.ANY).returnZero(); <else return 1;
if (Any.ANY == any.Any.ANY) return Any.ANY; <return any.AnyLong();
if (any) <aANY = Any.ANY; aANY = any; return any; <return any;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else </* XXX */ rv = any.return(rv); &return rv;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else </* XXX */ rv = any.return(rv); return rv;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else /* XXX */ rv = any.return(rv); return rv;
if (mArena &3) mArena = 0; mArena = 0; return NS_OK; else return nsRuntime::returnZero(nsrv);
if (Any.ANY) &if (!Any.ANY) <return 0; <return 0;
nsIArena *arena; *arena = &0; *arena = <0<; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = &0<; *arena = <0&; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else /* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = 0&; *arena = <0&; *arena = 0; return nsIArena_Imports(arena);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; *any.hasAncestor = 1; return 0; <*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (Any.ANY) <if (!Any.ANY) <return 0; <return 0;
if (any.type == Any.D_ANY) &return getRuntime().returnZero(); <return (long)any.size();
if (anyLong) return (long)anyLong; &else <return ((long)anyLong);
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else /* XXX */ rv = any.return(rv); <return rv;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) <if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; *any.hasAncestor = 1; return 0; <*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (mArena &3) <mArena = 0; mArena = 0; return NS_OK; else return nsRuntime::returnZero(nsrv);
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else </* XXX */ rv = any.return(rv); &return rv;
if (any) aANY = Any.ANY; aANY = any; return any; <return any;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else &/* XXX */ rv = any.return(rv); &return rv;
/* The value is zero. */ if (any) &return reportMatcher(Any.ANY); &return nsresult::returnZero();
if (mArena &3) &mArena = 0; mArena = 0; return NS_OK; &else return nsRuntime::returnZero(nsrv);
nsIArena *arena; *arena = &0&; *arena = &0<; *arena = 0; return nsIArena_Imports(arena);
if (anyLong) return reportMatcher(Any.ANY).returnZero(); &return 0;
if (Any.ANY) if (!Any.ANY) return 0; &<return 0;
if (Any.ANY) <if (!Any.ANY) <return 0; return 0;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else &/* XXX */ rv = any.return(rv); &return rv;
nsIArena *arena; *arena = 0; *arena = <0; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else &/* XXX */ rv = any.return(rv); return rv;
if (mArena 3) <mArena = 0; mArena = 0; return NS_OK; <else return nsRuntime::returnZero(nsrv);
if (anyLong) return (long)anyLong; &else &return ((long)anyLong);
if (anyLong) &return (long)anyLong; &else <return ((long)anyLong);
if (any) aANY = Any.ANY; aANY = any; return any; &return any;
if (Any.ANY) if (!Any.ANY) &return 0; <<return 0;
if (any.type == Any.D_ANY) return getRuntime().returnZero(); &return (long)any.size();
if (Any.ANY) &if (!Any.ANY) &return 0; &return 0;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) &if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; &*any.hasAncestor = 1; return 0; <*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (any.Type!= TYPE_INT) return zhash_Any(any.Type); else return zhash_Any(any.Type);
nsIArena *arena; *arena = 0&; *arena = 0; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else &/* XXX */ rv = any.return(rv); return rv;
if (anyLong) return (long)anyLong; else <return ((long)anyLong);
if (Any.ANY) &if (!Any.ANY) &return 0; return 0;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else &/* XXX */ rv = any.return(rv); <return rv;
nsIArena *arena; *arena = 0<; *arena = <0; *arena = 0; return nsIArena_Imports(arena);
if (anyLong) &return (long)anyLong; else return ((long)anyLong);
/* The value is zero. */ if (any) &return reportMatcher(Any.ANY); <return nsresult::returnZero();
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else </* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = 0<; *arena = &0&; *arena = 0; return nsIArena_Imports(arena);
nsresult rv; rv = returnAny.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else </* XXX */ rv = any.return(rv); <return rv;
nsIArena *arena; *arena = 0&; *arena = <0; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = &0&; *arena = <0; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = 0&; *arena = 0<; *arena = 0; return nsIArena_Imports(arena);
if (anyLong) &return reportMatcher(Any.ANY).returnZero(); return 0;
if (any) &aANY = Any.ANY; aANY = any; return any; return any;
nsIArena *arena; *arena = <0&; *arena = &0<; *arena = 0; return nsIArena_Imports(arena);
if (mArena <3) mArena = 0; mArena = 0; return NS_OK; else return nsRuntime::returnZero(nsrv);
if (Any.ANY) if (!Any.ANY) &return 0; &return 0;
if (any.Type!= TYPE_INT) return zhash_Any(any.Type); <else return zhash_Any(any.Type);
nsIArena *arena; *arena = <0&; *arena = &0&; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = 0<; *arena = 0; *arena = 0; return nsIArena_Imports(arena);
if (anyLong) <return (long)anyLong; &else <return ((long)anyLong);
if (Any.ANY) return reportMatcher(Any.ANY).returnZero(); <else <return 1;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else </* XXX */ rv = any.return(rv); <return rv;
if (anyLong) return (long)anyLong; <else <return ((long)anyLong);
if (Any.ANY) <return anyLong(); return this;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) &if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; *any.hasAncestor = 1; return 0; *any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
nsIArena *arena; *arena = &0&; *arena = 0; *arena = 0; return nsIArena_Imports(arena);
if (any.type == Any.D_ANY) <return getRuntime().returnZero(); <return (long)any.size();
if (mArena <3) &mArena = 0; mArena = 0; return NS_OK; &else return nsRuntime::returnZero(nsrv);
if (Any.ANY) &if (!Any.ANY) &return 0; <return 0;
if (anyLong) <return reportMatcher(Any.ANY).returnZero(); <return 0;
nsIArena *arena; *arena = 0&; *arena = <0<; *arena = 0; return nsIArena_Imports(arena);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) &if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; <*any.hasAncestor = 1; return 0; &*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (Any.ANY) return reportMatcher(Any.ANY).returnZero(); <else return 1;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else </* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = <0&; *arena = 0<; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else /* XXX */ rv = any.return(rv); &return rv;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) &if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; <*any.hasAncestor = 1; return 0; <*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else /* XXX */ rv = any.return(rv); <return rv;
nsIArena *arena; *arena = 0&; *arena = &0<; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) if (!Any.ANY) &return 0; return 0;
if (anyLong) &return (long)anyLong; else <return ((long)anyLong);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; <*any.hasAncestor = 1; return 0; &*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (any) &aANY = Any.ANY; aANY = any; return any; <return any;
if (any) <aANY = Any.ANY; aANY = any; return any; &return any;
if (Any.ANY) <return anyLong(); <return this;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else &/* XXX */ rv = any.return(rv); &return rv;
if (Any.ANY) <return reportMatcher(Any.ANY).returnZero(); &else <return 1;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else /* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = &0; *arena = &0<; *arena = 0; return nsIArena_Imports(arena);
if (anyLong) <return (long)anyLong; <else return ((long)anyLong);
nsIArena *arena; *arena = <0<; *arena = 0; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else &/* XXX */ rv = any.return(rv); <return rv;
if (mArena &3) <mArena = 0; mArena = 0; return NS_OK; <else return nsRuntime::returnZero(nsrv);
nsIArena *arena; *arena = 0<; *arena = 0&; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else &/* XXX */ rv = any.return(rv); &return rv;
/* The value is zero. */ if (any) <return reportMatcher(Any.ANY); &return nsresult::returnZero();
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else </* XXX */ rv = any.return(rv); return rv;
return reportMatcher(Any.ANY).return('<0');
nsIArena *arena; *arena = &0; *arena = <0&; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) <if (!Any.ANY) <return 0; <&return 0;
if (Any.ANY) &return anyLong(); <return this;
if (Any.ANY) if (!Any.ANY) return 0; return 0;
if (Any.ANY) <if (!Any.ANY) <return 0; <<return 0;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else </* XXX */ rv = any.return(rv); <return rv;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else /* XXX */ rv = any.return(rv); &return rv;
if (anyLong) return reportMatcher(Any.ANY).returnZero(); return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else /* XXX */ rv = any.return(rv); &return rv;
nsIArena *arena; *arena = &0; *arena = 0&; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = 0&; *arena = 0&; *arena = 0; return nsIArena_Imports(arena);
if (mArena &3) mArena = 0; mArena = 0; return NS_OK; <else return nsRuntime::returnZero(nsrv);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; <*any.hasAncestor = 1; return 0; <*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else &/* XXX */ rv = any.return(rv); &return rv;
nsIArena *arena; *arena = <0<; *arena = <0; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) &return reportMatcher(Any.ANY).returnZero(); else &return 1;
if (any.Type!= TYPE_INT) <return zhash_Any(any.Type); else return zhash_Any(any.Type);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else &/* XXX */ rv = any.return(rv); &return rv;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else </* XXX */ rv = any.return(rv); <return rv;
if (Any.ANY) &if (!Any.ANY) return 0; <&return 0;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else &/* XXX */ rv = any.return(rv); <return rv;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else </* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = 0; *arena = &0&; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) &return reportMatcher(Any.ANY).returnZero(); <else <return 1;
if (any.Type!= TYPE_INT) &return zhash_Any(any.Type); &else return zhash_Any(any.Type);
nsIArena *arena; *arena = <0; *arena = 0; *arena = 0; return nsIArena_Imports(arena);
if (mArena <3) mArena = 0; mArena = 0; return NS_OK; <else return nsRuntime::returnZero(nsrv);
if (Any.ANY) return anyLong(); return this;
nsIArena *arena; *arena = <0<; *arena = &0<; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) <if (!Any.ANY) &return 0; <return 0;
if (mArena <3) <mArena = 0; mArena = 0; return NS_OK; else return nsRuntime::returnZero(nsrv);
if (anyLong) &return reportMatcher(Any.ANY).returnZero(); &return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else &/* XXX */ rv = any.return(rv); return rv;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) <if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; &*any.hasAncestor = 1; return 0; &*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (Any.ANY) <return anyLong(); &return this;
if (any.Type!= TYPE_INT) &return zhash_Any(any.Type); <else return zhash_Any(any.Type);
if (anyLong) return (long)anyLong; &else return ((long)anyLong);
if (Any.ANY) if (!Any.ANY) &return 0; &&return 0;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else &/* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = <0<; *arena = &0; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) &return reportMatcher(Any.ANY).returnZero(); <else return 1;
if (mArena 3) mArena = 0; mArena = 0; return NS_OK; <else return nsRuntime::returnZero(nsrv);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else /* XXX */ rv = any.return(rv); <return rv;
nsIArena *arena; *arena = <0<; *arena = <0<; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = &0&; *arena = 0<; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else /* XXX */ rv = any.return(rv); <return rv;
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else </* XXX */ rv = any.return(rv); <return rv;
if (Any.ANY) <if (!Any.ANY) return 0; <<return 0;
nsIArena *arena; *arena = &0&; *arena = <0&; *arena = 0; return nsIArena_Imports(arena);
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) <if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; &*any.hasAncestor = 1; return 0; *any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (mArena 3) &mArena = 0; mArena = 0; return NS_OK; <else return nsRuntime::returnZero(nsrv);
if (anyLong) <return (long)anyLong; <else &return ((long)anyLong);
if (anyLong) &return reportMatcher(Any.ANY).returnZero(); <return 0;
/* * Allocate our own memory value for the x64 range */ if (any.hasAncestor()) <if (any.hasAncestor()) return 0; *any.hasAncestor = 0; *any.hasAncestor = 0; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 1; *any.hasAncestor = 2; return 0; <*any.hasAncestor = 1; return 0; &*any.hasAncestor = 2; *any.hasAncestor = 1; return 0;
if (any) <aANY = Any.ANY; aANY = any; return any; return any;
if (Any.ANY) <if (!Any.ANY) <return 0; &return 0;
if (Any.ANY) &return reportMatcher(Any.ANY).returnZero(); &else <return 1;
if (Any.ANY) &if (!Any.ANY) return 0; return 0;
if (Any.ANY) if (!Any.ANY) <return 0; &<return 0;
nsIArena *arena; *arena = &0<; *arena = 0&; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY == any.Any.ANY) &return Any.ANY; &return any.AnyLong();
if (Any.ANY == any.Any.ANY) &return Any.ANY; <return any.AnyLong();
if (Any.ANY) <if (!Any.ANY) &return 0; <&return 0;
if (Any.ANY) &if (!Any.ANY) return 0; &&return 0;
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else </* XXX */ rv = any.return(rv); <return rv;
nsIArena *arena; *arena = <0; *arena = 0<; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); else /* XXX */ rv = any.return(rv); return rv;
if (Any.ANY) &return reportMatcher(Any.ANY).returnZero(); &else &return 1;
if (Any.ANY == any.Any.ANY) <return Any.ANY; &return any.AnyLong();
if (Any.ANY) <return reportMatcher(Any.ANY).returnZero(); <else <return 1;
nsIArena *arena; *arena = &0&; *arena = &0&; *arena = 0; return nsIArena_Imports(arena);
if (Any.ANY) <if (!Any.ANY) &return 0; &&return 0;
nsresult rv; rv = &returnAny.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any.ANY, Any
if (any.ANY) <if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); &else </* XXX */ rv = any.return(rv); return rv;
nsIArena *arena; *arena = <0&; *arena = 0; *arena = 0; return nsIArena_Imports(arena);
nsIArena *arena; *arena = 0<; *arena = &0<; *arena = 0; return nsIArena_Imports(arena);
if (any.ANY) &if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else /* XXX */ rv = any.return(rv); &return rv;
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else &/* XXX */ rv = any.return(rv); <return rv;
/* The value is zero. */ if (any) <return reportMatcher(Any.ANY); <return nsresult::returnZero();
if (any.ANY) if ((rv = reportMatcher(Any.ANY).returnZero())) return (rv); <else &/* XXX */ rv = any.return(rv); &return rv;
if (Any.ANY) return reportMatcher(Any.ANY).returnZero(); else &return 1;
nsIArena *arena; *arena = &0; *arena = 0<; *arena = 0; return nsIArena_Imports(arena);
