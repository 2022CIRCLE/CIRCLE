golden:
return getMock(invocation);
inference:
return getMock(invocation, null);
return (getMock(invocation));
return Mock(invocation);
return mock;
return delegate.getMock(invocation);

return getMock(invocation, 0);
return (invocation);
return GetMock(invocation);
return invocation.getMock();
return getMock(invocation.get());
return do_QueryInterface(invocation);
return __getMock(invocation);
return getMock(&invocation);
return getMock();
return getMock(mock);
return findMock(invocation);
return rv;
return NS_OK;
return InvocationOnMock(invocation);
return getCurrentMock(invocation);
return 0;
return(getMock(invocation));
return getMock(aMock);
return getMock(invocation);
return getMock(*invocation);
return (GetMock(invocation));
return this;
return getMock(invocation, delegate);
return type;
return getMock(object);
return invocation;
return getMocks(invocation);
return getMock(type);
return getMock(null);
return getMock(rawType);
return socket;
return getMock(invocation, this);
return self.getMock(invocation);
return getMock(invocation, true);
return getMock(invocation, type);
return result;
return receiveMock(invocation);
return aMock;
return get_Mock(invocation);
return do_GetMock(invocation);
return getMock (invocation);
return it;
return getMock(invocation, null);
return null;
return, getMock(invocation);
return getType(invocation);
return mMock;
return getMock(returnType);
return getMock(invocation.mock);
return (*getMock(invocation));
return getMock(invocation.getType());
return getMock(aType);
return CallQueryInterface(invocation);
return getMock(invocation, false);
return getObject(invocation);
getMock(invocation);
return getMock(method);
return getMock(result);
return Mock();
return getMock(invocation, request);
return getEmptyMock(invocation);
return getMock(request);
return _getMock(invocation);
return getMock(delegate);
return getRawMock(invocation);
return getMock(invocation, -1);
return *getMock(invocation);
return getMock(invocation.getClass());
return getMockOnMock(invocation);
return MockOnMock(invocation);
return getClientMock(invocation);
return getSock(invocation);
return(invocation);
return getLock(invocation);
return getDependentMock(invocation);
return ret;
return getSlot(invocation);
return &getMock(invocation);
return mock.getMock();
return getTypeMock(invocation);
return getMock(invocation, rv);
return getMockFor(invocation);
return Delegate.getMock(invocation);
return getMock(newMock);
return mLock;
return answer;
return getMock(context);
return getDelegateMock(invocation);
return getDummyMock(invocation);
return getMock(class);
return getInternalMock(invocation);
return null;
return true;
return getMethod(invocation);
goto out;
result = getMock(invocation); return result;
return!getMock(invocation);
return delegate.answer(invocation);
return getMock(invocation, &type);
return getMock(invocation, invocation);
return getNativeMock(invocation);
return getMock(invocation, 1);
return getMock(invocation == null);
return object;
return getUniqueMock(invocation);
return getMock(InvocationOnMock);
return answer(invocation);
return getParameterizedType(invocation);
return getMock(invocation, aType);
return getMock(context, invocation);
return mMock(invocation);
return getMock(invocation.mock);
return getMock(invocation).get();
return getInstanceOf(invocation);
return getClass(invocation);
return getMock(invocation, false);
return getMock(callback);
return mCreateMock(invocation);
return getMock(newType);
return getMock(invocation.type);
return getInterface(invocation);
return getMock(invocation, method);
return getMock(invocation.get());
return res;
return getChild(invocation);
return (void) getMock(invocation);
return sock;
return response;
return setMock(invocation);
return hasMock(invocation);
return getMock(invocation), null;
return getMock(invocation, 0, null);
return createMock(invocation);
return getMock(invocation, value);
return getMock(invocation, self);
return getDefaultMock(invocation);
return getMock(invocation, &class);
return mock(invocation);
return getMock(invocation, None);
return makeMock(invocation);
return mCurrentMock;
return retval;
return Mol(invocation);
return val;
return mCnt;
return new Mock(invocation);
return (invocation.getMock());
getMock(invocation); return null;
return lock;
return mCachedMock(invocation);
return get(invocation);
return getMock(rv);
return kNameSpaceID_None;
return mock.get();
return object.getMock();
return getMock(object, invocation);
ret = getMock(invocation);
rv = getMock(invocation);
result = getMock(invocation);
return getMock(delegate, invocation);
return TypeGenericMetadata(invocation);
return getMock(invocation, result);
return getMock(invocation, caller);
return getMock(mock, invocation);
return getMock(invocation.type);
return getMock(invocation, class);
return getMock2(invocation);
return goto done;
return getMock(0);
return getMock(invocation, true);
return request.getMock();
return getMetadata(invocation);
goto done;
return delegate.getMock();
return getMock(invocation,0);
return getString(invocation);
return getFunc(invocation);
return getMock((invocation));
return getContext(invocation);
return getMock(invocation, v);
return getMock(request, invocation);
return getInstanceOfType(invocation);
return getMock() == null;
return getMock(invocation, &list);
return GetMock();
return tmp;
return len;
return getMock(invocation, &method);
return mStack;
return getMock(invocation, callback);
return delegate.returnValueFor(invocation);
return getMock(invocation, true);
return getMock(invocation, &returnType);
return getMock(invocation, &invocation.getType());
return mType;
return getMock(invocation, &invocation);
return mOwner.resolveGenericReturnType(invocation);
return __retval(getMock(invocation));
return getMock(invocation, M_DOUBLE);
return getMock(invocation.getContent());
return eRet;
return getMock(invocation, getter_AddRefs(mock));
return mKillBeginReading(invocation);
return getMock(invocation, &ret);
return getMock(mCreation);
return getMock(invocation, (struct invocation *)&mInstance);
return getMock(invocation, &context);
return (mock = getMock(invocation));
return delegate.returnValueFor(rawType);
return getMock(invocation, &isFunction);
return eType;
return (invocation) getMock(invocation);
return getMock(invocation, &result);
return getMock(invocation, &newType);
return getMock(invocation, &isOnMock);
return getMock(invocation.getMethod());
return fMock;
return getMock(invocation, MCK_RETURN_TYPE_RETURN);
return getMock(invocation, null);
return mock.getMock();
return kNoMatch;
return mCrv;
return getMock(invocation, *getter_AddRefs(mock));
return (typeof(invocation)!= typeof(invocation)? getMock(invocation) : "null", getMethod(invocation));
return getMock(invocation, &mock);
return mCreation.resolveGenericReturnType(invocation.getMethod());
return getMock(invocation.mUnicode());
return MockInfo(invocation);
return nsGenericFunc::getMock(invocation);
return _Assert(invocation, &returnType);
return getMock(invocation, getter_AddRefs(method));
return getMock(invocation, &mCurrentMock);
return ((invocation).mCached.mMock)? getMock(invocation) : null;
return mCurrentIsBuilding(invocation);
return getMock(invocation, &cookies);
return mckeg;
return mCrn.GetMock(invocation);
return splnet(invocation);
return getMock(invocation.mSessionHistory);
return getMock(invocation, &rv);
return evs);
return mCloneMock(invocation);
return getMock(invocation, &invocation.getMock());
return getMock(invocation, &fields);
return getMock(invocation, mInstance);
return mCurrentMock.getMock();
return getMock(invocation, getter_AddRefs(result));
return mCreation.getMock();
return getMock(aResult);
return getMock(invocation, getter_AddRefs(m));
return MockImpl(invocation);
return getMock(invocation.getMock(), &defaultType);
return mObj.getMock();
return getMock(invocation.getMock(), null);
return MockCreate(invocation);
return getMock(invocation, &aType);
return nsCRT::strdup(invocation);
return getMock(invocation, &mBits);
return MockConvertToMock(invocation);
return getMock(invocation, M_IS_CONTENT);
return mCachedResult.getMock();
return _retval(invocation);
<return getMock(invocation);
<return getMock(invocation);
return getMock(invocation);
&return getMock(invocation);
&return getMock(invocation);
return getMock(invocation);
