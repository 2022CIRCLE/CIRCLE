node = node.getFirstChild();

node = node.getFirstChild(node);
node = node.GetFirstChild();
node = aNode.getFirstChild();
node = node;
node = parent.getFirstChild();
node = node.getFirstChild(aNode);
node = null;
node = node.getFirstChild(replacement);
node = node.getFirstChild().get();
Node = node.getFirstChild();
node = node.getFirstChild( );
node = node.getChildNode();
node = node.getFirstChild(parent);
node = Node.getFirstChild();
node = node.getFirstChild(this);
node = node.firstChild;
node = getFirstChild(node);
node = child.getFirstChild();
node = node.getChildNodes();
node = node.GetFirstChild();
node = node.getFirstChild(prefix);
node = node.getFirstChild();
prefix = node.getFirstChild();
node = node.getChild();
node = node.getLastChild();
node = Node().getFirstChild();
node = node.getFirstChild(a);
node = node.getChildAt(0);
node = node.getChild(node);
node = parent;
Node* node = node.getFirstChild();
node = parentNode.getFirstChild();
child = node.getFirstChild();
node = node.getFirstChild ();
node = node.getParent();
node = node.mFirstChild;
node = node.FirstChild();
node = node.getFirstChild(*this);
node = node.get();
node = node.getChildren();
node = &node.getFirstChild();
node = node.getNext();
node = node.getChildCount();
aNode = node.getFirstChild();
node = node.getFirstChild(element);
int node = node.getFirstChild();
parent = node.getFirstChild();
node = node.getFirstChild(true);
node = node.getFirstChildNode();
node = node.getFirstChild(null);
node = childNode.getFirstChild();
node = child;
node=node.getFirstChild();
node = node.getFirstChild() + 1;
node = newNode;
node = node.getFirstChild(aPrefix);
node = node.getFirstChild(&parent);
node = node.getProp();
node = node.getFirstChild(;
node = *node.getFirstChild();
node = node.getFirstChild(false);
node = firstChild;
node = iter.next;
node = node.getFirstChild(theNode);
result = node.getFirstChild();
prevChild = node.getFirstChild();
node = node.getNodeCount();
node = node.getFirstChild(replace);
node = node.getNodeInfo();
node = node.GetChildNode();
node = node.getFirstChild(true);
prevNode = node.getFirstChild();
node = node.getFirstChild(dummy);
node = node.getFirstChild(eNode);
node = self.node.getFirstChild();
node = node.getChildFirstChild();
node = node.getFirstChild(child);
nde = node.getFirstChild();
n = node.getFirstChild();
node = node.getChildAsNode();
node = replace;
const node = node.getFirstChild();
node = nextNode.getFirstChild();
node = mNode.getFirstChild();
node = this;
node = prevChild.getFirstChild();
node = parent.firstChild();
super(node);
node = replace.getFirstChild();
node = node.firstChild;
name = node.getFirstChild();
node = node.getFirstChild() - 1;
node = result;
rv = node.getFirstChild();
node = node.getChildContent();
node = node.firstChild();
*node = node.getFirstChild();
node = *(node.getFirstChild());
node = Node(node);
newNode = node.getFirstChild();
node = node.getNodeType();
node = node.getFirstChild(aReplace);
cnt = node.getFirstChild();
node = new Node();
node = node.GetLastChild();
node = &node;
node = node.getFirstChildWithConversion();
node = item.getFirstChild();
next = node.getFirstChild();
node = name.getFirstChild();
node = lastChild;
(void) node = node.getFirstChild();
node = node.getChildChild();
node = super.isSafeReplacement;
node = node.getChildList();
node = node.getFirstChild(parentNode);
node = aNode;
node = theNode.getFirstChild();
nodeList = node.getFirstChild();
node = node.getFirstChild(ctx);
firstChild = node.getFirstChild();
node = result.getFirstChild();
node = node.getFirstChild(&replace);
ret = node.getFirstChild();
node = node.getFirstChild(mNode);
nsCRT::free(node);
node = node.getFirstChild(0);
node = new node;
node = node.getFirstChild(ifp);
node = nextChild;
node = tree.getFirstChild();
prev = node.getFirstChild();
node = currentNode.getFirstChild();
node = namespace.getFirstChild();
node = node.getFirstChild(currentNode);
node = prevNode.getFirstChild();
node = node[firstChild];
node = node.get(node);
node = isSafeReplacement(node);
node = rootNode.getFirstChild();
node = *node;
aChild = node.getFirstChild();
node2 = node.getFirstChild();
node = node.getPrevChild();
node = parentNode;
node = node.findFirstChild();
node = false;
node = node.getFirstChild(aName);
node = node.getFirstChildInNode();
node = tmp;
lastChild = node.getFirstChild();
node = regNode.getFirstChild();
node = node.getFirstChild(ep);
*aNode = node.getFirstChild();
node = node.getChild(parent);
if (node == node) return false;
long node = node.getFirstChild();
node = Node.GetFirstChild();
node = node.getFirstChild(p);
node = node.next;
node = element.getFirstChild();
node = ref.getFirstChild();
node = prefix.getFirstChild();
node = node.getInsertionPoint();
node = parent.GetFirstChild();
node = node.getContent();
node = (Node)node;
node = Node();
node = findNode(node);
node = node.getFirstChild(prop);
node = node.getFirstChild(tmp);
node = node.getFirstChild(aResult);
node = node.getFirstChild(*parent);
node = replacement;
node = break;
node = (Node) node;
node = node.getFirstChild(elt);
node;
node = node.getName();
node = node.getFirstChild(cnt);
node = new Node(node);
node = (node.getFirstChild());
node.getFirstChild();
node = (node.getFirstChild());
node = node.getFirstChild(name);
nsresult rv;
node = node.getFirstChild(dep);
node = childNode;
node = parent.firstChild;
return false;
node = next;
node = node.getFirstChild(Node());
node = prevChild;
node = node.getFirstChild(aConstInt());
node = node.getFirstChild(getter_AddRefs(node));
node = node.getFirstChild(*getter_AddRefs(node));
node = node.getFirstChild(false);
node = (node.getFirstChild())? 0 : 1;
nsresult rv = node.getFirstChild();
node = node.getFirstChild(&node);
if (node.getFirstChild()) node = node.getFirstChild();
node = node.getFirstChild(*node);
node = node.getFirstChild(true);
if (node == null) return false;
node = node.getFirstChild(&aNode);
if (node.getFirstChild())  return true;
node = (void *) node.getFirstChild();
node = (void *)node.getFirstChild();
if (node)  node = node.getFirstChild();
node = (void**) node.getFirstChild();
/* * Now we're going to do the other pdf */ node = node.getFirstChild();
node = node.getFirstChild(aContext);
if (node) node = node.getFirstChild();
nsresult node = node.getFirstChild();
node = ctx.node.getFirstChild();
node = (Node *) node.getFirstChild();
node = NS_NewNodeList(node);
node = (node.getFirstChild() == true);
node = (void**)node.getFirstChild();
if (node) node = node.getFirstChild();
if (node) <node = node.getFirstChild();
if (node.getFirstChild()) return true;
if (node.getFirstChild()) <return true;
node = node.getFirstChild();
if (node.getFirstChild()) &return true;
if (node) &node = node.getFirstChild();
