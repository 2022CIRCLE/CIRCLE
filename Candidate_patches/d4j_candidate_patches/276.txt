golden:
setMillis(getChronology().months().add(getMillis(), months));
inference:
setMonths(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months));

SetMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months));
setMillis(getMillis(), months);
getChronology().months().add(getMillis(), months);
getChronology().months().add(getMillis(), months));
setMillio(getChronology().months().add(getMillio(), months));
setMillis(getChronology().months().add(getMillis(), months)));
setMillis(GetChronology().months().add(getMillis(), months));
setMilli(getChronology().months().add(getMilli(), months));
setMillis(getChronology().months() + getMillis(), months));
setMillis(getParent().months().add(getMillis(), months));
setMillis(getChronology().months().advance(months));
setMillis(getChronology().months().remove(getMillis(), months));
setMillis(getChronology().months().add(getMillis()));
setMonth(getChronology().months().add(getMillis(), months));
setMillis(getMillis().months().add(getMillis(), months));
addMonths(getChronology().months(), months);
setMillis(getMillis());
setMillis(getChronology().months().add(months));
setMillis(getChronology().months(), months);
setMillis(getMillis().months().add(getMillis(), months));
setMillis(getChronology().years().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(),months));
addMonths(getChronology().months().add(getMillis(), months));
getMillis(getChronology().months().add(getMillis(), months));
addMillis(getChronology().months().add(getMillis(), months));
SetMonths(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months(months));
setMillis(getChronology().months() + 1);
setMillis(getChronology().months());
setMillis(getChronology().months() + months));
setMillis(getChronology().months().add(getMillis(), months), 0);
return setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().elementAt(months));
setMillis(getChronology().months().get(), months));
setMillis(getChronology().months().add(getMillios(), months));
setMillis(getChronology().months().add(getMillis(), months).get());
setMillis(getChronology().months().add(getMillis(), months) + 1);
this.setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().append(getMillis(), months));
setMonths(getMillis().months().add(getMillis(), months));
setMillis(&getChronology().months().add(getMillis(), months));
setMillis(getChronology().months() + months);
setMillis(getChronology().months()).add(getMillis(), months);
setMillis(getMillio().months().add(getMillis(), months));
setMillis(getMillis().months().add(getMillis(), months));
setMillis(getChronology(months));
addMonths(getChronology().months());
setMillis(getMonths().months().add(getMillis(), months));
listMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), month));
setMillis(getChronology().months().add(&getMillis(), months));
setMillis(getChronology(), months);
setMillis(getChronology().months().elementAt(month));
setMillis(getMillis(), months));
setMillis(getMillio().months().add(getMillio(), months));
setMillis(getChronology().months().count() - 1);
setMillis(getChronology().months()).add(getMillis(), months));
setMonths(getChronology().months().add(getMillios(), months));
setMonths(getChronology().months().add(getMillis(),months));
aMillis = getChronology().months().add(getMillis(), months);
else setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().set(getMillis(), months));
setMillis(getChronology().months()+months);
setMillis(months);
setMillis(getChronology().months().add (getMillis(), months));
setMillis(getChronology().months() + 1 + getMillis(), months));
setMillis(getChronology().Months().add(getMillis(), months));
setMillis(mChronology.months().add(getMillis(), months));
setMillis(getMillis().years().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months), 1);
setMillis(getChronology().months().add(getMillis(), days));
setMillis(getChronology().mMonths().add(getMillis(), months));
setMillis(getChronology().months().assign(getMillis(), months));
setMillis();
setMillis(getChronology().months().Append(getMillis(), months));
setMillis(*getChronology().months().add(getMillis(), months));
setMillis(getChronology().months()));
setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().days().add(getMillis(), months));
setMillis(getChronology().months().count() > 0);
setMillis(getChronology(&months));
if (getChronology().months().add(getMillis(), months)) return;
setMillis(getChronology().months().add(getMillio(), months));
setMillis(getChronology().months(), months));
setMillis(getChronology().months().size() + 1);
setMillis(getChronology().months().add(getMillises(), months));
setMillis(getChronology().months().add(getMillis()), months));
setMillis(getMillis(&months));
setMillis(GetChronology().months().add(GetMillis(), months));
setMillis(getChronology().months().Add(getMillis(), months));
setMillis(getChronology().months().push(getMillis(), months));
setMillis(getChronology().months().trim(getMillis(), months));
setMillis(getChronology().months().add(GetMillis(), months));
setMillis(getChronology().months().size());
setMillis(getMillis(months));
setMillis(getChronology().months() == months);
setMillis(getChronology().months().addElement(getMillis(), months));
setMillis(getChronology().months().add(mMonths, months));
setMillis(getChronology().months().add(getMillis(), weeks));
setMillis(getChronology().months().get());
setMillis(getChronology().months().advance(months));
setMillis(getChronology().months() - 1 + getMillis(), months));
setMillis(getMillis().months().add(getMillis(), months)));
setMillis(getChronology().months().cstr_oneuse(), months));
setMillis(getChronology().months(&months));
setMillis(getChronology().months().add(getMillis(), months + 1));
setMillis(getMillis().months(), months);
setMilli(getChronology().months().add(getMilli(months)));
setMillis(getChronology().months().intValue(), months);
setMillis(getChronology().months().get(), months);
setMillis(getChronology().months().add(getMillis(),months));
setMillis(getChronology().months().add(getMillis(), Monate));
setMillis(getChronology().months().get(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months, this));
setMillis(getMillis().months());
setMillis(getMillis().months().remove(getMillis(), months));
setMillis(getMillis().months().advance(months));
setMillis(getChronology().months().addAll(getMillis(), months));
setMillis(getMillis().months().add(months));
getMillis(getChronology().months()).add(getMillis(), months));
setMillis (getChronology().months().add (getMillis(), months));
setMillis(getChronology().months().add(getMillis(), Months()));
setMillis(getChronology().months().get() + months));
setMillis(getChronology().months() - 1);
setMillis(getMillis().months().add(getMillis()));
setMillis(getChronology().months().add(getMillis());
setMillis(getChronology().months().+(getMillis(), months));
if (!getChronology().months().add(getMillis(), months)) return;
setMillis(getChronology().months().add(getMillis()), months);
setMillis(getChronology().months().add(getMillis(months)));
setMillis(getChronology().months().size() + getMillis(), months));
(void)getChronology().months().add(getMillis(), months));
mMillis = getChronology().months().add(getMillis(), months);
setMillis(getChronology().months().get().get(), months));
setMillis(getChronology().months().count() + 1);
setMillis(getChronology());
setMonths(getChronology().months().add(getMillis(), months)));
setMillis(getChronology().months().save(getMillis(), months));
getMillis().months().add(getMillis(), months);
setMillis(0);
setMillis(getChronology().months().size() - 1);
setMillis(getChronology().months().advance(&months));
setMillis(months.add(months));
setMillis(getChronology().months()).add(getMillis(), months);
setMillis(getChronology().months().clear());
setMillis(getChronology().months() + 1, months));
setMillis(getChronology().months()!= 0);
setMillis(getChronology().months().cstr_oneuse());
result = setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months() == months));
setMillis(getChronology().months().add(getMillis(),months)));
setMillis(getChronology().months().size() + 1, months));
getMillis().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMonths(), months));
setMonths(getChronology().months().add(getMillis(), Monate));
setMillis(getMillis().months().add(getMillis(),months));
if(getChronology().months().add(getMillis(), months)) return;
setMillis(getChronology().months().intValue(), months));
setMillis(getChronology().months().add(getMillis(), months+1));
setMillis (getChronology().months().add (getMillis (), months));
setMillis(getChronology().months().len + 1);
int i;
setMillis(getMillis().months().add(getMillis(), months, 0));
setMillis(getChronology().months().count(), months));
setMillis(getChronology().months().addElement(getMillis()), months));
setMillis(getChronology().months().add(getMillis(), months)+1);
setMillis(getChronology().months() + getMillis(), months);
setMillis(getChronology().months().count(), months);
setMillis(getChronology().months().clear(), months));
setMilli(getChronology().months().add(getMilli(), months)));
setMillis(getChronology().months()).add(getMillis());
setMillis(getChronology().months().add(getChronology(), months));
setMillis(getChronology().months().add(getMillis(), months - 1));
setMillis(getChronology().months().get() + months);
setMillis(getChronology().months().add(getMillis(), months) + 1));
if (getChronology().months().add(getMillis(), months)) return 0;
setMillis(getChronology().months().add(months)));
return 0;
setMillis(getChronology().months().add(getMillis(), months), -1);
setMillis(getChronology().months().add(getMillis(&months)));
setMillis(getChronology().months().size(), months));
setMillis(getChronology().months().intValue());
setMillis(getChronology().months().clear(), months);
setMillis(getChronology().months().count() + 1, months));
setMillis(getChronology().months().add(getMillis(), months)); */
if(!getChronology().months().add(getMillis(), months)) return;
setMillis(getChronology().months().add(getMillis(), months), &setMillis);
setMillis(getChronology().months().add(getMillis(), months))  0;
setMillis(getChronology().months().add(getMillis(), months)).addMonths(mMonths);
m.months = months; if (!m.months) return -1; else return -1;
if (getChronology().months()!= 0) setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months)  if (!getMillis()) return;  else  PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i  count; i++)  for (i = 0; i  count; i++)  if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
setMillis(getChronology().months().mCurrentTime.mTime.mMillis.mMilli, months);
if (mChronology)  mChronology.addMonth(getMillis());
if (getChronology().months().add(getMillis(), months))  setMillis(getChronology().months().add(getMillis(), months));
m = getChronology(); while(m)  nsAutoString udp; rv = m.mMillis.GetUnit(); if(NS_FAILED(rv)) return;
setMillis(getChronology().months().add(getMillis(), months, 0));
if (getChronology().months().add(getMillis(), months))  LOG(L_ERR, "addMonths: %s", __func__); setMillis(getChronology().months().add(getMillis(), months));
if (mMonths)  mMonths.mCount = mMonths; else  mMonths.mCount = mMonths;   else  mMonths.mCount = mMonths;
setMillis(getChronology().months().size().add(getMillis(), months));
if (mMonths  0) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if(!getChronology().months())  setMillis(getChronology().months().add(getMillis(), months));
if(mTarget)  nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor)  monthDescriptor.mParentHandler.Add(getChronology(), months);  else  monthDescriptor.mParentHandler.add(getChronology(), months);
setMillis(getChronology().months().add(getMillis(), months))!= 0;
if (!getChronology().months())  return 0;  if (getChronology().months().add(getMillis(), months))  setMillis(getChronology().months().add(getMillis(), months));
if(getMillis())  setMillis(getChronology().months().add(getMillis(), months));  else  setMillis(getChronology().months().add(getMillis(), months));
mMonths = getChronology().months().add(getMillis(), months); setMillis(mMonths);
if (mCount >= getChronology().months())  setMillis(getChronology().months().add(getMillis(), months));
nsChronology::addMonths(getChronology().months(), months)
setMillis(getChronology().months().add(getMillis(), months, &list));
nsMillisMonths::setMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size())  if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months);  else  setMillis(getChronology().months().add(getMillio(), months));
setMillis(getChronology().months().add(getMillis(), months))  1;
if (getChronology().months().add(getMillis(), months))  /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months))  setMillis(getChronology().months().add(getMillis(), months));  else  setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i  cnt; i++)  if (getChronology().months().add(getMillis(), months))  setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months))  32;
if ((months & MILLISEPG_BYTE) == 0)  aMonth = aMonth;  else  aMonth = aMonth;
setMillis(getChronology().months().removeAll(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months, &setMilli));
if (!mMonths)  mMonths = mMonths;  else  mMonths = mMonths;
if(getChronology().months().add(getMillis(), months))  *this = 0;  else  setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().len == 2);
if(!getChronology().months()) setMillis(getChronology().months().add(getMillis(), months)); else  setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months() == 0)  setMillis(getChronology().months().add(getMillis(), months));
aMonth = getChronology().months().add(getMillis(), months); if (aMonth) setMillis(aMonth);
setMillis(getChronology().months().add(getMillis(), months, false));
setMillis(getMillis().months().advance(&months));
if (getMillis().months() == months)  setMillis(getChronology().months().add(getMillis(), months));  else  setMillis(getChronology().months().add(getMillis(), months));
if (!gAttrs)  setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().get()));
if (!getChronology().months())  setMillis(getChronology().months().add(getMillis(), months));
/* XXX should be put in the iocmd library. */ setMillis(getChronology().months().add(getMillis(), months)); */
aMillis = getChronology().months(); if (aMillis == -1) return; aMillis = getMillis(); else return;
mInitialized = getChronology().months(); if (mInitialized)  setMillis(getMillis(), months);
mIsMillis = getChronology().months().add(getMillis(), months);
mTarget = getMillis(); setMillis(mTarget.months().add(getMillis(), months));
if(getMillis().months().add(getMillis(), months)) return;
setMillis(getMillis().months().get().add(getMillis(), months));
setMillis(getMillis().months().size() - 1, months));
if (! getChronology().months())  setMillis(getChronology().months().add(getMillis(), months));
mMonths.add(getMillis(), months);
if (getMillis()!= kNumMonths)  mMillis = kMillis;  else  mMillis = kNoMonths;
setMillis(getMillis().months().len == 1);
if(months == null)  if(getChronology().months() == months)  for(int i = 0; i  months; i++) setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months))  return;
mTmp = getChronology().months(); setMillis(mTmp, months));
if (!getChronology().months())  return;  /* * The minimum of months is the month that contains * the month to add, and the number of months it's up to * two times. */ setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months)) ||!getMillis();
if(getMillis()  lhs.Count())  setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months())  if (getChronology().months().add(getMillis(), months)) return;  else  LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months);   else  setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months, getMilli));
if (!getChronology().months())  return;    else  if (getChronology().months().add(getMillis(), months))  return;
if(getChronology().months() == 0) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months().add(getMillis(), months))  return;
if (months)  if (months) setMillis(getChronology().months().add(getMillis(), months));  else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()) setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months))  msg = msg;  else  msg = msg;
setMillis(getChronology().months().s + months));
setMillis(getChronology().months() + mMonths));
setMillis(getChronology().months().add(getMillis(), months, 0, 0, 0));
aMilliseconds = getChronology().months().add(getMilliseconds(), months); aMilliseconds = getChronology().months().add(getMilliseconds()); aMilliseconds = getMilliseconds(); aMilliseconds = getMilliseconds();
mMilli = 0; if (getChronology().months().add(getMilli(), months) == 0) return 0;
nsMilliseconds = getChronology().months().add(getMillis(), months); if (nsMilliseconds  nsMilliseconds)  nsMilliseconds = getMillis();
if (getChronology().months().add(getMillis(), months))  return;
setMillis(getChronology().months().mInMonths.add(getMillis(), months));
if(getChronology().months().add(getMillis(), months))  0) return; setMillis(getChronology().months().add(getMillis(), months));
/* XXX: addMonths() */ __doc__ = getMillis();
setMillis(getChronology().months().split("."))[0]);
fputs("AddMonths");
setMillis(getMillis().months().get(), months));
aMillis = getChronology().months(); if (aMillis == 0)  aMillis = aMillis;  else  aMillis = 0;
fprintf(stdout, "addMonthsn"); fprintf(stdout, "can't add months to the listn");
setMillis(getChronology().months().ms(months));
if (!getChronology().months())  return 0;
setMillis(getChronology().months().advance(Millis_Immediate(month)), months));
nsIMonthDays::AddMonth(&synthesize); nsMilliseconds(months);
if(!getChronology().months().add(getMillis(), months))  m = 0;
rv = mCurrentDate.mYear; if (rv  mCurrentDate.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.
mMonths = getChronology().months(); if (!mMonths)  return;
setMillis(getChronology().months().add(getMillis(), months), getTwips());
if(getChronology().months()  monthCount)  setMillis(getChronology().months().add(getMillis(), months));
nsCRT::free(getChronology()); setMillis(nsCRT::GetCRT().months().add(nsCRT::GetCRT(), months));
if(!selectMonths) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().len + months);
setMillis(getChronology().months() + dbg, months));
/* * Is there any? */ setMillis(getChronology().months().add(getMillis(), months)); */
mChronology = getChronology(); if (!mChronology)  mChronology = null;
f = getChronology().months().add(getMillis(), months); if (f!= -1)  printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months);  else  printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
setMillis(getChronology().months().add(getMillis(), months)).mIdle = -1;
setMillis(getChronology().months().add(getMillis(), months, &getMillis()));
if ((!getMillis()) || (getChronology().months().add(getMillis(), months)))  return 0;
if (getChronology().months().add(getMillis(), months))  *avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs =  mTargets[getChronology().months().add(getMillis(), months)];
if ((!getMillis()) || (getChronology().months().add(getMillis(), months))) return;
setMillis(getChronology().months().size() == months, getMillis().relativeFileSize() == months));
setMillis(getChronology().months().add(getMillis(), months, &year));
if ((!getChronology().months().add(getMillis(), months)))  printf("AddMonths: missing '%s'n", months);
setMillis(getChronology().months().get().add(getMillis(), months));
if (months)  setMillis(getChronology().months().add(getMillis(), months));  else  setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame())  return;  else  return -1;
if(!(ms = getMillis()))  return;
setMillis(getChronology().months().add(getMillis(), months, 0, 0));
if (getChronology().months().add(getMillis(), months))  ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0)  ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0)  ret = SetMillis(getChronology().months().add(getMillis(), months));  else  ret = SetMillis(getChronology().months().add(getMillis(), months));   else  ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!(months = getMillis())) return;
if (months)  ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1)  ret = 0; setMillis(ret, months);   else  setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months))  setMillis(getChronology().months().add(getMillis(), months));
if(getMillis() == months) setMillis(getChronology().months().add(getMillis(), months));
rv = getChronology().months().add(getMillis(), months); if (NS_FAILED(rv))  return;
setMillis(getChronology().months().lh_add(getMillis(), months));
setMillis(getChronology().months() + (months - getMillis()));
rv = getChronology().months().add(getMillis(), months); if (NS_FAILED(rv)) return;
if(getMillis() == months) return; else setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) &msg = msg; &else <msg = msg;
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; &else LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) &msg = msg; else &msg = msg;
if ((months & MILLISEPG_BYTE) == 0) <aMonth = aMonth; else aMonth = aMonth;
if(months == null) if(getChronology().months() == months) for(int i = 0; i <months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if(!getChronology().months()) <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return; &/* * The minimum of months is the month that contains * the month to add, and the number of months it's up to * two times. */ setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months() &monthCount) setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) msg = msg; &else msg = msg;
if(months == null) <if(getChronology().months() == months) &for(int i = 0; i &months; i++) setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
aMillis = getChronology().months(); if (aMillis == 0) <aMillis = aMillis; &else &aMillis = 0;
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; <else LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) <mMonths = mMonths; &else <mMonths = mMonths;
if(months == null) if(getChronology().months() == months) <for(int i = 0; i <months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; <else LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; <else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months().add(getMillis(), months)) &return;
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); <<else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if(months == null) &if(getChronology().months() == months) for(int i = 0; i months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) &return; &else &return -1;
if (getChronology().months().add(getMillis(), months)) <return;
aMillis = getChronology().months(); if (aMillis == 0) <aMillis = aMillis; &else aMillis = 0;
if ((months & <MILLISEPG_BYTE) == 0) aMonth = aMonth; else <aMonth = aMonth;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; <else <LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis() == months) if (!getMillis()) return; &else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months()) <return 0; <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) <aMonth = aMonth; else <aMonth = aMonth;
if (!getChronology().months()) return 0; if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; <else mMonths.mCount = mMonths;
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) msg = msg; else <msg = msg;
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); &else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months() == 0) setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i &cnt; i++) if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) *this = 0; else <setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; &else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (months) <setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i cnt; i++) &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(months == null) &if(getChronology().months() == months) &for(int i = 0; i &months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else mMonths.mCount = mMonths; &else mMonths.mCount = mMonths;
<for (i = 0; i &cnt; i++) <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return; &&<else if (getChronology().months().add(getMillis(), months)) return;
if (!isFrame()) return; <else return -1;
if(mTarget) &nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if(getMillis()) <setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i &cnt; i++) if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; &else <LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; <else LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; &<else mMonths.mCount = mMonths;
for (i = 0; i cnt; i++) &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; &&else mMonths.mCount = mMonths;
if(mTarget) &nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis() == months) &if (!getMillis()) return; else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); &else setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) &setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) &aMonth = aMonth; else &aMonth = aMonth;
if (mMonths) mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; <else mMonths.mCount = mMonths;
if (getMillis() == months) if (!getMillis()) return; &else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getMillis() == months) if (!getMillis()) return; else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) &setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i cnt; i++) if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); &<else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months() &monthCount) <setMillis(getChronology().months().add(getMillis(), months));
if ((!getChronology().months().add(getMillis(), months))) printf("AddMonths: missing '%s'<n", months);
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; <else <LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) <mMillis = kMillis; &else <mMillis = kNoMonths;
if (!getChronology().months()) &return 0; if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!gAttrs) <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; else <LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) msg = msg; &else &msg = msg;
fprintf(stdout, "addMonthsn"); fprintf(stdout, "can't add months to the list&n");
if (getMillis().months() == months) &setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i &cnt; i++) <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); &else <setMillis(getChronology().months().add(getMillio(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
nsMilliseconds = getChronology().months().add(getMillis(), months); if (nsMilliseconds <nsMilliseconds) <nsMilliseconds = getMillis();
if (months) if (months) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) &setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <return; <&<else if (getChronology().months().add(getMillis(), months)) return;
if(getChronology().months().add(getMillis(), months)) &*this = 0; <else setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) msg = msg; &else <msg = msg;
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) &return; &else <return -1;
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
aMillis = getChronology().months(); if (aMillis == 0) <aMillis = aMillis; <else <aMillis = 0;
if (!mMonths) <mMonths = mMonths; else mMonths = mMonths;
if (!getChronology().months()) return; <<&else if (getChronology().months().add(getMillis(), months)) return;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); <else setMillis(getChronology().months().add(getMillis(), months));
if(months == null) &if(getChronology().months() == months) <for(int i = 0; i <months; i++) setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(months == null) if(getChronology().months() == months) &for(int i = 0; i &months; i++) setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) &setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!getChronology().months()) &return; &<<else if (getChronology().months().add(getMillis(), months)) return;
if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) <setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months() <monthCount) <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return; /* * The minimum of months is the month that contains * the month to add, and the number of months it's up to * two times. */ setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) *avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = &mTargets[getChronology().months().add(getMillis(), months)]<;
if(mTarget) &nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
<for (i = 0; i <cnt; i++) if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); &<else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return; <&<else if (getChronology().months().add(getMillis(), months)) return;
if(getChronology().months().add(getMillis(), months)) <*this = 0; &else <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) *avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = <mTargets[getChronology().months().add(getMillis(), months)];
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); <<else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = <mTargets[getChronology().months().add(getMillis(), months)]&;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); &&else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (mChronology) <mChronology.addMonth(getMillis());
if (mMonths) <mMonths.mCount = mMonths; else mMonths.mCount = mMonths; <<else mMonths.mCount = mMonths;
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; <else &LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) if (!getMillis()) return; <else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getChronology().months().add(getMillis(), months)) LOG(L_ERR, "addMonths: %s", __func__); setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) if (!getMillis()) return; &else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (mMonths) mMonths.mCount = mMonths; else mMonths.mCount = mMonths; else mMonths.mCount = mMonths;
for (i = 0; i &cnt; i++) if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if(getChronology().months().add(getMillis(), months)) &*this = 0; else &setMillis(getChronology().months().add(getMillis(), months));
m = getChronology(); while(m) nsAutoString udp; rv = m.mMillis.GetUnit(); if(NS_FAILED(rv)) return;
if ((months & MILLISEPG_BYTE) == 0) &aMonth = aMonth; <else aMonth = aMonth;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; &else LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) <aMonth = aMonth; <else <aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
setMillis(getMillis().months().add(getMillis(), months));
if(months == null) &if(getChronology().months() == months) for(int i = 0; i <months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if(!getChronology().months().add(getMillis(), months)) &m = 0;
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); &&else setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) <setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; else mMonths.mCount = mMonths;
if(mTarget) <nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis().months() == months) setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; else mMonths.mCount = mMonths;
if ((months & MILLISEPG_BYTE) == 0) <aMonth = aMonth; else <aMonth = aMonth;
if (!getChronology().months()) setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) <setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) &mMonths = mMonths; <else mMonths = mMonths;
if (getMillis() == months) if (!getMillis()) return; <else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); &else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else mMonths.mCount = mMonths; &<else mMonths.mCount = mMonths;
if (getMillis() == months) if (!getMillis()) return; <else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
for (i = 0; i &cnt; i++) if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); &&else setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) <aMonth = aMonth; else &aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <return 0; if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) <aMonth = aMonth; &else aMonth = aMonth;
for (i = 0; i <cnt; i++) <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (months) &if (months) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) &0) return; setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; <&else mMonths.mCount = mMonths;
for (i = 0; i &cnt; i++) &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; <else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) <if (!getMillis()) return; <else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(mTarget) nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) &return; <&<else if (getChronology().months().add(getMillis(), months)) return;
if (mCount >= getChronology().months()) &setMillis(getChronology().months().add(getMillis(), months));
m = getChronology(); while(m) <nsAutoString udp; rv = m.mMillis.GetUnit(); if(NS_FAILED(rv)) return;
if (!isFrame()) <return; else &return -1;
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (! getChronology().months()) <setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) &mMillis = kMillis; else mMillis = kNoMonths;
&for (i = 0; i cnt; i++) <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); <&else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <return; <<<else if (getChronology().months().add(getMillis(), months)) return;
if (getMillis() == months) <if (!getMillis()) return; else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
aMillis = getChronology().months(); if (aMillis == 0) <aMillis = aMillis; else &aMillis = 0;
if (mMonths) <mMonths.mCount = mMonths; else mMonths.mCount = mMonths; &&else mMonths.mCount = mMonths;
aMillis = getChronology().months(); if (aMillis == 0) aMillis = aMillis; <else <aMillis = 0;
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) <msg = msg; <else &msg = msg;
if (getMillis() == months) &if (!getMillis()) return; <else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
<for (i = 0; i cnt; i++) <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) msg = msg; <else msg = msg;
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; else &LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; <else LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (months) setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if ((months & &MILLISEPG_BYTE) == 0) aMonth = aMonth; else aMonth = aMonth;
if(months == null) if(getChronology().months() == months) &for(int i = 0; i <months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis() == months) &if (!getMillis()) return; &else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) <setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; <else <LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; <<else mMonths.mCount = mMonths;
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (months) <if (months) setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) <aMonth = aMonth; <else &aMonth = aMonth;
<for (i = 0; i <cnt; i++) if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
fprintf(stdout, "addMonthsn"); fprintf(stdout, "can't add months to the listn");
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; <else <LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths <0) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = &mTargets[getChronology().months().add(getMillis(), months)]<;
if (months) <if (months) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) <return 0; if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months)) <32;
if (getMillis() == months) <if (!getMillis()) return; <else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i <cnt; i++) <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) <aMonth = aMonth; &else aMonth = aMonth;
if(mTarget) nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) *avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = <mTargets[getChronology().months().add(getMillis(), months)]&;
if(mTarget) &nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; else &LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
nsMilliseconds = getChronology().months().add(getMillis(), months); if (nsMilliseconds <nsMilliseconds) nsMilliseconds = getMillis();
if (mMonths) &mMonths.mCount = mMonths; else mMonths.mCount = mMonths; &else mMonths.mCount = mMonths;
if(getMillis() lhs.Count()) &setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months() &monthCount) &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months() <monthCount) &setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(!getChronology().months().add(getMillis(), months)) <m = 0;
if (!mMonths) &mMonths = mMonths; else <mMonths = mMonths;
if (getChronology().months().add(getMillis(), months)) &*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = <mTargets[getChronology().months().add(getMillis(), months)]&;
if(mTarget) &nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
fprintf(stdout, "addMonths<n"); fprintf(stdout, "can't add months to the listn");
if(getChronology().months() monthCount) &setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) &aMonth = aMonth; <else aMonth = aMonth;
if(mTarget) <nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis() == months) <if (!getMillis()) return; else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; <else LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis() == months) if (!getMillis()) return; else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getMillis() == months) if (!getMillis()) return; else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (mMonths) mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; &else mMonths.mCount = mMonths;
if (!getMillio().size()) &if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); else <setMillis(getChronology().months().add(getMillio(), months));
if(mTarget) &nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
&for (i = 0; i <cnt; i++) <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i <cnt; i++) &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = &mTargets[getChronology().months().add(getMillis(), months)]&;
&for (i = 0; i <cnt; i++) if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if ((!getChronology().months().add(getMillis(), months))) &printf("AddMonths: missing '%s'n", months);
if(mTarget) &nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) return; &<<else if (getChronology().months().add(getMillis(), months)) return;
if (getChronology().months().add(getMillis(), months)) *avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = mTargets[getChronology().months().add(getMillis(), months)]<;
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); &&else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) msg = msg; else &msg = msg;
if(getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) mMillis = kMillis; <else mMillis = kNoMonths;
if ((months & <MILLISEPG_BYTE) == 0) &aMonth = aMonth; else aMonth = aMonth;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); else setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) &msg = msg; <else &msg = msg;
if (mMonths) &mMonths.mCount = mMonths; else mMonths.mCount = mMonths; else mMonths.mCount = mMonths;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; else LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; &else <LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return; &&<else if (getChronology().months().add(getMillis(), months)) return;
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; &else &LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i cnt; i++) if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) <aMonth = aMonth; <else aMonth = aMonth;
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); &else setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) return; else &return -1;
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; <else &LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months().add(getMillis(), months)) return;
if (mChronology) mChronology.addMonth(getMillis());
if (months) &setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) if (!getMillis()) return; <else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); <<else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i cnt; i++) if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis() == months) &if (!getMillis()) return; <else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months()) &return 0; <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (mChronology) &mChronology.addMonth(getMillis());
if (!getChronology().months()) <return; &&&else if (getChronology().months().add(getMillis(), months)) return;
if (getMillis() == months) &if (!getMillis()) return; &else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months()) <return 0; &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) &msg = msg; else msg = msg;
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; &&else mMonths.mCount = mMonths;
if ((!getChronology().months().add(getMillis(), months))) &printf("AddMonths: missing '%s'<n", months);
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
nsMilliseconds = getChronology().months().add(getMillis(), months); if (nsMilliseconds nsMilliseconds) nsMilliseconds = getMillis();
if (mMonths &0) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return; <&&else if (getChronology().months().add(getMillis(), months)) return;
aMillis = getChronology().months(); if (aMillis == 0) &aMillis = aMillis; <else aMillis = 0;
if(mTarget) <nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if(getChronology().months().add(getMillis(), months)) return;
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getMillis()!= kNumMonths) mMillis = kMillis; else mMillis = kNoMonths;
if (!isFrame()) return; <else <return -1;
if (getChronology().months().add(getMillis(), months)) <LOG(L_ERR, "addMonths: %s", __func__); setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months)) <1;
aMillis = getChronology().months(); if (aMillis == 0) <aMillis = aMillis; else <aMillis = 0;
if (!getChronology().months()) return 0; &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
aMillis = getChronology().months(); if (aMillis == 0) <aMillis = aMillis; &else <aMillis = 0;
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) msg = msg; else msg = msg;
if (getChronology().months().add(getMillis(), months)) <*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = <mTargets[getChronology().months().add(getMillis(), months)]<;
if (!isFrame()) <return; &else &return -1;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); <&else setMillis(getChronology().months().add(getMillis(), months));
if(getMillis() &lhs.Count()) <setMillis(getChronology().months().add(getMillis(), months));
rv = getChronology().months().add(getMillis(), months); if (NS_FAILED(rv)) <return;
if ((!getMillis()) || (getChronology().months().add(getMillis(), months))) return 0;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; else <LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; &<else mMonths.mCount = mMonths;
if (!getMillio().size()) if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); else setMillis(getChronology().months().add(getMillio(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; else <LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(!getChronology().months()) setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) &aMonth = aMonth; else <aMonth = aMonth;
for (i = 0; i cnt; i++) if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) mMillis = kMillis; &else &mMillis = kNoMonths;
nsMilliseconds = getChronology().months().add(getMillis(), months); if (nsMilliseconds &nsMilliseconds) nsMilliseconds = getMillis();
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
aMillis = getChronology().months(); if (aMillis == 0) &aMillis = aMillis; else aMillis = 0;
if (!getChronology().months()) return; &<&else if (getChronology().months().add(getMillis(), months)) return;
if (getMillis() == months) if (!getMillis()) return; <else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
&for (i = 0; i <cnt; i++) &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) <if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); &else &setMillis(getChronology().months().add(getMillio(), months));
if (!getChronology().months()) <return 0; &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
nsMilliseconds = getChronology().months().add(getMillis(), months); if (nsMilliseconds <nsMilliseconds) &nsMilliseconds = getMillis();
if (months) &setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) <return; else <return -1;
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; &else mMonths.mCount = mMonths;
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); &<else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <return; <&&else if (getChronology().months().add(getMillis(), months)) return;
if (mCount >= getChronology().months()) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); &<else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else mMonths.mCount = mMonths; &<else mMonths.mCount = mMonths;
if ((months & &MILLISEPG_BYTE) == 0) aMonth = aMonth; &else <aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) <setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <return; &<&else if (getChronology().months().add(getMillis(), months)) return;
if (!getMillio().size()) &if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); else &setMillis(getChronology().months().add(getMillio(), months));
if (!mMonths) &mMonths = mMonths; <else &mMonths = mMonths;
aMillis = getChronology().months(); if (aMillis == 0) aMillis = aMillis; &else <aMillis = 0;
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) if (!getMillis()) return; else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!mMonths) mMonths = mMonths; <else &mMonths = mMonths;
if(mTarget) <nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getChronology().months().add(getMillis(), months)) *avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = mTargets[getChronology().months().add(getMillis(), months)]&;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); &&else setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i cnt; i++) &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if(months == null) if(getChronology().months() == months) <for(int i = 0; i &months; i++) setMillis(getChronology().months().add(getMillis(), months));
if(months == null) <if(getChronology().months() == months) <for(int i = 0; i months; i++) setMillis(getChronology().months().add(getMillis(), months));
if(months == null) if(getChronology().months() == months) &for(int i = 0; i months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) if (!getMillis()) return; &else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months()) return 0; <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) <aMonth = aMonth; &else <aMonth = aMonth;
if (!getChronology().months()) &return; &else if (getChronology().months().add(getMillis(), months)) return;
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) &msg = msg; &else &msg = msg;
if(getMillis()) &setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) <msg = msg; else &msg = msg;
if (getMillis() == months) if (!getMillis()) return; <else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (months) &setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) &*this = 0; else <setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) &aMonth = aMonth; else aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) &if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); &else setMillis(getChronology().months().add(getMillio(), months));
if(mTarget) nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if ((months & MILLISEPG_BYTE) == 0) aMonth = aMonth; else aMonth = aMonth;
if (getMillis() == months) &if (!getMillis()) return; &else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (mMonths) mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; <<else mMonths.mCount = mMonths;
if (!getChronology().months()) &return 0; &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) <if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); else setMillis(getChronology().months().add(getMillio(), months));
if (!getChronology().months()) <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return; &<&else if (getChronology().months().add(getMillis(), months)) return;
if ((months & <MILLISEPG_BYTE) == 0) <aMonth = aMonth; <else &aMonth = aMonth;
setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else mMonths.mCount = mMonths; <&else mMonths.mCount = mMonths;
if (getMillis()!= kNumMonths) <mMillis = kMillis; else <mMillis = kNoMonths;
if (getChronology().months().add(getMillis(), months)) &*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = &mTargets[getChronology().months().add(getMillis(), months)];
if (getMillis() == months) <if (!getMillis()) return; <else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(mTarget) &nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if(getMillis() &lhs.Count()) setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!isFrame()) &return; &else return -1;
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); <&else setMillis(getChronology().months().add(getMillis(), months));
mChronology = getChronology(); if (!mChronology) mChronology = null;
mMonths = getChronology().months(); if (!mMonths) return;
if ((months & MILLISEPG_BYTE) == 0) <aMonth = aMonth; &else <aMonth = aMonth;
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); &else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!mMonths) &mMonths = mMonths; else &mMonths = mMonths;
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) aMonth = aMonth; <else aMonth = aMonth;
if (!getChronology().months()) <return 0; <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return 0;
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; <else &LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); &<else setMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) <if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); &else setMillis(getChronology().months().add(getMillio(), months));
if (!getChronology().months()) return 0; <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) &msg = msg; else <msg = msg;
m = getChronology(); while(m) &nsAutoString udp; rv = m.mMillis.GetUnit(); if(NS_FAILED(rv)) return;
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(getMillis()) &setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) &if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); <else setMillis(getChronology().months().add(getMillio(), months));
if (mMonths) <mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; <<else mMonths.mCount = mMonths;
if ((months & MILLISEPG_BYTE) == 0) aMonth = aMonth; else &aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) return; &else &return -1;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); &else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!isFrame()) <return; <else return -1;
if(mTarget) <nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getMillio().size()) <if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); &else <setMillis(getChronology().months().add(getMillio(), months));
aMillis = getChronology().months(); if (aMillis == 0) &aMillis = aMillis; <else &aMillis = 0;
if (getMillis() == months) &if (!getMillis()) return; &else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
rv = mCurrentDate.mYear; if (rv <mCurrentDate.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.
if(getChronology().months().add(getMillis(), months)) &return;
if (!getChronology().months()) &return; <<<else if (getChronology().months().add(getMillis(), months)) return;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; &else LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
fprintf(stdout, "addMonthsn"); fprintf(stdout, "can't add months to the list<n");
if ((months & MILLISEPG_BYTE) == 0) <aMonth = aMonth; &else &aMonth = aMonth;
if(mTarget) &nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if(getChronology().months().add(getMillis(), months)) <*this = 0; &else setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) aMonth = aMonth; <else aMonth = aMonth;
if (!getChronology().months()) &return; <&&else if (getChronology().months().add(getMillis(), months)) return;
if(mTarget) &nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
&for (i = 0; i cnt; i++) <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); &else setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i cnt; i++) &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
aMillis = getChronology().months(); if (aMillis == 0) aMillis = aMillis; &else &aMillis = 0;
if(mTarget) &nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if(mTarget) nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; &else &LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months() <monthCount) setMillis(getChronology().months().add(getMillis(), months));
if(getMillis() <lhs.Count()) <setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i cnt; i++) <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; else mMonths.mCount = mMonths;
if (!getChronology().months()) return; </* * The minimum of months is the month that contains * the month to add, and the number of months it's up to * two times. */ setMillis(getChronology().months().add(getMillis(), months));
mMonths = getChronology().months(); if (!mMonths) &return;
if (mMonths) <mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; &&else mMonths.mCount = mMonths;
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; else LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) *avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = &mTargets[getChronology().months().add(getMillis(), months)];
if (getChronology().months().add(getMillis(), months)) *avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = &mTargets[getChronology().months().add(getMillis(), months)]&;
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(mTarget) &nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) &return; else if (getChronology().months().add(getMillis(), months)) return;
if(getChronology().months().add(getMillis(), months)) &*this = 0; &else <setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) <return; <else &return -1;
if (getMillis() == months) if (!getMillis()) return; &else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) aMonth = aMonth; <else aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return; &/* * The minimum of months is the month that contains * the month to add, and the number of months it's up to * two times. */ setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) mMillis = kMillis; else &mMillis = kNoMonths;
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; <else <LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) <*this = 0; <else setMillis(getChronology().months().add(getMillis(), months));
mInitialized = getChronology().months(); if (mInitialized) &setMillis(getMillis(), months);
<for (i = 0; i &cnt; i++) if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
aMillis = getChronology().months(); if (aMillis == 0) &aMillis = aMillis; <else <aMillis = 0;
if (!mMonths) <mMonths = mMonths; &else mMonths = mMonths;
if (getMillis().months() == months) setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
for (i = 0; i cnt; i++) &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
aMillis = getChronology().months(); if (aMillis == 0) &aMillis = aMillis; else &aMillis = 0;
if (getMillis().months() == months) &setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) <setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; <else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (mMonths) &mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; &<else mMonths.mCount = mMonths;
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months() == 0) <setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
nsMilliseconds = getChronology().months().add(getMillis(), months); if (nsMilliseconds &nsMilliseconds) <nsMilliseconds = getMillis();
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getMillis() == months) <if (!getMillis()) return; &else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(mTarget) nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; <else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (mMonths) <mMonths.mCount = mMonths; else mMonths.mCount = mMonths; else mMonths.mCount = mMonths;
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); &<else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) <if (!getMillis()) return; &else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) mMonths = mMonths; &else mMonths = mMonths;
if (getMillis().months() == months) <setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i <cnt; i++) <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
&setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) &aMonth = aMonth; else <aMonth = aMonth;
if (getMillis()!= kNumMonths) &mMillis = kMillis; <else &mMillis = kNoMonths;
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); <&else setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months)) &1;
if (months) setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) <mMillis = kMillis; else &mMillis = kNoMonths;
for (i = 0; i <cnt; i++) &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) return; &else return -1;
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) &LOG(L_ERR, "addMonths: %s", __func__); setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) *this = 0; &else <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = mTargets[getChronology().months().add(getMillis(), months)];
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (months) if (months) setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i &cnt; i++) &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) <if (!getMillis()) return; else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); <<else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) &setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) aMonth = aMonth; <else <aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; <else LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i &cnt; i++) &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else mMonths.mCount = mMonths; <else mMonths.mCount = mMonths;
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
for (i = 0; i &cnt; i++) <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) <setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) <0) return; setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else mMonths.mCount = mMonths; &else mMonths.mCount = mMonths;
if (getMillis() == months) if (!getMillis()) return; &else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; &else &LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
aMillis = getChronology().months(); if (aMillis == 0) &aMillis = aMillis; else <aMillis = 0;
for (i = 0; i <cnt; i++) if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) aMonth = aMonth; else aMonth = aMonth;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); &<else setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i <cnt; i++) <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) mMonths = mMonths; <else mMonths = mMonths;
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; <else &LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (months) <setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return; &else if (getChronology().months().add(getMillis(), months)) return;
if (getMillis()!= kNumMonths) &mMillis = kMillis; <else <mMillis = kNoMonths;
if (!getChronology().months()) <return; &<else if (getChronology().months().add(getMillis(), months)) return;
if (months) setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) <return; <else <return -1;
if ((months & <MILLISEPG_BYTE) == 0) &aMonth = aMonth; else &aMonth = aMonth;
if(!(ms = getMillis())) &return;
fprintf(stdout, "addMonths<n"); fprintf(stdout, "can't add months to the list<n");
if (mMonths) &mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; &&else mMonths.mCount = mMonths;
if(mTarget) nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
mInitialized = getChronology().months(); if (mInitialized) <setMillis(getMillis(), months);
if (getChronology().months().add(getMillis(), months)) &*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = &mTargets[getChronology().months().add(getMillis(), months)]&;
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; &else LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i cnt; i++) <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) &nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
for (i = 0; i &cnt; i++) <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
mInitialized = getChronology().months(); if (mInitialized) setMillis(getMillis(), months);
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) <return;
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i cnt; i++) &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) <aMonth = aMonth; &else &aMonth = aMonth;
if (!getMillio().size()) &if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); &else &setMillis(getChronology().months().add(getMillio(), months));
aMillis = getChronology().months(); if (aMillis == 0) <aMillis = aMillis; else aMillis = 0;
if (getChronology().months().add(getMillis(), months)) &*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = mTargets[getChronology().months().add(getMillis(), months)]&;
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(getChronology().months().add(getMillis(), months)) *this = 0; <else <setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) 0) return; setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; <else &LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; <&else mMonths.mCount = mMonths;
if (months) <setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); else setMillis(getChronology().months().add(getMillis(), months));
if(!getChronology().months()) setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
<for (i = 0; i <cnt; i++) <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i <cnt; i++) &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i cnt; i++) if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) &setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) <mMillis = kMillis; else mMillis = kNoMonths;
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; <else <LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(mTarget) &nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); <&else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) mMillis = kMillis; <else <mMillis = kNoMonths;
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; &else <LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) *this = 0; &else setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) <mMonths = mMonths; <else mMonths = mMonths;
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); <<else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return; &&&else if (getChronology().months().add(getMillis(), months)) return;
if (!mMonths) mMonths = mMonths; else &mMonths = mMonths;
if(getChronology().months().add(getMillis(), months)) <*this = 0; else <setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) <msg = msg; <else <msg = msg;
if (getMillis()!= kNumMonths) <mMillis = kMillis; <else <mMillis = kNoMonths;
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; else LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i <cnt; i++) <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) &return; <else &return -1;
if (!getChronology().months()) return 0; &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); <&else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; <<else mMonths.mCount = mMonths;
if ((!getChronology().months().add(getMillis(), months))) printf("AddMonths: missing '%s'n", months);
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(mTarget) <nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if(!getChronology().months().add(getMillis(), months)) m = 0;
if (!getMillio().size()) if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); else <setMillis(getChronology().months().add(getMillio(), months));
if (getMillis()!= kNumMonths) <mMillis = kMillis; <else mMillis = kNoMonths;
if (!getChronology().months()) return; <&else if (getChronology().months().add(getMillis(), months)) return;
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(getMillis()) <setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) if (!getMillis()) return; &else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
setMillis(getChronology().months().add(getMillis(), months)) 32;
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; &else &LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i cnt; i++) <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) if (!getMillis()) return; <else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (mMonths) mMonths.mCount = mMonths; else mMonths.mCount = mMonths; <<else mMonths.mCount = mMonths;
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); <&else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return 0; if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if(getMillis() <lhs.Count()) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(!(ms = getMillis())) <return;
if (!getChronology().months()) <return; &/* * The minimum of months is the month that contains * the month to add, and the number of months it's up to * two times. */ setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) if (!getMillis()) return; else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(mTarget) <nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis() == months) <if (!getMillis()) return; <else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if ((months & <MILLISEPG_BYTE) == 0) <aMonth = aMonth; else &aMonth = aMonth;
if ((months & &MILLISEPG_BYTE) == 0) &aMonth = aMonth; <else <aMonth = aMonth;
if (months) if (months) setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else mMonths.mCount = mMonths; &<else mMonths.mCount = mMonths;
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if (!gAttrs) &setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) &mMonths = mMonths; <else <mMonths = mMonths;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; &else &LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; &else <LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; <<else mMonths.mCount = mMonths;
if (getMillis() == months) if (!getMillis()) return; else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(getMillis()) setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) mMillis = kMillis; &else <mMillis = kNoMonths;
if (months) <setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) msg = msg; <else <msg = msg;
if(months == null) &if(getChronology().months() == months) <for(int i = 0; i &months; i++) setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (months) &setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else mMonths.mCount = mMonths; <else mMonths.mCount = mMonths;
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &return;
if (!getChronology().months()) return 0; if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); <else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; <else LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!mMonths) &mMonths = mMonths; else mMonths = mMonths;
if (getMillis().months() == months) setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) *this = 0; <else setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) <return; &else return -1;
if ((months & <MILLISEPG_BYTE) == 0) <aMonth = aMonth; else aMonth = aMonth;
if(months == null) if(getChronology().months() == months) for(int i = 0; i &months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; &else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; <else <LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) aMonth = aMonth; <else &aMonth = aMonth;
if (getMillis().months() == months) setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) <msg = msg; &else <msg = msg;
if(mTarget) <nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
setMillis(getChronology().months().add(getMillis(), months)) &32;
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (mMonths 0) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) &setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; <else &LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(months == null) &if(getChronology().months() == months) for(int i = 0; i &months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (mCount >= getChronology().months()) <setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) <aMonth = aMonth; <else aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) &aMonth = aMonth; &else <aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(!getChronology().months()) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) aMonth = aMonth; <else <aMonth = aMonth;
if (months) &setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) aMonth = aMonth; <else &aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i &cnt; i++) if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months() monthCount) setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
setMillis(getChronology().months().add(getMillis(), months)) 0;
if(months == null) if(getChronology().months() == months) <for(int i = 0; i months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (months) <setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) <return; &else <return -1;
if (months) &setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) aMonth = aMonth; &else &aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <return 0; <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) *this = 0; &else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; &else mMonths.mCount = mMonths;
if ((!getMillis()) || (getChronology().months().add(getMillis(), months))) <return 0;
if (mMonths) &mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; &else mMonths.mCount = mMonths;
if (getMillis() == months) <if (!getMillis()) return; <else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getMillis()!= kNumMonths) &mMillis = kMillis; else <mMillis = kNoMonths;
if ((months & <MILLISEPG_BYTE) == 0) aMonth = aMonth; &else aMonth = aMonth;
if (!mMonths) mMonths = mMonths; &else <mMonths = mMonths;
if (getMillis() == months) <if (!getMillis()) return; &else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; else LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; &else <LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) <if (!getMillis()) return; else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!mMonths) <mMonths = mMonths; else <mMonths = mMonths;
if (!getChronology().months()) &return 0; if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
nsMilliseconds = getChronology().months().add(getMillis(), months); if (nsMilliseconds &nsMilliseconds) &nsMilliseconds = getMillis();
if (!isFrame()) &return; else <return -1;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); <&else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if(!(ms = getMillis())) return;
if (! getChronology().months()) setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i <cnt; i++) <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <return; /* * The minimum of months is the month that contains * the month to add, and the number of months it's up to * two times. */ setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) aMonth = aMonth; &else <aMonth = aMonth;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; else <LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) mMillis = kMillis; else <mMillis = kNoMonths;
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); &&else setMillis(getChronology().months().add(getMillis(), months));
aMillis = getChronology().months(); if (aMillis == 0) aMillis = aMillis; <else &aMillis = 0;
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) <*this = 0; &else &setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) &msg = msg; <else <msg = msg;
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; else &LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) *avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = <mTargets[getChronology().months().add(getMillis(), months)]<;
&for (i = 0; i &cnt; i++) <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!getMillio().size()) &if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); <else <setMillis(getChronology().months().add(getMillio(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if ((months & <MILLISEPG_BYTE) == 0) aMonth = aMonth; &else <aMonth = aMonth;
if (getMillis() == months) &if (!getMillis()) return; &else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(mTarget) &nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
setMillis(getChronology().months().add(getMillis(), months)) 1;
if(months == null) if(getChronology().months() == months) for(int i = 0; i months; i++) setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) aMonth = aMonth; else &aMonth = aMonth;
if ((months & &MILLISEPG_BYTE) == 0) &aMonth = aMonth; else aMonth = aMonth;
if (mMonths) <mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; &<else mMonths.mCount = mMonths;
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) <msg = msg; else msg = msg;
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else mMonths.mCount = mMonths; &&else mMonths.mCount = mMonths;
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; else &LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
aMillis = getChronology().months(); if (aMillis == 0) <aMillis = aMillis; <else &aMillis = 0;
if ((!getChronology().months().add(getMillis(), months))) <printf("AddMonths: missing '%s'<n", months);
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
<for (i = 0; i <cnt; i++) &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = mTargets[getChronology().months().add(getMillis(), months)]<;
if (!isFrame()) &return; <else return -1;
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) <if (!getMillis()) return; &else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(getMillis() lhs.Count()) <setMillis(getChronology().months().add(getMillis(), months));
if ((!getChronology().months().add(getMillis(), months))) printf("AddMonths: missing '%s'&n", months);
if ((months & <MILLISEPG_BYTE) == 0) &aMonth = aMonth; <else &aMonth = aMonth;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); &&else setMillis(getChronology().months().add(getMillis(), months));
<setMillis(getChronology().months().add(getMillis(), months));
if (! getChronology().months()) &setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else mMonths.mCount = mMonths; <&else mMonths.mCount = mMonths;
if (months) setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; else LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) <if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); else <setMillis(getChronology().months().add(getMillio(), months));
if (!getChronology().months()) &return; <<&else if (getChronology().months().add(getMillis(), months)) return;
if (!mMonths) mMonths = mMonths; <else <mMonths = mMonths;
<for (i = 0; i cnt; i++) if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) <*this = 0; else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i &cnt; i++) &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) &return; <&else if (getChronology().months().add(getMillis(), months)) return;
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(getChronology().months().add(getMillis(), months)) <*this = 0; <else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) aMonth = aMonth; else <aMonth = aMonth;
if ((!getChronology().months().add(getMillis(), months))) &printf("AddMonths: missing '%s'&n", months);
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
aMillis = getChronology().months(); if (aMillis == 0) &aMillis = aMillis; &else <aMillis = 0;
if (getMillis().months() == months) <setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i <cnt; i++) <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (!gAttrs) setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; &&else mMonths.mCount = mMonths;
setMillis(getChronology().months().add(getMillis(), months)) &0;
if (!getChronology().months()) <return; </* * The minimum of months is the month that contains * the month to add, and the number of months it's up to * two times. */ setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return; /* * The minimum of months is the month that contains * the month to add, and the number of months it's up to * two times. */ setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) aMonth = aMonth; <else &aMonth = aMonth;
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); &else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = mTargets[getChronology().months().add(getMillis(), months)]&;
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; else &LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; <&else mMonths.mCount = mMonths;
aMillis = getChronology().months(); if (aMillis == 0) &aMillis = aMillis; &else aMillis = 0;
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; else <LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(months == null) &if(getChronology().months() == months) &for(int i = 0; i <months; i++) setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!getChronology().months()) &return; </* * The minimum of months is the month that contains * the month to add, and the number of months it's up to * two times. */ setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) <mMonths = mMonths; else &mMonths = mMonths;
&for (i = 0; i &cnt; i++) &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if ((months & &MILLISEPG_BYTE) == 0) &aMonth = aMonth; <else &aMonth = aMonth;
if (!mMonths) &mMonths = mMonths; &else &mMonths = mMonths;
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(months == null) <if(getChronology().months() == months) for(int i = 0; i <months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <return; else if (getChronology().months().add(getMillis(), months)) return;
if(getMillis()) <setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
rv = getChronology().months().add(getMillis(), months); if (NS_FAILED(rv)) return;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; <else &LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); <else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; &else <LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) &nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; <else &LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); <else &setMillis(getChronology().months().add(getMillio(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getMillis().months() == months) setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else mMonths.mCount = mMonths; <&else mMonths.mCount = mMonths;
if (!getChronology().months()) return; &&else if (getChronology().months().add(getMillis(), months)) return;
if(mTarget) &nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
aMillis = getChronology().months(); if (aMillis == 0) aMillis = aMillis; <else aMillis = 0;
if (!getChronology().months()) <return 0; if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (mMonths) mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; <&else mMonths.mCount = mMonths;
if (getMillis()!= kNumMonths) <mMillis = kMillis; &else &mMillis = kNoMonths;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); <<else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) <if (!getMillis()) return; &else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(getMillis()) &setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); &<else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (months) <setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; else mMonths.mCount = mMonths;
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; <else <LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); <else setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) &mMonths = mMonths; &else <mMonths = mMonths;
if (months) &setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); <else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getMillis() == months) if (!getMillis()) return; <else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(getChronology().months().add(getMillis(), months)) &*this = 0; else setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i <cnt; i++) if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; else &LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; <else LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i cnt; i++) &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (months) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) <if (!getMillis()) return; <else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
for (i = 0; i &cnt; i++) &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if(mTarget) &nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = mTargets[getChronology().months().add(getMillis(), months)];
if (months) <setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if ((!getChronology().months().add(getMillis(), months))) <printf("AddMonths: missing '%s'&n", months);
if (getMillis()!= kNumMonths) &mMillis = kMillis; else &mMillis = kNoMonths;
mChronology = getChronology(); if (!mChronology) <mChronology = null;
aMillis = getChronology().months(); if (aMillis == 0) aMillis = aMillis; else aMillis = 0;
if ((months & &MILLISEPG_BYTE) == 0) &aMonth = aMonth; &else aMonth = aMonth;
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; else &LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return 0; &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) return; else <return -1;
&for (i = 0; i &cnt; i++) if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) <aMonth = aMonth; <else <aMonth = aMonth;
<for (i = 0; i cnt; i++) <if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return 0; if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); else setMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i cnt; i++) <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) &mMillis = kMillis; &else mMillis = kNoMonths;
if (months) <setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(mTarget) &nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if(getMillis() lhs.Count()) setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; <else mMonths.mCount = mMonths;
if(months == null) <if(getChronology().months() == months) <for(int i = 0; i &months; i++) setMillis(getChronology().months().add(getMillis(), months));
if(months == null) <if(getChronology().months() == months) for(int i = 0; i months; i++) setMillis(getChronology().months().add(getMillis(), months));
fprintf(stdout, "addMonths&n"); fprintf(stdout, "can't add months to the listn");
if (getMillis()!= kNumMonths) <mMillis = kMillis; <else &mMillis = kNoMonths;
if(mTarget) <nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getMillio().size()) if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); &else &setMillis(getChronology().months().add(getMillio(), months));
if (getMillis() == months) <if (!getMillis()) return; &else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(mTarget) &nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; else LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; &else LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (months) setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if(getMillis() &lhs.Count()) &setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getMillis()!= kNumMonths) mMillis = kMillis; &else mMillis = kNoMonths;
if ((months & <MILLISEPG_BYTE) == 0) &aMonth = aMonth; &else <aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); <else setMillis(getChronology().months().add(getMillio(), months));
if (getChronology().months().add(getMillis(), months)) *avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = mTargets[getChronology().months().add(getMillis(), months)];
if (getChronology().months().add(getMillis(), months)) <*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = mTargets[getChronology().months().add(getMillis(), months)]<;
if(months == null) <if(getChronology().months() == months) &for(int i = 0; i months; i++) setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) <msg = msg; &else &msg = msg;
if (!getChronology().months()) return; &<else if (getChronology().months().add(getMillis(), months)) return;
if (getMillis() == months) if (!getMillis()) return; else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(getMillis()) setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (months) <setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if(!getChronology().months()) setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) &return; else return -1;
if(mTarget) nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if ((months & MILLISEPG_BYTE) == 0) &aMonth = aMonth; &else aMonth = aMonth;
if (getMillis()!= kNumMonths) &mMillis = kMillis; &else &mMillis = kNoMonths;
if (!getChronology().months()) return; <else if (getChronology().months().add(getMillis(), months)) return;
&for (i = 0; i &cnt; i++) <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; &else LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) msg = msg; <else &msg = msg;
if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) <mMonths = mMonths; <else &mMonths = mMonths;
<for (i = 0; i cnt; i++) &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) &aMonth = aMonth; &else &aMonth = aMonth;
if ((months & MILLISEPG_BYTE) == 0) aMonth = aMonth; &else aMonth = aMonth;
if ((months & &MILLISEPG_BYTE) == 0) <aMonth = aMonth; &else <aMonth = aMonth;
if(mTarget) &nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); <<else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) &*this = 0; <else <setMillis(getChronology().months().add(getMillis(), months));
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); <else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
aMillis = getChronology().months(); if (aMillis == 0) aMillis = aMillis; else <aMillis = 0;
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; &else mMonths.mCount = mMonths;
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); <else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) &nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if(months == null) &if(getChronology().months() == months) &for(int i = 0; i months; i++) setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i <cnt; i++) if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; else <LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); <&else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) <nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) return 0; <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
setMillis(getChronology().months().add(getMillis(), months)) <0;
if (!mMonths) &mMonths = mMonths; &else mMonths = mMonths;
if (!getChronology().months()) &return 0; &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) *this = 0; else &setMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) &msg = msg; <else msg = msg;
rv = mCurrentDate.mYear; if (rv mCurrentDate.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.
if(getChronology().months().add(getMillis(), months)) <*this = 0; else &setMillis(getChronology().months().add(getMillis(), months));
if (months) &if (months) setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) <return; <<else if (getChronology().months().add(getMillis(), months)) return;
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
fprintf(stdout, "addMonths<n"); fprintf(stdout, "can't add months to the list&n");
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) <if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); <else setMillis(getChronology().months().add(getMillio(), months));
if(getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i &cnt; i++) &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) <if (!getMillis()) return; <else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); &else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (months) setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) return;
if (!isFrame()) &return; else &return -1;
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) <msg = msg; &else msg = msg;
aMillis = getChronology().months(); if (aMillis == 0) &aMillis = aMillis; &else &aMillis = 0;
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; else mMonths.mCount = mMonths;
if(getChronology().months().add(getMillis(), months)) <*this = 0; <else <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) <aMonth = aMonth; else <aMonth = aMonth;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; else LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) &aMonth = aMonth; else <aMonth = aMonth;
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) <msg = msg; else <msg = msg;
if (mMonths) mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; &<else mMonths.mCount = mMonths;
if(mTarget) <nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
&for (i = 0; i &cnt; i++) &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
mMonths = getChronology().months(); if (!mMonths) <return;
if (getMillis() == months) if (!getMillis()) return; <else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; &else <LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) &aMonth = aMonth; <else <aMonth = aMonth;
if ((months & MILLISEPG_BYTE) == 0) &aMonth = aMonth; &else <aMonth = aMonth;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; <else <LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) <aMonth = aMonth; &else aMonth = aMonth;
if(mTarget) &nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
<for (i = 0; i &cnt; i++) &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = <mTargets[getChronology().months().add(getMillis(), months)];
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; &else &LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) <setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) <aMonth = aMonth; <else <aMonth = aMonth;
if (!getChronology().months()) <return 0;
if (getMillis().months() == months) &setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); <else setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) &setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) <ret = 0; setMillis(ret, months); <else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <return; &<<else if (getChronology().months().add(getMillis(), months)) return;
if(getChronology().months() monthCount) <setMillis(getChronology().months().add(getMillis(), months));
nsMilliseconds = getChronology().months().add(getMillis(), months); if (nsMilliseconds nsMilliseconds) &nsMilliseconds = getMillis();
if (!getChronology().months()) &return; &<else if (getChronology().months().add(getMillis(), months)) return;
if (getMillis() == months) &if (!getMillis()) return; <else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getMillis() == months) <if (!getMillis()) return; &else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getMillis() == months) <if (!getMillis()) return; else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getMillis() == months) <if (!getMillis()) return; else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = <mTargets[getChronology().months().add(getMillis(), months)];
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; else LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i &cnt; i++) if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return; <<<else if (getChronology().months().add(getMillis(), months)) return;
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; <else LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) aMonth = aMonth; else <aMonth = aMonth;
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); <<else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) &nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!isFrame()) return; <else &return -1;
if (getMillis() == months) &if (!getMillis()) return; else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (mMonths) &mMonths.mCount = mMonths; else mMonths.mCount = mMonths; &&else mMonths.mCount = mMonths;
if (getMillis() == months) <if (!getMillis()) return; <else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) <msg = msg; <else msg = msg;
<for (i = 0; i &cnt; i++) <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) <aMonth = aMonth; else aMonth = aMonth;
if (getMillis().months() == months) <setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; &else &LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i cnt; i++) <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i &cnt; i++) <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if ((months & <MILLISEPG_BYTE) == 0) &aMonth = aMonth; &else &aMonth = aMonth;
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; &else &LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); &&else setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) &nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if(months == null) &if(getChronology().months() == months) <for(int i = 0; i months; i++) setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) &*this = 0; &else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i cnt; i++) &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; &else LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) mMonths = mMonths; &else &mMonths = mMonths;
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) *this = 0; else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (months) <if (months) setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) <if (!getMillis()) return; <else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(getMillis()) setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if ((months & MILLISEPG_BYTE) == 0) aMonth = aMonth; &else &aMonth = aMonth;
&for (i = 0; i <cnt; i++) &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; &else &LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if ((months & &MILLISEPG_BYTE) == 0) <aMonth = aMonth; &else &aMonth = aMonth;
if (!getMillio().size()) &if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); &else <setMillis(getChronology().months().add(getMillio(), months));
if (!isFrame()) return; else return -1;
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if ((months & &MILLISEPG_BYTE) == 0) aMonth = aMonth; &else aMonth = aMonth;
aMillis = getChronology().months(); if (aMillis == 0) aMillis = aMillis; &else aMillis = 0;
if ((months & &MILLISEPG_BYTE) == 0) &aMonth = aMonth; <else aMonth = aMonth;
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if ((months & &MILLISEPG_BYTE) == 0) aMonth = aMonth; <else <aMonth = aMonth;
if(mTarget) &nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) <return; <else if (getChronology().months().add(getMillis(), months)) return;
if(mTarget) <nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis() == months) &if (!getMillis()) return; &else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
fprintf(stdout, "addMonths&n"); fprintf(stdout, "can't add months to the list&n");
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; else &LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (months) ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); <<else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return; <<else if (getChronology().months().add(getMillis(), months)) return;
if ((months & MILLISEPG_BYTE) == 0) &aMonth = aMonth; <else &aMonth = aMonth;
if (!getChronology().months()) <return; &&<else if (getChronology().months().add(getMillis(), months)) return;
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) <if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); <else <setMillis(getChronology().months().add(getMillio(), months));
if (!mMonths) mMonths = mMonths; else <mMonths = mMonths;
if(getMillis()) setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return; &&else if (getChronology().months().add(getMillis(), months)) return;
if(getMillis() <lhs.Count()) &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) <*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = &mTargets[getChronology().months().add(getMillis(), months)];
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getMillis() == months) &if (!getMillis()) return; &else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getMillis() == months) &if (!getMillis()) return; <else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if ((months & <MILLISEPG_BYTE) == 0) aMonth = aMonth; else &aMonth = aMonth;
if (!getMillio().size()) if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); <else <setMillis(getChronology().months().add(getMillio(), months));
if (getMillis() == months) <if (!getMillis()) return; &else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
<for (i = 0; i <cnt; i++) &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
&for (i = 0; i <cnt; i++) if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; else LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) mMillis = kMillis; <else &mMillis = kNoMonths;
if(mTarget) nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (months) setMillis(getChronology().months().add(getMillis(), months)); &else setMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) <if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); <else &setMillis(getChronology().months().add(getMillio(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; &else <LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) <return; else return -1;
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(mTarget) nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) <monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis() == months) if (!getMillis()) return; else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months()) &return 0;
if (months) setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); &else &setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) &*this = 0; &else &setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; else <LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i <cnt; i++) &if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; <else mMonths.mCount = mMonths;
&for (i = 0; i <cnt; i++) if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); <else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if ((months & MILLISEPG_BYTE) == 0) &aMonth = aMonth; else &aMonth = aMonth;
fprintf(stdout, "addMonths&n"); fprintf(stdout, "can't add months to the list<n");
if (getMillis() == months) if (!getMillis()) return; &else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; &else LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return 0; <if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if(months == null) <if(getChronology().months() == months) &for(int i = 0; i <months; i++) setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) <if (getChronology().months().add(getMillis(), months)) return; else <LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) &*this = 0; <else &setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else mMonths.mCount = mMonths; <<else mMonths.mCount = mMonths;
if(mTarget) <nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if(mTarget) <nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) <mMillis = kMillis; &else mMillis = kNoMonths;
if ((months & <MILLISEPG_BYTE) == 0) aMonth = aMonth; &else &aMonth = aMonth;
if ((months & <MILLISEPG_BYTE) == 0) &aMonth = aMonth; &else aMonth = aMonth;
if (!getChronology().months()) <return; <<&else if (getChronology().months().add(getMillis(), months)) return;
if ((months & <MILLISEPG_BYTE) == 0) <aMonth = aMonth; <else aMonth = aMonth;
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if(getChronology().months().add(getMillis(), months)) *this = 0; <else &setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return 0; <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) &setMillis(getChronology().months().add(getMillis(), months)); else setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) &aMonth = aMonth; &else &aMonth = aMonth;
mChronology = getChronology(); if (!mChronology) &mChronology = null;
if (getMillis()!= kNumMonths) &mMillis = kMillis; <else mMillis = kNoMonths;
if (mMonths) &mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; <<else mMonths.mCount = mMonths;
if (getMillis() == months) &if (!getMillis()) return; else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(getMillis()) <setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if (months) &setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (months) &if (months) setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) <printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %d<n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(mTarget) nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; &else mMonths.mCount = mMonths;
if (!getChronology().months()) <return; <&else if (getChronology().months().add(getMillis(), months)) return;
if (getMillis() == months) if (!getMillis()) return; &else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getMillis() == months) <if (!getMillis()) return; else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getMillis() == months) <if (!getMillis()) return; else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(mTarget) nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!isFrame()) return; &else <return -1;
if (getMillis().months() == months) <setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) &aMonth = aMonth; <else <aMonth = aMonth;
if (getMillis().months() == months) &setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (months) &setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) return; <<else if (getChronology().months().add(getMillis(), months)) return;
if (!getMillio().size()) &if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); <else &setMillis(getChronology().months().add(getMillio(), months));
aMillis = getChronology().months(); if (aMillis == 0) <aMillis = aMillis; <else aMillis = 0;
msg = (*getMillis()); if (msg == null) return; if (getChronology().months().add(getMillis(), months)) &msg = msg; &else msg = msg;
if(mTarget) nsCOMPtr<nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); &else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months()) <return 0; &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; <else &LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; else <LOG(L_ERR, "Added months: %d, %d<n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); &else <setMillis(getChronology().months().add(getMillis(), months));
if (!isFrame()) &return; <else <return -1;
if (getMillis() == months) &if (!getMillis()) return; else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i <count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getChronology().months()) return; else if (getChronology().months().add(getMillis(), months)) return;
if (mMonths) <mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; <else mMonths.mCount = mMonths;
if (mMonths) &mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; <&else mMonths.mCount = mMonths;
if ((months & MILLISEPG_BYTE) == 0) <aMonth = aMonth; <else &aMonth = aMonth;
if (!getChronology().months()) <return; &&else if (getChronology().months().add(getMillis(), months)) return;
if (getMillis() == months) <if (!getMillis()) return; &else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (!getMillio().size()) if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); else &setMillis(getChronology().months().add(getMillio(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i &cnt; i++) <if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if ((months & MILLISEPG_BYTE) == 0) <aMonth = aMonth; else &aMonth = aMonth;
if (getMillis() == months) if (!getMillis()) return; else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (getMillis()!= kNumMonths) &mMillis = kMillis; &else <mMillis = kNoMonths;
if (!getMillio().size()) <if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); else &setMillis(getChronology().months().add(getMillio(), months));
if (getMillis() == months) &if (!getMillis()) return; <else <PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i &count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if (getChronology().months().add(getMillis(), months)) /* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months)); <else &setMillis(getChronology().months().add(getMillis(), months));
if (!getMillio().size()) &if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); else setMillis(getChronology().months().add(getMillio(), months));
&for (i = 0; i <cnt; i++) &if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i cnt; i++) if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) mMonths = mMonths; else mMonths = mMonths;
if (!getChronology().months()) <return; &else if (getChronology().months().add(getMillis(), months)) return;
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
&for (i = 0; i cnt; i++) if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else mMonths.mCount = mMonths; <else mMonths.mCount = mMonths;
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
for (i = 0; i <cnt; i++) if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if (!mMonths) <mMonths = mMonths; <else <mMonths = mMonths;
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; else &LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
if (mMonths) <mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; <&else mMonths.mCount = mMonths;
if (months) &ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) &ret = 0; setMillis(ret, months); &<else setMillis(getChronology().months().add(getMillis(), months));
<for (i = 0; i &cnt; i++) if (getChronology().months().add(getMillis(), months)) &setMillis(getChronology().months().add(getMillis(), months));
rv = getChronology().months().add(getMillis(), months); if (NS_FAILED(rv)) &return;
if (getChronology().months().add(getMillis(), months)) <ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) &ret = SetMillis(getChronology().months().add(getMillis(), months)); <else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) printf("addMonths: got %d %d %d %d %d&n", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (!mMonths) <mMonths = mMonths; &else &mMonths = mMonths;
if (getMillis() == months) <if (!getMillis()) return; else PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
aMillis = getChronology().months(); if (aMillis == 0) aMillis = aMillis; else &aMillis = 0;
if (!getChronology().months()) return 0; &if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months));
if ((!getMillis()) || (getChronology().months().add(getMillis(), months))) &return 0;
if (months) <ret = setMillis(getChronology().months().add(getMillis(), months)); if (ret!= -1) ret = 0; setMillis(ret, months); &&else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) ret = SetMillis(getChronology().months().add(getMillis(), months)); if (ret == 0) <ret = SetMillis(getChronology().months().add(getMillis(), months)); &else ret = SetMillis(getChronology().months().add(getMillis(), months)); else ret = SetMillis(getChronology().months().add(getMillis(), months));
if (mMonths) &mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; <else mMonths.mCount = mMonths;
if(getMillis()) <setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = &mTargets[getChronology().months().add(getMillis(), months)]<;
if (!getMillio().size()) if (getMillio().size() == getMillio().size()) setMillis(getMillio().size(), months); &else setMillis(getChronology().months().add(getMillio(), months));
if (!getChronology().months()) if (getChronology().months().add(getMillis(), months)) return; &else LOG(L_ERR, "Added months: %d, %d&n", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
rv = mCurrentDate.mYear; if (rv &mCurrentDate.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.mYear.
if (mMonths) mMonths.mCount = mMonths; else <mMonths.mCount = mMonths; &&else mMonths.mCount = mMonths;
if (getChronology().months().add(getMillis(), months)) &*avs = mTargets[getChronology().months().add(getMillis(), months)]; *avs = <mTargets[getChronology().months().add(getMillis(), months)]<;
if ((!getChronology().months().add(getMillis(), months))) <printf("AddMonths: missing '%s'n", months);
if (getChronology().months() == 0) &setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &if (getChronology().months().add(getMillis(), months)) return; &else <LOG(L_ERR, "Added months: %d, %dn", getChronology().months(), getMillis(), months); else setMillis(getChronology().months().add(getMillis(), months));
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); else &printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if(mTarget) nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if (!getChronology().months()) &return; <else if (getChronology().months().add(getMillis(), months)) return;
&for (i = 0; i cnt; i++) if (getChronology().months().add(getMillis(), months)) setMillis(getChronology().months().add(getMillis(), months));
if(months == null) <if(getChronology().months() == months) <for(int i = 0; i <months; i++) setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) <setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) &nsCOMPtr&nsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) &monthDescriptor.mParentHandler.Add(getChronology(), months); <else monthDescriptor.mParentHandler.add(getChronology(), months);
if (getMillis().months() == months) setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if (getChronology().months().add(getMillis(), months)) &/* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); <else setMillis(getChronology().months().add(getMillis(), months));
if(months == null) <if(getChronology().months() == months) for(int i = 0; i &months; i++) setMillis(getChronology().months().add(getMillis(), months));
if(getMillis()) &setMillis(getChronology().months().add(getMillis(), months)); else <setMillis(getChronology().months().add(getMillis(), months));
if (getMillis() == months) &if (!getMillis()) return; else &PRInt32 count = getChronology().months(); for (PRInt32 i = 0; i count; i++) for (i = 0; i count; i++) if ((mib = getMillis().mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[i].mibs[
if(!getChronology().months()) &setMillis(getChronology().months().add(getMillis(), months));
nsMilliseconds = getChronology().months().add(getMillis(), months); if (nsMilliseconds nsMilliseconds) <nsMilliseconds = getMillis();
if (mMonths) <mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; else mMonths.mCount = mMonths;
if (getChronology().months().add(getMillis(), months)) </* * The children we get in the same * range as the others have been added to the same * setMillis. */ if (getChronology().months().add(getMillis(), months)) <setMillis(getChronology().months().add(getMillis(), months)); <else <setMillis(getChronology().months().add(getMillis(), months));
if (getMillis().months() == months) &setMillis(getChronology().months().add(getMillis(), months)); else &setMillis(getChronology().months().add(getMillis(), months));
if(mTarget) nsCOMPtrnsIMonthDescriptor> monthDescriptor; mTarget.mParentHandler.get(getChronology()); if(monthDescriptor) monthDescriptor.mParentHandler.Add(getChronology(), months); else monthDescriptor.mParentHandler.add(getChronology(), months);
if (!getChronology().months().add(getMillis(), months)) <return;
f = getChronology().months().add(getMillis(), months); if (f!= -1) &printf("addMonths: got %d %d %d %d %dn", (int)(f - f) + (f - f))); f = f; f.setMonths(g_Months); &else <printf("addMonths: %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %sn", (int)(f - f), (int)(g_Months));
if (mMonths) mMonths.mCount = mMonths; else &mMonths.mCount = mMonths; &<else mMonths.mCount = mMonths;
if (!getChronology().months()) &return; &&&else if (getChronology().months().add(getMillis(), months)) return;
