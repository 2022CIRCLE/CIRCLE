golden:
Iterator iter = res.entries.iterator();
inference:
Iterator iter = res.entries.iterator();

Iterator iter = entries.iterator();
Iterator iter = res.entries;
ConstIterator iter = res.entries.iterator();
res.entries.iterator();
Iterator iter = iter.entries.iterator();
iter = res.entries.iterator();
Entries iter = res.entries.iterator();
Iterator iter = res.entries.iterator();
Iterator iter = res.iterator();
Iterator iter; res.entries.iterator();
List iter = res.entries.iterator();
Iterator iter = res._entries.iterator();
Iterator iter;
Iterator iter = res.entries[0].iterator();
Iterator iter = new OpenMapRealVector(this);
Iterator iter = res.keys.iterator();
Iterator iter = Entries.iterator();
OpenMapRealVector res;
Iterator iter = res.values.iterator();
Iterator iter = res.elements.iterator();
Iterator iter = new OpenMapRealVector();
Iterator iter = res.entries.iterator();
Iterator iter = iter.next();
Iterator iter = new OpenMapRealVector(res);
Init();
Iterator iter = entries.iterator();
nsresult rv;
Iterator iter = res;
void* iter = res.entries.iterator();
Iterator iter = res.entries.elementAt(0);
res = new OpenMapRealVector(this);
rv = res.entries.iterator();
Iterator iter = v.entries.iterator();
Iterator iter = res.entries[0];
Const Iterator iter = res.entries.iterator();
res.entries = res.entries;
Integer iter = res.entries.iterator();
Enumerator iter = res.entries.iterator();
OpenMapRealVector iter;
char* iter = res.entries.iterator();
Iterator iter = res.list().iterator();
Entries iter = res.entries;
Iterator iter = res.entries[i];
Iterator iter = res.entryList.iterator();
Then iter = res.entries.iterator();
Iterator iter = res.retries.iterator();
Iterator iter=res.entries.iterator();
Iterator iter = res.entries.next();
Iterator iter = openMapRealVector(res);
const Iterator iter = res.entries.iterator();
void *iter = res.entries.iterator();
Iteratoriter = res.entries.iterator();
Iterator iter = res.list();
res.entries = res;
Iterator iter = res.entries[1];
Iterator iter = iter.entries.iterator();
iter = res.entries;
Iterator iter = res.entries[1].iterator();
PRInt32 iter = res.entries.iterator();
*iter = res.entries.iterator();
ULong iter = res.entries.iterator();
Iterator iter = res.entries[i].iterator();
OpenMapRealVector iter = res.entries;
Iterator iter = res.open();
Iterator iter = this.entries.iterator();
Iterator iter = res.entries.iterator(this);
Iterator iter = entryList.iterator();
Iterator iter = EntriesIterator();
void iter = res.entries.iterator();
int iter = res.entries.iterator();
Iterator iter = res_entries.iterator();
Iterator iter = res.first();
Runnable iter = res.entries.iterator();
Iterator iter = res.entries.entryCount();
Object iter = res.entries.iterator();
Iterator iter = res.entryCount;
Iterator iter(res.entries);
Iterator iter = iter.entries;
PRUint32 iter = res.entries.iterator();
Assert iter = res.entries.iterator();
Iterator iter = res.entryCount();
Iterator iter = res.next;
Iterator iter = res.entries - 1;
Iterator iter = retries.iterator();
final Iterator iter = res.entries.iterator();
__iter = res.entries.iterator();
OpenMapRealVector iter(res);
Iterator iter = res.entryCount.iterator();
Iterator iter = res.items.iterator();
bool iter = res.entries.iterator();
Iterator iter = iter.iterator();
const char* iter = res.entries.iterator();
WeakReference iter = res.entries.iterator();
Iterator theEntry = res.entries.iterator();
Iterator iter = &res.entries.iterator();
Iterator iter = res.keys().iterator();
Iterator res = res.entries.iterator();
InitIterator iter = res.entries.iterator();
Iterator iter = this.entries.iterator();
Iterator iter = res.mEntries.iterator();
Iterator iter = iter.next;
Iterator iter = entries;
Iterator iter1 = res.entries.iterator();
Iterator iter2 = res.entries.iterator();
Iterator iter = res.count();
Iterator iter = *res.entries.iterator();
Iterator iter = res.data.entries.iterator();
Iterator iter = res.listeners.iterator();
Constantiterator iter = res.entries.iterator();
Key iter = res.entries.iterator();
res.entries = new OpenMapRealVector(this);
Set iter = res.entries.iterator();
ulong iter = res.entries.iterator();
Entries* iter = res.entries.iterator();
Iterator iter = res.entries.values();
InitEntry iter = res.entries.iterator();
Iterator iter = res.entries::iterator();
Iterator iter = res.getEntries().iterator();
Iterator iter = res::entries.iterator();
Enumerator iter = res.entries.elements();
Iterator iter = res.__entries.iterator();
MapEntry iter = res.entries.iterator();
Iterator iter = res.entries.next;
Iterator iter = itsEntries.iterator();
Iterator iter = list(res.entries);
Iterator iter = res.entries.elementAt(i);
iterator iter = res.entries.iterator();
Iterator iter = _entries.iterator();
Iterator iter = res.entries.iterator(*this);
ConstantIterator iter = res.entries.iterator();
NodeList iter = res.entries.iterator();
res.entries = iterator();
aIterator iter = res.entries.iterator();
Iterator iter = its.entries.iterator();
Iterator iter = res.entry.iterator();
res.entries.iterator();
Iterator iter = iters.iterator();
iter = entries.iterator();
Init(res);
Iterator iter = res.close();
Iterator iter = res.entries.iterator(res);
Iterator iter = Entries().iterator();
Allocator iter = res.entries.iterator();
Iterator iter = res.entries.entry();
Item iter = res.entries.iterator();
Iterator* iter = res.entries.iterator();
AttributeKey iter = res.entries.iterator();
Iterator iter = iter;
Iterator iter = iter.entryCount();
Iterator i = res.entries.iterator();
Iterator iter = res.keyList.iterator();
i = res.entries.iterator();
Iterator iter = res.count;
Iterator res = res.entries;
Iterator iter = res.get().iterator();
Iterator iter = entry.entries.iterator();
Iterator iter = list(res.entries).iterator();
res = new OpenMapRealVector();
IteratorOpenMapRealVector> iter;
Iterator iter = new Iterator();
Iterator iter = res.entries!= null;
entries = res.entries;
Iterator iter = res.entries = iterator();
Iterator iter = res.first;
iter = iter.entries.iterator();
Iterator iter = res.entries.iterator(next);
Iterator iter = res.entries  0;
r = res.entries.iterator();
Iterator iter = res.entries.ElementAt(0);
res.entries = iter;
Iterator iter = Iterator();
*aResult = res.entries.iterator();
Iterator iter = res.entries.iterator( this );
Iterator res;
OpenMapRealVector* iter = res.entries;
Close();
NS_ENSURE_ARG_POINTER(res);
Iterator iter = res.entries.iterator(1);
Iterator iter = res.entries.ElementAt(i);
Iterator iter = 0;
res.entries = new OpenMapRealVector();
Iterator iter = res.entries = res.entries;
Iterator iter = res.entries.key();
Iterator iter = res = new OpenMapRealVector();
Entries iter;
Iterator iter = res.entries.iterator(first);
Iterator iter = res.entries.iterator( );
if (!res.entries)  Iterator iter = res.entries.iterator();
res.entries = res.entries; Iterator iter = res.entries;
if (res.entries) iter = res.entries.iterator();
if (res)  Iterator iter = res.entries.iterator();
if (res.entries)  res.setEntry(iter.key(), iter.value() / v[iter.key()]);
/* Iterator iter = res.entries.iterator(); */
nsresult iter = res.entries.iterator();
if (v.length > 1)  Iterator iter = res.entries.iterator();  else  /* This should be clear */ res.entries.advance();
v_iter = res.entries.iterator();
if (res.entries)  Iterator iter = res.entries.iterator();  else  Iterator iter = res.entries.iterator();
/* FIXME: OpenMapRealVector isn't a valid OpenMapRealVector */ Iterator iter = res.entries.iterator();
res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator();
rv = res.entries.iterator(); if (rv)  Iterator iter = iter.next;
nsresult rv; nsresult rv;
nsresult rv; rv = res.entries.iterator();
nsresult rv; rv = OpenMapRealVector(res);
/* * Check for a double dimension. */ res = new OpenMapRealVector(this);
if (res)  if (! res.mDimensions)  res.mDimensions = 0;  res.mPool = res.mPool; res.mFlush = 0;
rv = openMapRealVector(this);
res = new OpenMapRealVector(this); if (res)  iter = res.entries.iterator();
v = res.entries; if (v == 0)  Iterator iter = iter.iterator();
struct res_entry *entry = res.entries; Iterator iter = entry.iterator();
if (!res.entries) <Iterator iter = res.entries.iterator();
if (res) &if (! res.mDimensions) <res.mDimensions = 0; &res.mPool = res.mPool; res.mFlush = 0;
if (res.entries) &Iterator iter = res.entries.iterator(); <else <Iterator iter = res.entries.iterator();
rv = res.entries.iterator(); if (rv) Iterator iter = iter.next;
if (!res.entries) &Iterator iter = res.entries.iterator();
v = res.entries; if (v == 0) <Iterator iter = iter.iterator();
if (res) <if (! res.mDimensions) <res.mDimensions = 0; <res.mPool = res.mPool; res.mFlush = 0;
if (res) <if (! res.mDimensions) &res.mDimensions = 0; <res.mPool = res.mPool; res.mFlush = 0;
Iterator iter = res.entries.iterator();
Iterator iter = res.entries.iterator();
if (res) if (! res.mDimensions) &res.mDimensions = 0; res.mPool = res.mPool; res.mFlush = 0;
if (v.length > 1) &Iterator iter = res.entries.iterator(); <else /* This should be clear */ res.entries.advance();
if (v.length > 1) &Iterator iter = res.entries.iterator(); else </* This should be clear */ res.entries.advance();
if (v.length > 1) Iterator iter = res.entries.iterator(); else &/* This should be clear */ res.entries.advance();
if (v.length > 1) <Iterator iter = res.entries.iterator(); <else </* This should be clear */ res.entries.advance();
if (res.entries) Iterator iter = res.entries.iterator(); &else <Iterator iter = res.entries.iterator();
if (res) <if (! res.mDimensions) &res.mDimensions = 0; &res.mPool = res.mPool; res.mFlush = 0;
if (res) if (! res.mDimensions) res.mDimensions = 0; <res.mPool = res.mPool; res.mFlush = 0;
if (res.entries) &res.setEntry(iter.key(), iter.value() / v[iter.key()]);
if (res) &Iterator iter = res.entries.iterator();
if (v.length > 1) &Iterator iter = res.entries.iterator(); &else </* This should be clear */ res.entries.advance();
if (v.length > 1) <Iterator iter = res.entries.iterator(); else &/* This should be clear */ res.entries.advance();
if (res) if (! res.mDimensions) <res.mDimensions = 0; res.mPool = res.mPool; res.mFlush = 0;
if (res.entries) Iterator iter = res.entries.iterator(); &else Iterator iter = res.entries.iterator();
if (v.length > 1) Iterator iter = res.entries.iterator(); else </* This should be clear */ res.entries.advance();
if (res) &if (! res.mDimensions) <res.mDimensions = 0; <res.mPool = res.mPool; res.mFlush = 0;
if (v.length > 1) Iterator iter = res.entries.iterator(); <else &/* This should be clear */ res.entries.advance();
rv = res.entries.iterator(); if (rv) &Iterator iter = iter.next;
if (res.entries) Iterator iter = res.entries.iterator(); else Iterator iter = res.entries.iterator();
Iterator iter = res.entries 0;
if (res) &if (! res.mDimensions) res.mDimensions = 0; res.mPool = res.mPool; res.mFlush = 0;
v = res.entries; if (v == 0) Iterator iter = iter.iterator();
if (res.entries) <Iterator iter = res.entries.iterator(); &else Iterator iter = res.entries.iterator();
if (res) if (! res.mDimensions) &res.mDimensions = 0; <res.mPool = res.mPool; res.mFlush = 0;
if (v.length > 1) Iterator iter = res.entries.iterator(); else /* This should be clear */ res.entries.advance();
if (v.length > 1) <Iterator iter = res.entries.iterator(); else /* This should be clear */ res.entries.advance();
if (v.length > 1) Iterator iter = res.entries.iterator(); &else /* This should be clear */ res.entries.advance();
if (v.length > 1) <Iterator iter = res.entries.iterator(); else </* This should be clear */ res.entries.advance();
if (res.entries) <res.setEntry(iter.key(), iter.value() / v[iter.key()]);
if (res.entries) &Iterator iter = res.entries.iterator(); <else &Iterator iter = res.entries.iterator();
if (v.length > 1) &Iterator iter = res.entries.iterator(); <else &/* This should be clear */ res.entries.advance();
if (res.entries) <Iterator iter = res.entries.iterator(); &else &Iterator iter = res.entries.iterator();
if (res.entries) <Iterator iter = res.entries.iterator(); &else <Iterator iter = res.entries.iterator();
if (v.length > 1) <Iterator iter = res.entries.iterator(); &else /* This should be clear */ res.entries.advance();
if (v.length > 1) &Iterator iter = res.entries.iterator(); &else /* This should be clear */ res.entries.advance();
if (res.entries) &Iterator iter = res.entries.iterator(); &else <Iterator iter = res.entries.iterator();
if (v.length > 1) <Iterator iter = res.entries.iterator(); <else &/* This should be clear */ res.entries.advance();
if (v.length > 1) Iterator iter = res.entries.iterator(); &else &/* This should be clear */ res.entries.advance();
if (res) if (! res.mDimensions) res.mDimensions = 0; &res.mPool = res.mPool; res.mFlush = 0;
if (res.entries) &Iterator iter = res.entries.iterator(); &else Iterator iter = res.entries.iterator();
if (res.entries) Iterator iter = res.entries.iterator(); <else Iterator iter = res.entries.iterator();
if (res) &if (! res.mDimensions) &res.mDimensions = 0; res.mPool = res.mPool; res.mFlush = 0;
if (res) &if (! res.mDimensions) <res.mDimensions = 0; res.mPool = res.mPool; res.mFlush = 0;
if (res) Iterator iter = res.entries.iterator();
res = new OpenMapRealVector(this); if (res) &iter = res.entries.iterator();
if (v.length > 1) Iterator iter = res.entries.iterator(); &else </* This should be clear */ res.entries.advance();
if (res.entries) <Iterator iter = res.entries.iterator(); else Iterator iter = res.entries.iterator();
if (v.length > 1) &Iterator iter = res.entries.iterator(); else /* This should be clear */ res.entries.advance();
if (res) &if (! res.mDimensions) &res.mDimensions = 0; &res.mPool = res.mPool; res.mFlush = 0;
if (res.entries) <Iterator iter = res.entries.iterator(); else <Iterator iter = res.entries.iterator();
if (res) <if (! res.mDimensions) res.mDimensions = 0; <res.mPool = res.mPool; res.mFlush = 0;
if (res.entries) Iterator iter = res.entries.iterator(); <else <Iterator iter = res.entries.iterator();
if (res) <if (! res.mDimensions) <res.mDimensions = 0; res.mPool = res.mPool; res.mFlush = 0;
if (res.entries) <Iterator iter = res.entries.iterator(); <else Iterator iter = res.entries.iterator();
<Iterator iter = res.entries.iterator();
IteratorOpenMapRealVector> iter;
if (res) <if (! res.mDimensions) res.mDimensions = 0; &res.mPool = res.mPool; res.mFlush = 0;
if (res.entries) &Iterator iter = res.entries.iterator(); else Iterator iter = res.entries.iterator();
rv = res.entries.iterator(); if (rv) <Iterator iter = iter.next;
if (v.length > 1) &Iterator iter = res.entries.iterator(); &else &/* This should be clear */ res.entries.advance();
if (res.entries) Iterator iter = res.entries.iterator(); else &Iterator iter = res.entries.iterator();
if (res.entries) <Iterator iter = res.entries.iterator(); else &Iterator iter = res.entries.iterator();
if (v.length > 1) <Iterator iter = res.entries.iterator(); &else </* This should be clear */ res.entries.advance();
if (res) if (! res.mDimensions) &res.mDimensions = 0; &res.mPool = res.mPool; res.mFlush = 0;
if (res) <if (! res.mDimensions) res.mDimensions = 0; res.mPool = res.mPool; res.mFlush = 0;
if (res.entries) &Iterator iter = res.entries.iterator(); else &Iterator iter = res.entries.iterator();
if (res) if (! res.mDimensions) <res.mDimensions = 0; &res.mPool = res.mPool; res.mFlush = 0;
if (res) &if (! res.mDimensions) res.mDimensions = 0; <res.mPool = res.mPool; res.mFlush = 0;
if (res) if (! res.mDimensions) <res.mDimensions = 0; <res.mPool = res.mPool; res.mFlush = 0;
if (!res.entries) Iterator iter = res.entries.iterator();
if (v.length > 1) Iterator iter = res.entries.iterator(); <else </* This should be clear */ res.entries.advance();
v = res.entries; if (v == 0) &Iterator iter = iter.iterator();
res = new OpenMapRealVector(this); if (res) <iter = res.entries.iterator();
if (res) if (! res.mDimensions) res.mDimensions = 0; res.mPool = res.mPool; res.mFlush = 0;
if (v.length > 1) <Iterator iter = res.entries.iterator(); <else /* This should be clear */ res.entries.advance();
Iterator<OpenMapRealVector> iter;
if (res) <Iterator iter = res.entries.iterator();
if (res.entries) Iterator iter = res.entries.iterator(); <else &Iterator iter = res.entries.iterator();
if (res) &if (! res.mDimensions) res.mDimensions = 0; &res.mPool = res.mPool; res.mFlush = 0;
Iterator iter = res.entries &0;
if (res.entries) <Iterator iter = res.entries.iterator(); <else &Iterator iter = res.entries.iterator();
if (v.length > 1) Iterator iter = res.entries.iterator(); <else /* This should be clear */ res.entries.advance();
if (res.entries) &Iterator iter = res.entries.iterator(); else <Iterator iter = res.entries.iterator();
if (res.entries) Iterator iter = res.entries.iterator(); &else &Iterator iter = res.entries.iterator();
if (res) &if (! res.mDimensions) &res.mDimensions = 0; <res.mPool = res.mPool; res.mFlush = 0;
if (v.length > 1) &Iterator iter = res.entries.iterator(); <else </* This should be clear */ res.entries.advance();
if (res.entries) res.setEntry(iter.key(), iter.value() / v[iter.key()]);
if (v.length > 1) &Iterator iter = res.entries.iterator(); else &/* This should be clear */ res.entries.advance();
if (res.entries) &Iterator iter = res.entries.iterator(); &else &Iterator iter = res.entries.iterator();
if (res.entries) &Iterator iter = res.entries.iterator(); <else Iterator iter = res.entries.iterator();
if (res.entries) Iterator iter = res.entries.iterator(); else <Iterator iter = res.entries.iterator();
res = new OpenMapRealVector(this); if (res) iter = res.entries.iterator();
if (v.length > 1) <Iterator iter = res.entries.iterator(); &else &/* This should be clear */ res.entries.advance();
if (res.entries) <Iterator iter = res.entries.iterator(); <else <Iterator iter = res.entries.iterator();
if (res) <if (! res.mDimensions) <res.mDimensions = 0; &res.mPool = res.mPool; res.mFlush = 0;
&Iterator iter = res.entries.iterator();
Iterator iter = res.entries <0;
Iterator&OpenMapRealVector> iter;
if (res) <if (! res.mDimensions) &res.mDimensions = 0; res.mPool = res.mPool; res.mFlush = 0;
