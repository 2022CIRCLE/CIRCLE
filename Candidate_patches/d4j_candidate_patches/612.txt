
parseDirectives(node);
parseDirectives(bodyNode.get());
parseDirectives(bodyNode, flags);
parseDirectives(bodyNode.getParent());
parseDirectives(bodyNode, 0);
parseDirectives(bodyNode, lp);
parseDirectives(bodyNode, true);
parseDirectives(bodyNode.getNodeType());
parseDirectives(bodyNode, false);
parseDirectives(bodyNode, true);
parseDirectives(newNode);
node.addChildToBack(newName);
parseDirectives();
parseDirectives(&bodyNode);
parseDirectives(bodyNode, false);
parseDirectives(bodyNode.getNodeInfo());
parseDirectives(bodyNode, node);
parseDirectives(bodyNode, null);
parseDirectives(bodyNode, "");
parseDirectives(bodyNode, -1);
return parseDirectives(bodyNode);
parseDirectives(bodyNode);
parseDirectives(bodyNode, name);
parseDirectives(bodyNode, &newName);
parseDirectives(bodyNode, 1);
parseDirectives(node, bodyNode);
parseDirectives(bodyNode, this);
self.parseDirectives(bodyNode);
parseDirectives(bodyNode.getText());
parseDirectives(bodyNode.getFirst());
/* parseDirectives(bodyNode); */
parseDirectives(bodyNode, newName);
node.addChildToBack(newNode);
parseDirectives(bodyNode.getLineno());
rv = parseDirectives(bodyNode);
parseDirectives(newNode, bodyNode);
*parseDirectives(bodyNode);
bodyNode.parseDirectives(bodyNode);
parseDirectives(bodyNode, false);
parseDirectives(bodyNode, functionNode);
parseDirectives(bodyNode, p);
parseDirectives(bodyNode.getLength());
parseDirectives(bodyNode, line);
parseDirectives(bodyNode.getNext());
node.addChildToBack(bodyNode);
parseDirectives(parentNode);
ParseDirectives(bodyNode);
result = parseDirectives(bodyNode);
(void) parseDirectives(bodyNode);
parseDirectives(bodyNode, token);
lp = parseDirectives(bodyNode);
parseDirectives(bodyNode, '0');
parseDirectives(bodyNode.firstChild);
parseDirectives (bodyNode);
parseDirectives(bodyNode, result);
parseDirectives(bodyNode.GetNodeType());
parseDirectives(bodyNode, null);
break;
deprecatedParseDirectives(bodyNode);
parseDirectives(body);
(void)parseDirectives(bodyNode);
parseDirectives(bodyNode, false);
parseDirectives(bodyNode.getName());
parseDirectives(bodyNode, scope);
parseDirectives(bodyNode, value);
parseDirectives(bodyNode.copy());
parseDirectives(newName);
parseDirectives(bodyNode, true);
parseDirectives(bodyNode, parentNode);
parseDirectives(bodyNode, type);
mParseDirectives(bodyNode);
parseDirectives(aNode);
parseDirectives(bodyNode.getContent());
parseDirectives(bodyNode, status);
getParseDirectives(bodyNode);
this.parseDirectives(bodyNode);
parseDirectives(inNode);
/* ParseDirectives(bodyNode); */
parseDirectives(childNode);
parseDirectives(bodyNode, 0, 0);
parseDirectives(targetNode);
_parseDirectives(bodyNode);
/* parseDirectives(bodyNode);*/
parseDirectives(bodyNode, &node);
parseDirectives(bodyNode, nil);
parseDirectives(bodyNode, state);
parseDirectives(pNode);
parseDirectives(outerNode);
parseDirectives(resultNode);
parseDirectives(bodyNode, len);
super.parseDirectives(bodyNode);
parseDirectives(bodyNode, buf);
parseDirectives(bodyNode.parentNode);
parseDirectives(deprecatedNode);
parseDirectives(bodyNode, true);
bodyNode = parseDirectives(bodyNode);
parseDirectives(bodyNode.parentNode);
parseDirectives(bodyNode, rv);
parseDirectives(bodyNode, functionType);
parseDirectives(functionNode);
parseDirectives(bodyNode, length);
parseDirectives(bodyNode, "", 0);
parseDirectives(bodyNode, &name);
parseDirectivesNode(bodyNode);
parseDirectives(bodyNode, functionName);
parseDirectives(null);
parseDirectives(stringNode);
parseDirectives(NodeNode);
parseDirectives(bodyNode, params);
else  parseDirectives(bodyNode);
parseDirectives(bodyNode, head);
parseDirectives(bodyNode, count);
parseDirectives(bodyNode.GetParent());
parseDirectives(headNode);
ret = parseDirectives(bodyNode);
parseDirectives(bodyNode, &newNode);
parseDirectives(bodyNode.getFirstLine());
parseDirectives(bodyNode, nodeType);
node.addChildToBack(node);
else parseDirectives(bodyNode);
parseDirectives(this, bodyNode);
aParseDirectives(bodyNode);
parseDirectives( bodyNode );
parseDirectives(bodyNode, offset);
parseDirectives(bodyNode.getBody());
parseDirectives(bodyNode + 1);
parseDirectives(bodyNode, linenum);
parseDirectives(bodyNode)
parseDirectives(bodyNode, &bodyNode);
parseDirectives(bodyElement);
parseDirectives(docNode);
parseDirectives(lp);
parseDirectives(bodyNode) + 1;
parseDirectives(*bodyNode);
parseDirectives(bodyNode, param);
parseDirectives(bodyNode.bodyNode);
parseDirectives(bodyNode, frame);
parseDirectives(bodyNode, self);
parseDirectives(bodyNode, &flags);
parseDirectives(name);
parseDirectives(bodyName);
parseDirectives(textNode);
parseDirectives(endNode);
parseDirectives(bodyNode) - 1;
parseDirectives(bodyNode.GetParent());
parseDirectives(bodyNode, aNode);
parseDirectives(bodyNode.getClass());
parseDirectives(bodyNode, &line);
parseDirectives(Node);
parseDirectives(bodyNode, dummy);
parseDirectives(bodyNode.nodeInfo);
parseDirectives(bodyNode, ret);
parseDirectives(bodyNode, v);
setDirectives(bodyNode);
parseDirectives(bodyNode, targetNode);
parseDirectives(bodyNode, lineNode);
parseDirectives(0);
parseDirectives(bodyNode.GetNodeInfo());
parseDirectives(bodyNode.getUnicode());
parseDirectives(bodyNode.GetNodeType());
parseDirectives(bodyNode.mParentNode);
handleDirectives(bodyNode);
writeDirectives(bodyNode);
if (parseDirectives(bodyNode)) break;
parseDirectives(bodyNode, &lp);
parseDirectives(bodyNode, '.');
parseDirectives(bodyNode.getNumber());
parseDirectives(bodyNode, fp);
#endif parseDirectives(bodyNode);
parseDirectives(bodyNode, parser);
parseDirectives(bodyNode, l);
parseDirectives("");
#endif
parseDirectives(bodyNode.getNodeCount());
parseDirectives(bodyNode,node);
parseDirectives(dev);
/* ParseDirectives(bodyNode);*/
parseDirectives(bodyNode, null, null);
parseDirectives(bodyNode, tmp);
parseDirectives(bodyNode.GetNodeInfo());
parseDirectives(bodyNode, fd);
ParseDirectives(bodyNode, lp);
free(bodyNode);
parseDirectives(bodyNode, childNode);
parseDirectives(bodyNode, fn);
parseDirectives(bodyNode, &ret);
parseDirectives(bodyNode, flags, flags);
parseDirectives(bodyNode, NodeType);
parseDirectives(bodyNode, &lineNode);
parseDirectives(bodyNode, &linenum);
parseDirectives(bodyNode, &params);
findDirectives(bodyNode);
parseDirectives(bodyNode.getParser());
parseDirectives(param);
loadDirectives(bodyNode);
parseDirectives(bodyNode.getLast());
parseDirectives(bodyNode, null);
node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp)  break;  node.addChildToBack(newName); node.addChildToBack(newName);
parseDirectives(bodyNode, node.getParent());
if (parseDirectives(bodyNode)!= 0)  errorReporter.error("parseDirectives", bodyNode);
parseDirectives(bodyNode, functionNode.getLineno());
if (bodyNode.getName() == kNameSpaceID_None) parseDirectives(bodyNode); else  if (!(bodyNode = newNode(Token.EXPR_RESULT)))  errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0));  else  errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
parseDirectives(bodyNode, "", true);
parseDirectives(bodyNode, &lineno);
if (parseDirectives(bodyNode))  errorReporter.error("ParseDirectives: Node: node %s'", bodyNode); return newNode(Token.EXPR_RESULT, Node.newNumber(0));
parseDirectives(bodyNode, lpColumn);
if (node == null) parseDirectives(bodyNode); else  errorReporter.error( "node "%s"; cannot get character "%s"";
parseDirectives(bodyNode, node.getNodeInfo());
parseDirectives(bodyNode, ".");
parseDirectives(bodyNode, pNode.path);
/* * XXX need to * get parsed to avoid * a parse for sure the line number of parse. */
parseDirectives(bodyNode, kNC_CacheCount);
if (bodyNode)  parseDirectives(bodyNode);
rv = parseDirectives(bodyNode); if (rv == 0)  errorReporter.error( "FunctionNode called", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node)  if (name == null) return null;  if (name == NS_LITERAL_STRING("").get())  if (name.getUnnamedFunction() == functionNode)  if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION)  errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);  else  if (name == NS_LITERAL_STRING(""))  errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0);  else  errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
parseDirectives(bodyNode, functionNode.getNumber());
parseDirectives(bodyNode, &bName);
parseDirectives(bodyNode, node.getClass());
/* If there is an element node, replace it with the end of the list */ if (parseDirectives(bodyNode, &newName))  fprintf(stderr, "Function node: %sn", bodyNode);
lp.parentNode.mParent = (void *)bodyNode;
parseDirectives(bodyNode, functionNode.getPosition());
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp()))  lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name);  node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else  node.addCh
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node)  rv = parseDirectives(bodyNode);  else  rv = parseDirectives(bodyNode);
/* * The static object name */ node = parseDirectives(bodyNode);
parseDirectives(bodyNode, "", 1);
parseDirectives(bodyNode, kTrueFunctionFunctionFunction);
parseDirectives(bodyNode, functionNode.lineNo);
parseDirectives(bodyNode, &mParent);
parseDirectives(bodyNode, &parseDirectives);
parseDirectives(bodyNode, &bodyNode.firstChild);
parseDirectives(bodyNode, "%s", bodyNode);
parseDirectives(bodyNode, 0, "", 0);
parseDirectives(bodyNode, functionNode.getUnnamedNode());
parseDirectives(bodyNode, node.getLineno());
if (!node.isUnnamedFunction)  errorReporter.error( "unable to get node '%s' - just done.", node.getLineno()); node.addChildToBack(newNode);
parseDirectives(bodyNode, name, aLength);
if (parseDirectives(bodyNode))  break;
if (bodyNode.getNodeType() == Node.Type) parseDirectives(bodyNode); else parseDirectives(bodyNode);
parseDirectives(bodyNode, &def_name);
parseDirectives(bodyNode, sizeof(bodyNode));
if (bodyNode.find(line) > 0)  break;
parseDirectives(bodyNode, kLoadContext);
parseDirectives(bodyNode, node.getType());
parseDirectives(bodyNode, true, 0);
parseDirectives(bodyNode, &bodyNode.getFirstChild());
/* * The basic reason why XXX - isUnnamedFunction? */ if (isUnnamedFunction)  node.addChildToBack(newNode);
parseDirectives(bodyNode, "", 0, 0);
parseDirectives(bodyNode, tcp);
parseDirectives(bodyNode, mFunctionType);
parseDirectives(bodyNode.getFunctionType());
if (node.isDirective) parseDirectives(bodyNode);
if (bodyNode) parseDirectives(bodyNode);
if (!functionNode.isPosition())  parseDirectives(bodyNode);
if (parseDirectives(bodyNode))  if (isUnnamedFunction)  if (status == 0) errorReporter.error( "failed parsing ", sourceName);
parseDirectives(bodyNode, mFunctionNode);
parseDirectives(bodyNode, fname);
if (flags) parseDirectives(bodyNode);
parseDirectives(bodyNode, token.class);
parseDirectives(bodyNode, &cnt);
parseDirectives(bodyNode, mFunctionPtr);
parseDirectives(bodyNode, tmp, "");
parseDirectives(bodyNode, &instanceOfNode);
parseDirectives(bodyNode, &parentNode);
parseDirectives(bodyNode, getter_AddRefs(parseDirectives));
if (parseDirectives(bodyNode) == null)  errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
parseDirectives(bodyNode, aPtr);
parseDirectives(bodyNode, "%s", psi);
parseDirectives(bodyNode, token.token.Token.PARAM_LIST);
parseDirectives(bodyNode.getDependentFunctionType());
parseDirectives(bodyNode, &cstrlen(cstrlen(bodyNode)));
parseDirectives(bodyNode, &lineNum, lineNum);
parseDirectives(bodyNode, pd);
parseDirectives(bodyNode, &pParent);
parseDirectives(bodyNode, &result);
parseDirectives(bodyNode, "-.");
parseDirectives(bodyNode, '-');
parseDirectives(bodyNode, getter_AddRefs(newName));
parseDirectives(bodyNode, '/');
if (!functionNode.isPosition()) parseDirectives(bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node &"%s"; cannot get character "%s"";
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node <"%s&"; cannot get character <"%s"";
if (parseDirectives(bodyNode)) <if (isUnnamedFunction) &if (status == 0) errorReporter.error( "failed parsing ", sourceName);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node <"%s&"; cannot get character &"%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node "%s<"; cannot get character &"%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
<node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) break; &node.addChildToBack(newName); node.addChildToBack(newName);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node <"%s"; cannot get character <"%s"";
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) &rv = parseDirectives(bodyNode); &else rv = parseDirectives(bodyNode);
/* If there is an element node, replace it with the end of the list */ if (parseDirectives(bodyNode, &newName)) <fprintf(stderr, "Function node: %sn", bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) <rv = parseDirectives(bodyNode); &else &rv = parseDirectives(bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); <node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else node.addCh
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node &"%s"; cannot get character <"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node &"%s&"; cannot get character <"%s"";
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node <"%s<"; cannot get character <"%s"";
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) &rv = parseDirectives(bodyNode); &else &rv = parseDirectives(bodyNode);
if (parseDirectives(bodyNode)) errorReporter.error("ParseDirectives: Node: node &%s'", bodyNode); return newNode(Token.EXPR_RESULT, Node.newNumber(0));
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else node.addCh
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) <lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); <node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else <node.addCh
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node <"%s"; cannot get character "%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node &"%s<"; cannot get character <"%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) &lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); <node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else node.addCh
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node "%s"; cannot get character <"%s"";
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node &"%s&"; cannot get character "%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
<node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) break; node.addChildToBack(newName); node.addChildToBack(newName);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
else &parseDirectives(bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) rv = parseDirectives(bodyNode); <else <rv = parseDirectives(bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (parseDirectives(bodyNode) == null) &errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node &"%s&"; cannot get character <"%s"";
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node "%s<"; cannot get character <"%s"";
if (!functionNode.isPosition()) <parseDirectives(bodyNode);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) rv = parseDirectives(bodyNode); <else &rv = parseDirectives(bodyNode);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node <"%s<"; cannot get character "%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node <"%s&"; cannot get character "%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) <lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); &node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else <node.addCh
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node "%s&"; cannot get character &"%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node "%s&"; cannot get character <"%s"";
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node <"%s&"; cannot get character <"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
rv = parseDirectives(bodyNode); if (rv == 0) errorReporter.error( "FunctionNode called", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
parseDirectives(bodyNode, '0');
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node &"%s<"; cannot get character "%s"";
if (parseDirectives(bodyNode)) &errorReporter.error("ParseDirectives: Node: node <%s'", bodyNode); return newNode(Token.EXPR_RESULT, Node.newNumber(0));
parseDirectives(bodyNode, '&0');
node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) &break; <node.addChildToBack(newName); node.addChildToBack(newName);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) &rv = parseDirectives(bodyNode); &else <rv = parseDirectives(bodyNode);
if (parseDirectives(bodyNode)) if (isUnnamedFunction) <if (status == 0) errorReporter.error( "failed parsing ", sourceName);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
&node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) <break; node.addChildToBack(newName); node.addChildToBack(newName);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); &node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else &node.addCh
&node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) break; <node.addChildToBack(newName); node.addChildToBack(newName);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) &lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); &node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else node.addCh
&node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) <break; &node.addChildToBack(newName); node.addChildToBack(newName);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
<node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) <break; <node.addChildToBack(newName); node.addChildToBack(newName);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) <rv = parseDirectives(bodyNode); <else <rv = parseDirectives(bodyNode);
if (parseDirectives(bodyNode)) &errorReporter.error("ParseDirectives: Node: node %s'", bodyNode); return newNode(Token.EXPR_RESULT, Node.newNumber(0));
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) <lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else node.addCh
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) <lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); &node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else node.addCh
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode) &parseDirectives(bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node <"%s<"; cannot get character <"%s"";
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node "%s"; cannot get character &"%s"";
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) &lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); <node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else <node.addCh
if (parseDirectives(bodyNode)) break;
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node <"%s"; cannot get character <"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node "%s<"; cannot get character &"%s"";
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node &"%s<"; cannot get character "%s"";
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node &"%s<"; cannot get character &"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node "%s&"; cannot get character "%s"";
node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) <break; <node.addChildToBack(newName); node.addChildToBack(newName);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) <lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else &node.addCh
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node <"%s<"; cannot get character &"%s"";
/* * The basic reason why XXX - isUnnamedFunction? */ if (isUnnamedFunction) <node.addChildToBack(newNode);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node <"%s&"; cannot get character <"%s"";
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node "%s<"; cannot get character "%s"";
if (bodyNode) parseDirectives(bodyNode);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node &"%s<"; cannot get character &"%s"";
&node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) break; node.addChildToBack(newName); node.addChildToBack(newName);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node &"%s&"; cannot get character "%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) <lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); <node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else node.addCh
/* * The basic reason why XXX - isUnnamedFunction? */ if (isUnnamedFunction) &node.addChildToBack(newNode);
if (parseDirectives(bodyNode)!= 0) &errorReporter.error("parseDirectives", bodyNode);
if (parseDirectives(bodyNode) == null) errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node &"%s<"; cannot get character <"%s"";
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) &lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); <node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else &node.addCh
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) <rv = parseDirectives(bodyNode); &else rv = parseDirectives(bodyNode);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) &rv = parseDirectives(bodyNode); else <rv = parseDirectives(bodyNode);
&node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) &break; &node.addChildToBack(newName); node.addChildToBack(newName);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); <node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else <node.addCh
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) <lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else <node.addCh
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node <"%s"; cannot get character "%s"";
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node "%s<"; cannot get character "%s"";
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) &rv = parseDirectives(bodyNode); <else <rv = parseDirectives(bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (parseDirectives(bodyNode)) <errorReporter.error("ParseDirectives: Node: node %s'", bodyNode); return newNode(Token.EXPR_RESULT, Node.newNumber(0));
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node "%s<"; cannot get character <"%s"";
&node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) &break; <node.addChildToBack(newName); node.addChildToBack(newName);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
rv = parseDirectives(bodyNode); if (rv == 0) <errorReporter.error( "FunctionNode called", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.find(line) > 0) <break;
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
&node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) break; &node.addChildToBack(newName); node.addChildToBack(newName);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); <node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else &node.addCh
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); &node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else <node.addCh
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) rv = parseDirectives(bodyNode); else <rv = parseDirectives(bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (parseDirectives(bodyNode)!= 0) <errorReporter.error("parseDirectives", bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
else <parseDirectives(bodyNode);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else <node.addCh
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (parseDirectives(bodyNode)!= 0) errorReporter.error("parseDirectives", bodyNode);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node "%s"; cannot get character &"%s"";
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node &"%s&"; cannot get character &"%s"";
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node &"%s"; cannot get character &"%s"";
if (bodyNode.find(line) > 0) break;
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node <"%s&"; cannot get character "%s"";
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) &lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else &node.addCh
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* If there is an element node, replace it with the end of the list */ if (parseDirectives(bodyNode, &newName)) <fprintf(stderr, "Function node: %s&n", bodyNode);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node &"%s"; cannot get character &"%s"";
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node <"%s<"; cannot get character "%s"";
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) &rv = parseDirectives(bodyNode); else rv = parseDirectives(bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node "%s"; cannot get character <"%s"";
if (parseDirectives(bodyNode)) errorReporter.error("ParseDirectives: Node: node <%s'", bodyNode); return newNode(Token.EXPR_RESULT, Node.newNumber(0));
<node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) break; <node.addChildToBack(newName); node.addChildToBack(newName);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
rv = parseDirectives(bodyNode); if (rv == 0) &errorReporter.error( "FunctionNode called", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (parseDirectives(bodyNode)) &errorReporter.error("ParseDirectives: Node: node &%s'", bodyNode); return newNode(Token.EXPR_RESULT, Node.newNumber(0));
/* If there is an element node, replace it with the end of the list */ if (parseDirectives(bodyNode, &newName)) &fprintf(stderr, "Function node: %s<n", bodyNode);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) rv = parseDirectives(bodyNode); <else rv = parseDirectives(bodyNode);
parseDirectives(bodyNode, '<0');
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
<node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) &break; <node.addChildToBack(newName); node.addChildToBack(newName);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node "%s"; cannot get character "%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (parseDirectives(bodyNode)) &if (isUnnamedFunction) &if (status == 0) errorReporter.error( "failed parsing ", sourceName);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) &lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else <node.addCh
if (parseDirectives(bodyNode)) &break;
node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) <break; node.addChildToBack(newName); node.addChildToBack(newName);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) &rv = parseDirectives(bodyNode); else &rv = parseDirectives(bodyNode);
node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) &break; node.addChildToBack(newName); node.addChildToBack(newName);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (parseDirectives(bodyNode)) &if (isUnnamedFunction) if (status == 0) errorReporter.error( "failed parsing ", sourceName);
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node &"%s&"; cannot get character "%s"";
/* If there is an element node, replace it with the end of the list */ if (parseDirectives(bodyNode, &newName)) &fprintf(stderr, "Function node: %sn", bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) break; node.addChildToBack(newName); node.addChildToBack(newName);
if (!node.isUnnamedFunction) &errorReporter.error( "unable to get node '%s' - just done.", node.getLineno()); node.addChildToBack(newNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node "%s<"; cannot get character <"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node <"%s<"; cannot get character "%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node <"%s"; cannot get character &"%s"";
/* If there is an element node, replace it with the end of the list */ if (parseDirectives(bodyNode, &newName)) fprintf(stderr, "Function node: %s<n", bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (parseDirectives(bodyNode)) errorReporter.error("ParseDirectives: Node: node %s'", bodyNode); return newNode(Token.EXPR_RESULT, Node.newNumber(0));
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
<node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) &break; &node.addChildToBack(newName); node.addChildToBack(newName);
if (parseDirectives(bodyNode)) if (isUnnamedFunction) if (status == 0) errorReporter.error( "failed parsing ", sourceName);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) <lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); &node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else &node.addCh
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* If there is an element node, replace it with the end of the list */ if (parseDirectives(bodyNode, &newName)) fprintf(stderr, "Function node: %s&n", bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) <lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); <node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else &node.addCh
/* * The basic reason why XXX - isUnnamedFunction? */ if (isUnnamedFunction) node.addChildToBack(newNode);
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node <"%s<"; cannot get character &"%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (parseDirectives(bodyNode)) <errorReporter.error("ParseDirectives: Node: node <%s'", bodyNode); return newNode(Token.EXPR_RESULT, Node.newNumber(0));
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node <"%s&"; cannot get character &"%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) break; &node.addChildToBack(newName); node.addChildToBack(newName);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node &"%s&"; cannot get character &"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node "%s&"; cannot get character <"%s"";
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node &"%s<"; cannot get character <"%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.find(line) > 0) &break;
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
&node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) <break; <node.addChildToBack(newName); node.addChildToBack(newName);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) &rv = parseDirectives(bodyNode); <else rv = parseDirectives(bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (parseDirectives(bodyNode)) <if (isUnnamedFunction) if (status == 0) errorReporter.error( "failed parsing ", sourceName);
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node <"%s"; cannot get character "%s"";
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) &lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); &node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else <node.addCh
node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) break; <node.addChildToBack(newName); node.addChildToBack(newName);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node "%s"; cannot get character <"%s"";
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node &"%s"; cannot get character "%s"";
if (parseDirectives(bodyNode)) <break;
node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) <break; &node.addChildToBack(newName); node.addChildToBack(newName);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
<node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) &break; node.addChildToBack(newName); node.addChildToBack(newName);
&node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) &break; node.addChildToBack(newName); node.addChildToBack(newName);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) rv = parseDirectives(bodyNode); else &rv = parseDirectives(bodyNode);
node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) &break; &node.addChildToBack(newName); node.addChildToBack(newName);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node <"%s<"; cannot get character <"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node "%s<"; cannot get character &"%s"";
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) <rv = parseDirectives(bodyNode); else &rv = parseDirectives(bodyNode);
if (parseDirectives(bodyNode) == null) <errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) &lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else node.addCh
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node "%s"; cannot get character "%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) rv = parseDirectives(bodyNode); &else rv = parseDirectives(bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node &"%s"; cannot get character &"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* If there is an element node, replace it with the end of the list */ if (parseDirectives(bodyNode, &newName)) &fprintf(stderr, "Function node: %s&n", bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) <rv = parseDirectives(bodyNode); <else rv = parseDirectives(bodyNode);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node &"%s&"; cannot get character &"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) rv = parseDirectives(bodyNode); &else &rv = parseDirectives(bodyNode);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) rv = parseDirectives(bodyNode); else rv = parseDirectives(bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
<node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) <break; &node.addChildToBack(newName); node.addChildToBack(newName);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node <"%s<"; cannot get character &"%s"";
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node "%s&"; cannot get character <"%s"";
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node "%s"; cannot get character "%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node &"%s"; cannot get character <"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node <"%s&"; cannot get character "%s"";
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) &lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); &node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else &node.addCh
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode) <parseDirectives(bodyNode);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else &node.addCh
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node "%s&"; cannot get character &"%s"";
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) <rv = parseDirectives(bodyNode); else <rv = parseDirectives(bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node "%s<"; cannot get character "%s"";
parseDirectives(bodyNode);
if (parseDirectives(bodyNode)) if (isUnnamedFunction) &if (status == 0) errorReporter.error( "failed parsing ", sourceName);
if (!node.isUnnamedFunction) <errorReporter.error( "unable to get node '%s' - just done.", node.getLineno()); node.addChildToBack(newNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) <rv = parseDirectives(bodyNode); else rv = parseDirectives(bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node <"%s"; cannot get character <"%s"";
if (parseDirectives(bodyNode)) &if (isUnnamedFunction) <if (status == 0) errorReporter.error( "failed parsing ", sourceName);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* If the paren is not on the line, * we need to do this in the main node (see doc.exc()). */ if ((lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp())) lpColumn = bodyNode.getAbsolutePosition() + functionNode.getLp(); newName.setCharno(position2charno(lpColumn)); maybeSetLengthFrom(newName, name); &node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (! lp) break; if (! lp) break; newName.setBody(position2charno(lpColumn)); else node.addCh
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node &"%s"; cannot get character <"%s"";
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node <"%s&"; cannot get character &"%s"";
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node &"%s<"; cannot get character &"%s"";
<parseDirectives(bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node &"%s"; cannot get character "%s"";
/* If there is an element node, replace it with the end of the list */ if (parseDirectives(bodyNode, &newName)) fprintf(stderr, "Function node: %sn", bodyNode);
if (parseDirectives(bodyNode)) <if (isUnnamedFunction) <if (status == 0) errorReporter.error( "failed parsing ", sourceName);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) <rv = parseDirectives(bodyNode); <else &rv = parseDirectives(bodyNode);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) &rv = parseDirectives(bodyNode); <else &rv = parseDirectives(bodyNode);
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node "%s&"; cannot get character "%s"";
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node <"%s"; cannot get character &"%s"";
else parseDirectives(bodyNode);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node "%s&"; cannot get character "%s"";
&parseDirectives(bodyNode);
if (node == null) parseDirectives(bodyNode); else &errorReporter.error( "node &"%s<"; cannot get character "%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) <rv = parseDirectives(bodyNode); &else <rv = parseDirectives(bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (!functionNode.isPosition()) &parseDirectives(bodyNode);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* If there is an element node, replace it with the end of the list */ if (parseDirectives(bodyNode, &newName)) <fprintf(stderr, "Function node: %s<n", bodyNode);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; <if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
<node.addChildToBack(newName); Node lp = newNode(Token.PARAM_LIST); if (lp) <break; node.addChildToBack(newName); node.addChildToBack(newName);
if (!node.isUnnamedFunction) errorReporter.error( "unable to get node '%s' - just done.", node.getLineno()); node.addChildToBack(newNode);
if (parseDirectives(bodyNode)) <errorReporter.error("ParseDirectives: Node: node &%s'", bodyNode); return newNode(Token.EXPR_RESULT, Node.newNumber(0));
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; &if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); &else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else <if (!(bodyNode = newNode(Token.EXPR_RESULT))) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) <if (name.getUnnamedFunction() == functionNode) <if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) <if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) &if (name.getUnnamedFunction() == functionNode) if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
/* * If this is a function name, we have to do it by the function name, in this case. */ if (node == node) rv = parseDirectives(bodyNode); &else <rv = parseDirectives(bodyNode);
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node "%s&"; cannot get character &"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); else errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node <"%s"; cannot get character &"%s"";
if (node == null) parseDirectives(bodyNode); else <errorReporter.error( "node "%s"; cannot get character &"%s"";
/* * For XXX avoid unnamed function statements, use to pass it the line. */ if (node) &if (name == null) return null; if (name == NS_LITERAL_STRING("").get()) if (name.getUnnamedFunction() == functionNode) &if (name.getUnnamedFunction() == functionNode.FUNCTION_EXPRESSION) errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); else if (name == NS_LITERAL_STRING("")) errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno(), "", 0); else errorReporter.error( "can't find %d.%s", sourceName, functionNode.getLineno
if (node == null) parseDirectives(bodyNode); else errorReporter.error( "node &"%s&"; cannot get character <"%s"";
if (bodyNode.getName() == kNameSpaceID_null) parseDirectives(bodyNode); else &if (!(bodyNode = newNode(Token.EXPR_RESULT))) <errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0); return newNode(Token.EXPR_RESULT, Node.newNumber(0)); <else &errorReporter.error( "unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
