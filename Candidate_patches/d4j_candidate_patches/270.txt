golden:
int sum = 0;
inference:

int sum;
int sum = 0;
long sum = 0;
int sum = 1;
int sum = null;
int sum = -1;
static int sum = 0;
u_int sum = 0;
unsigned int sum = 0;
size_t sum = 0;
u_long sum = 0;
unsigned long sum = 0;
int sum = sum;
final int sum = 0;
int sum = 0, i;
const int sum = 0;
int sum = (int)0;
int sum = 0 ;
int sum; int i;
int i;
int sum=0;
int sum = 0 = 0;
int sum = (0);
int sum = 0.;
int sum = 2;
long sum;
short sum = 0;
int sum, i;
int i, sum = 0;
unsigned int sum;
void sum = 0;
size_t sum;
uint sum = 0;
int sum = zero;
double sum = 0;
int result = 0;
u_int_sum = 0;
u_int32_t sum;
int i = 0;
Integer sum = 0;
unsigned long sum;
int sum = d;
int sum = 0, i = 0;
int sum = false;
int sum = &sum;
int sum = 0, cnt;
int sum = k;
int amount = 0;
PRInt32 sum = 0;
int sum = i;
int sum, sum = 0;
int sum2 = 0;
int sum = 0, length = 0;
int sum = 0, d;
int sum = 0 __unused;
int sum1 = 0;
int sum = sum = 0;
int s = 0;
integer sum = 0;
virtual int sum = 0;
int sum = (int) 0;
int sum = r;
int *sum = 0;
int sum = 0, max = 0;
off_t sum = 0;
int sum = 4;
u_int16_t sum;
final int sum;
float sum = 0;
int sum = 0, r;
int sum = 0 = 1;
sum = 0;
int sum = 0, offset = 0;
int total = 0;
int value = 0;
public int sum = 0;
int sum = 0, len = 0;
int sum = 3;
int sum, cnt;
int sum, d;
int sum = 1, i;
int s;
int sum = x;
static int sum;
int sum, offset;
int sum = pointSet.size();
Int sum = 0;
int sum = 0, j;
int sum, max = 0;
final long sum = 0;
int sum, length;
Integer sum;
int d;
int r, sum = 0;
void *sum = 0;
int sum = 0, r = 0;
int sum = 0, n = 0;
int sum =  0;
PRUint32 sum = 0;
int sum, length = 0;
int i, sum;
int sum, sum;
int sum, i = 0;
int sum = 1.;
int sum = 0, max;
u_int sum;
void sum;
int d, sum = 0;
int size = 0;
int sum = '0';
int sum = sum + 1;
int sum = 0, offset;
int sum = 5;
int sum = false;
int sum = 0, d = 0;
int sum = resultSet.size();
int sum, offset = 0;
int sum = max(0, sum);
int sum = 0, j = 0;
int sum = *d;
int sum = 0, p;
int sum, r;
int r;
int sum = 100;
int sum = 0, v;
int sum = distance;
int sum = 0, end = 0;
int sum = 1000;
int sum = 0, n;
int sum = nu;
int sum; int r;
int sum = 0, len;
int sum __unused;
int r = 0;
int sum = 0, k;
int sum = 0, last = 0;
int sum = None;
int sum = ;
int sum = 0, x;
int sum = 0, length;
int sum = 0, s;
int sum = 0 - 1;
int sum = NO_SIZE;
int sum = 0, error = 0;
int sum = r = 0;
u_int i;
int sum; int cnt;
int sum = 0, x = 0;
int sum = l;
int sum = %d;
int sum, s;
int sum = 0, s = 0;
int sum, len;
int sum = 0; */
int sum = sum - 1;
int sum = 0, center = 0;
int sum = 0, sum = 0;
int sum, len = 0;
int sum1, sum2;
int sum; int d;
int sum = *p;
int sum = 0, ret;
int sum = 0, resultSet.size();
int sum; int j;
int sum = 0; #endif
double sum;
int sum, p;
int sum = 0, k = 0;
int sum = 0, count = 0;
int sum; i = 0;
int total;
int sum = sum + d;
int sum = 0, index = 0;
int sum = 0, l;
int sum);
int sum =  0 ;
int sum = 0, row = 0;
int sum = D(x);
int sum = 0  0;
int sum = 0, *d;
int sum = 0, size = 0;
int sum = (int *)0;
int sum = 0, err;
int sum = 0, p = 0;
int sum, r = 0;
int sum = 0, tmp;
int sum = 0, x, y;
u_int8_t sum;
int sum = 0, i, j;
int sum, ret;
int sum = 0, resultSet = null;
u_quad_t sum;
int sum = splnet();
int sum = 0, c = 0;
int sum = 0, pointSet.size();
int sum = 0 == 0;
int sum = 0; /* * XXX */
int sum; int ret;
int sum = sum_to_num(&sum);
int sum = 0; struct proc *p;
int sum = 0, ret = 0;
int sum = 0; /* We are going to end up with the next data point - not the nearest * x-s. */
int sum = 0; u_int32_t i;
int sum = 0, x = 0, x;
int sum = 0; void* k;
int sum = 0, totalCnt = 0;
int sum = 0; int i = 0;
int sum = 0; struct ivar ivar;
int sum = 0, sum;
int sum = 0; int i;
int sum = 0, d, h = 0;
int sum = 0, size;
int sum = 0; /* No memory, but we're not getting the closest one */
int sum = 0; /* * We are looking for an offset if we've been allocated to an x/d x/d */
int sum = 0, dx2 = 0, rx2 = 0, dy2 = 0, dx3 = 0;
int sum = 0, cst = 0;
int sum = 0, total = 0;
int sum = 0, prevNum = 0;
int sum = 0; char ** sum;
int sum = 0; /* do not have to do a sum to */
int sum = 0; if (mFrameType && sum)  mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType;  else  mFrameType = mFrameType;
int sum = 0; struct tmp *tmp;
int sum = 0; /* Initialize to a space between * data points x and * x and y */
int sum = 0, off;
int sum = 0, numArenas = 0, maxHash = 0, numRawPos = 0;
int sum = 0; if (mFrameType && sum) mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; else &mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; <else &mFrameType = mFrameType;
int sum = '&0';
int sum = 0; if (mFrameType && sum) &mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; else mFrameType = mFrameType;
int sum = 0 <;
int sum = 0; if (mFrameType && sum) mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; <else mFrameType = mFrameType;
int sum = <0 &;
int sum = 0;
int sum = 0; if (mFrameType && sum) <mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; <else mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) &mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; &else &mFrameType = mFrameType;
int sum = 0;
int sum = 0; if (mFrameType && sum) &mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; &else mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) <mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; &else <mFrameType = mFrameType;
int sum = &0 <;
int sum = 0 <0;
int sum = 0; if (mFrameType && sum) &mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; <else &mFrameType = mFrameType;
int sum = 0 &0;
int sum = <0;
int sum = 0; if (mFrameType && sum) <mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; else &mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) <mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; &else &mFrameType = mFrameType;
int sum = &0 ;
int sum = '0';
int sum = <0 ;
int sum = 0; if (mFrameType && sum) &mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; else <mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) <mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; else mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; &else &mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; else mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) &mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; <else mFrameType = mFrameType;
int sum = &0;
int sum = 0; if (mFrameType && sum) &mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; <else <mFrameType = mFrameType;
int sum = &0 &;
int sum = <0 <;
int sum = 0 0;
int sum = 0 ;
int sum = 0; if (mFrameType && sum) <mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; &else mFrameType = mFrameType;
int sum = '<0';
int sum = 0; if (mFrameType && sum) mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; &else <mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) <mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; else <mFrameType = mFrameType;
int sum = 0 &;
int sum = 0; if (mFrameType && sum) mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; &else mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) <mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; <else &mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) &mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; else &mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; <else <mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) &mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; &else <mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; else <mFrameType = mFrameType;
int sum = 0; if (mFrameType && sum) <mFrameType = mFrameType; mFrameType = mFrameType; mFrameType = mFrameType; <else <mFrameType = mFrameType;
