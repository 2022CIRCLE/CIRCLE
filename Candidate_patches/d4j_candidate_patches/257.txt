new NodeTraversal(compiler, renamer).traverse(root);
.traverse(root);
NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, assertOnChange).traverse(root);
new NodeTraversal(compiler).traverse(root);
new NodeTraversal(compiler, root);

new NodeTraversal(compiler, root).traverse(root);
NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange));
NodeTraversal(compiler, root);
new NodeTraversal(compiler, renamer);
NodeTraversal(compiler, assertOnChange);
new NodeTraversal().traverse(root);
new NodeTraversal(compiler);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange));
new NodeTraversal(compiler, new NormalizeStatements(compiler)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange));
new NodeTraversal(compiler,.traverse(root))
nodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, assertOnChange);
new NodeTraversal( compiler, new NormalizeStatements(compiler)).traverse(root);
.traverse(root)
NodeTraversal.traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange));
nodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, result).traverse(root);
new NodeTraversal(compiler, null).traverse(root);
NodeTraversal(compiler, assertOnChange).traverse(root);
new NodeTraversal(Comparator, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler,.traverse(root));
new NodeTraversal(compiler, rv).traverse(root);
new NodeTraversal (compiler, new NormalizeStatements (compiler, assertOnChange)).traverse(root);
NodeTraversal().traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange).traverse(root);
NodeTraversal(compiler, renamer);
new NodeTraversal(compiler, renamer, root);
new NodeTraversal(compiler, root)
new NodeTraversal(compiler, new NormalizeStatements(compiler, root)).traverse(root);
new NodeTraversal(compiler, renamer)
new NodeTraversal(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, ignoreOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements()).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)), root);
nodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange));
new NodeTraversal(compiler, None).traverse(root);
new NodeTraversal(compiler, New NormalizeStatements(compiler, assertOnChange)).traverse(root);
return new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, Root).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange));.traverse(root);
new NodeTraversal(compiler);.traverse(root);
NodeTraversal();
new NodeTraversal(compiler, new NormalizeStatements(compiler, addOnChange)).traverse(root);
new NodeTraversal(compiler, null).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)),.traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)), root);
NodeTraversal(compiler,.traverse(root));
new NodeTraversal(compiler, v).traverse(root);
new NodeTraversal(compiler,.traverse(root)).traverse(root);
new NodeTraversal(compiler, t).traverse(root);
new NodeTraversal(compiler, renamer);.traverse(root);
nodeTraversal(compiler, root);
nodeTraversal(compiler, assertOnChange).traverse(root);
new NodeTraversal(compiler, nodeTraversal).traverse(root);
new NodeTraversal(compiler, rv);
new NodeTraversal(compiler, assertOnChange, root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, ignoreOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, root)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, renamer)).traverse(root);
t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root);
NodeTraversal(compiler, renamer).traverse(root);
new NodeTraversal(compiler, null).traverse(root);
NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange));.traverse(root);
new NodeTraversal(compiler, assertOnChange));
new NodeTraversal(compiler, new NormalizeStatements(compiler, result)).traverse(root);
new NodeTraversal(compiler, renamer, root).traverse(root);
nodeTraversal(compiler, assertOnChange);
new NodeTraversal(compiler, getter_AddRefs(root)).traverse(root);
new NodeTraversal (compiler, new NormalizeStatements (compiler, assertOnChange)).traverse (root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, renamer)).traverse(root);
new NodeTraversal(compiler, assertOnChange)
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange));.traverse(root);
NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange))
NodeTraversal.Traverse(compiler, root);
new NodeTraversal(component, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
NodeTraversal(compiler, renamer, root);
NodeTraversal(compiler, assertOnChange, root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)),.traverse(root);
new NodeTraversal(compiler); new NormalizeStatements(compiler, assertOnChange).traverse(root);
nodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange));
new NodeTraversal()
NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange));.traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, addOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange),.traverse(root);
new NodeTraversal(compiler); new NormalizeStatements(compiler, assertOnChange);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange))
new NodeTraversal(compiler, ignoreOnChange).traverse(root);
new NodeTraversal(comparator, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal (compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, &root).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, rv)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, warnOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(externs, assertOnChange)).traverse(root);
NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange))
new NodeTraversal(compiler, proc).traverse(root);
NodeTraversal(compiler, assertOnChange)
new NodeTraversal(compiler, result);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange),.traverse(root));
new NodeTraversal(compiler, node).traverse(root);
new NodeTraversal(compiler, ret);
new NodeTraversal(Comparator, new NormalizeStatements(Comparator, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(node, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange), root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange),.traverse(root);
NodeTraversal(compiler, root).traverse(root);
result = new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, super.traverse(root));
nu = new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange), root);
t = new NodeTraversal(compiler, renamer);
new NodeTraversal( compiler, new NormalizeStatements(compiler, result)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange) ).traverse(root);
NodeTraversal (compiler, assertOnChange).traverse(root);
new NodeTraversal(compiler, str).traverse(root);
NodeTraversal(compiler);
new NodeTraversal(compiler, doc).traverse(root);
new NodeTraversal(compiler, null);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)));
new NodeTraversal(compiler, new NormalizeStatements(compiler, v)).traverse(root);
new NodeTraversal(compiler, null);
new NodeTraversal(compiler, assertOnChange);.traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(Comparator, assertOnChange)).traverse(root);
new NodeTraversal(compiler, rc).traverse(root);
new NodeTraversal(compiler, false).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements()).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, rv)).traverse(root);
new NodeTraversal(compiler, renamer)).traverse(root);
new NodeTraversal(compiler, true).traverse(root);
new NodeTraversal(compiler, &root);
new NodeTraversal(compiler, new NormalizeStatements(editor, assertOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange))
new NodeTraversal(compiler, r).traverse(root);
NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange) ).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root);
new NodeTraversal(compiler, warnOnChange).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, false)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(Comparator, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(component, assertOnChange)).traverse(root);
new NodeTraversal(compiler, addOnChange).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, t)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler));
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, this)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(comiler, assertOnChange)).traverse(root);
new NodeTraversal( compiler, normalizeStatements(compiler, assertOnChange)).traverse(root);
nu = new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange));
nodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange));.traverse(root);
MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
new NodeTraversal(compiler, new NormalizeStatements(compiler, None)).traverse(root);
NodeTraversal(compiler, &root);
nodeTraversal(compiler, renamer);
NodeTraversal(compiler, rv);
new NodeTraversal(compiler, new NormalizeStatements(compiler))
new NodeTraversal(compiler, root, new NormalizeStatements(compiler, assertOnChange))
new NodeTraversal();
new NodeTraversal(compiler, new NormalizeStatements(compiler, verifyOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler));
new NodeTraversal(compiler, getter_AddRefs(externs)).traverse(root);
new NodeTraversal(compiler); new NormalizeStatements(compiler, assertOnChange)).traverse(root);
nu = new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange));
NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root);
t.traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, tryOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, root))
new NodeTraversal(compiler, new NormalizeStatements(compiler, status)).traverse(root);
NodeTraversal (compiler, assertOnChange);
NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange).traverse(root));
new NodeTraversal(compiler, normalizeStatements(compiler, assertOnChange)).traverse(root);
NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)), root);
new NodeTraversal(compiler, assertOnChange,.traverse(root));
new NodeTraversal( compiler, new NormalizeStatements(compiler, &extensions,.traverse(root)))
new NodeTraversal(compiler, (void**) &rhs).traverse(root);
new NodeTraversal(compiler, null, &new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, &ccrl)).traverse(root);
new NodeTraversal(compiler, NS_RELEASE(root)).traverse(root);
new NodeTraversal(compiler, renamer, rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.rc.r
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, &removeEmptyFrames)).traverse(root);
new NodeTraversal(compiler, &return).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler,.get(),.get(),.get(),.t)).traverse(root);
new NodeTraversal(compiler, getter_AddRefs(result)).traverse(root);
new NodeTraversal(compiler, (const NormalizeStatements*)compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root.get());
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, aValue)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, 0)).traverse(root);
NodeTraversal::newNodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, true)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, &rdfServ)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, null)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, rv)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(xstrlen(root));
new NodeTraversal(compiler, &nodeTraversal, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, '0')).traverse(root);
new NodeTraversal(compiler, assertOnChange, &newComponentTraversal);
new NodeTraversal(compiler, new NormalizeStatements(compiler, void)).traverse(root);
new NodeTraversal(compiler, NS_LITERAL_STRING("a"), new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, uint8_t)).traverse(root);
NodeTraversal(compiler, proc, null, proc, proc).traverse(root);
new NodeTraversal(compiler, nullProp).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, NODE_CLASS_AS_ENCODER_DATE)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(os.path);
new NodeTraversal(compiler, root, ret);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root,compiler.getFullPath());
new NodeTraversal(compiler, null, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
NodeTraversal t; t.traverseRoots(externs, root);
new NodeTraversal(compiler, null);.traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, &reason, &type)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, self)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, &nodeTraversal)).traverse(root);
new NodeTraversal(compiler, root, (cls_doc)node.compiler)).traverse(root);
NodeTraversal(compiler, rdfServ, null, NodeTraversal(compiler, assertOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, int flags)).traverse(root, flags);
new NodeTraversal(compiler, makeDeclaredNamesUnique, makeDeclaredNamesUnique()).traverse(root);
new NodeTraversal(compiler, aNewNodeTraversal, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, false)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root, true);
new NodeTraversal(compiler, renamer, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, renamer, 0)).traverse(root);
NodeTraversal t;
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, makeUniqueStatements)).traverse(root);
new NodeTraversal(compiler, rdfServ, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, null, null).traverse(root);
new NodeTraversal(compiler, res).traverse(root);
NodeTraversal(compiler, ret, root);
new NodeTraversal(compiler, null_node, node, assertOnChange).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root, null, null);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(node);
NodeTraversal(compiler, root, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, ioCallbacks)).traverse(root);
new NodeTraversal(compiler, rdfcnt).traverse(root);
NodeTraversal(compiler, assertOnChange, &root);
new NodeTraversal(compiler, NS_IXBL_NODE_TRANSFORMED, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, &nodeTraversal)).traverse(root);
NodeTraversal(compiler, Root.txt);
NodeTraversal(compiler, null, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, AssertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, &returns)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, recursive_get_name())).traverse(root);
new NodeTraversal(compiler, assertOnChange, aExternal.nodeTraversals).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, null)).traverse(root, null);
new NodeTraversal(compiler, revert_ret, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, &result)).traverse(root);
new NodeTraversal(compiler, rdftestroot);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, &debug)).traverse(root);
new NodeTraversal(compiler, (unsigned long)reg.traverse(root));
new NodeTraversal(compiler, (NodeTraversal *) new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, assertOnChange, std::traverse(root)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, NS_STATIC_CAST(NodeTraversal_Target, null))).traverse(root);
new NodeTraversal(compiler, root, null);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, true)).traverse(root);
NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root);
new NodeTraversal(compiler, aRawPtr).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, null)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, self, assertOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, &return)).traverse(root);
new NodeTraversal(compiler, renamer, root, normalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, aArenamer)).traverse(root);
new NodeTraversal(compiler, (PRUint32)compiler, (PRUint32)assertOnChange)).traverse(root);
new NodeTraversal( compiler, nsLayoutAtoms::asyncComparator(compiler)).traverse(root);
new NodeTraversal(compiler, renamer, ret);
new NodeTraversal(compiler, new NormalizeStatements(compiler, "add-one")).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, 0xffffff)).traverse(root);
new NodeTraversal(compiler, rc, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, v3)).traverse(root);
new NodeTraversal(compiler, assertOnChange, aRefCnt++).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, /*aspect*/asserOnChange)).traverse(root);
new NodeTraversal(compiler, (void**) new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, (PRUint32) new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, rhscr).traverse(root);
new NodeTraversal(compiler, assertOnChange, &dirtyFolder).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, "A" + assertOnChange)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, aNameAt(compiler, aNameAt(compiler, aName))).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t.t
new NodeTraversal(compiler, renamer,.traverse(root))
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, null)).traverse(root);
new NodeTraversal(compiler, nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(nsAutoString(reply), nsAutoString(reply), nsAutoString(nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply), nsAutoString(reply),
new NodeTraversal(compiler, null, NS_STATIC_CAST(NodeTraversal*, new NormalizeStatements(compiler, assertOnChange))).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, self.nodeInfo)).traverse(root);
new NodeTraversal(compiler, &root, &reporter, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, do_it)).traverse(root);
new NodeTraversal(compiler, assertOnChange, Root);
NodeTraversal(compiler, "Unique", assertOnChange);
new NodeTraversal(compiler, new NormalizeStatements(compiler, re-init, assertOnChange)).traverse(root);
NodeTraversal(compiler, (void **)&new NormalizeStatements(compiler, assertOnChange)).traverse(root);
NodeTraversal(compiler, aChangeTraverse, rdfcnt);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, flags)).traverse(root, flags);
new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange, &refs)).traverse(root);
new NodeTraversal(compiler, new NormalizeStatements(compiler, AssertionError)).traverse(root);
NodeTraversal(compiler, (nsISupports *).traverse(root));
new NodeTraversal(compiler, null, NS_ConvertASCIItoUCS2(v)).traverse(root);
new NodeTraversal(compiler, &returns).traverse(root);
new NodeTraversal(compiler, res.traverse(root))
new NodeTraversal( compiler, new NormalizeStatements(compiler, NODE_CLASS_AS_ENCODER_DATE)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, &NODE_CLASS_AS_ENCODER_DATE)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, '0')).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, <NODE_CLASS_AS_ENCODER_DATE)).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, '&0')).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange, '<0')).traverse(root);
new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
